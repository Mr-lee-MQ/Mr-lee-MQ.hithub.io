<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS3</title>
    <url>/Mr-lee-MQ.hithub.io/2020/07/15/CSS3/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS<a id="more"></a></h1><h2 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h2><ul>
<li>CSS1.0</li>
<li>CSS2.0   DIV（块） +   CSS，HTML 和CSS结构分离的思想，网页变得简单，SEO</li>
<li>CSS2.1   浮动，定位</li>
<li>CSS3.0   圆角，阴影，动画    浏览器兼容性</li>
</ul>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul>
<li>style    存放CSS代码<ul>
<li>选择器{ 声明1；声明2…….   }</li>
<li>单独写一个CSS文件，在HTML中用link引入</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">     我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"CSS/CSS1.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS的优势"><a href="#CSS的优势" class="headerlink" title="CSS的优势"></a>CSS的优势</h2><ul>
<li>内容和表现分离</li>
<li>网页结构表现统一，可以实现复用</li>
<li>样式十分的丰富</li>
<li>建立使用独立于html的css文件</li>
<li>利用SEO，容易被搜索引擎收录</li>
</ul>
<h2 id="CSS的四种引入方式"><a href="#CSS的四种引入方式" class="headerlink" title="CSS的四种引入方式"></a>CSS的四种引入方式</h2><p>优先级：就近原则，谁离代码近，谁的优先级越高</p>
<ul>
<li>行内样式：在元素标签中，编写一个style属性，编写样式即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color: red"</span> &gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>内部样式：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h1 &#123;</span><br><span class="line">       color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>外部样式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">     我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"CSS/CSS1.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h1&#123;</span><br><span class="line">    color: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拓展：外部样式两种写法</p>
<ul>
<li>链接式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">     我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"CSS/CSS1.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h1&#123;</span><br><span class="line">    color: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>导入式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url <span class="string">"CSS/CSS1.css"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>lalalal<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">h1&#123;</span><br><span class="line">    color: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>作用：选择页面上的某一个或者某一类元素</p>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>不遵循就近原则。id选择器&gt;类选择器&gt;标签选择器</p>
<ul>
<li>标签选择器：选择同种类型标签，只能对同一类标签进行操作</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h1&#123;</span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">    p&#123;</span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    第一行</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    第二行</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  第三行</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类选择器： （.class名称{})      为标签定义class    可以多个标签归类，是同一个class，可以复用。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.one</span>&#123;</span></span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.two</span>&#123;</span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.three</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">    第二行</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span></span><br><span class="line">    第三行</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    第一行</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>id选择器：    (#id名称{})     id保证全局唯一</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#abc</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#bca</span>&#123;</span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#cba</span>&#123;</span></span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"abc"</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"bca"</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"cba"</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><ul>
<li>后代选择器：在某个元素的后面。<ul>
<li>body（层次） 标签{    }</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body h1&#123;</span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子选择器：只有一代（仅下一个层次）<ul>
<li>body（层次）&gt;标签{      }</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &gt;h1&#123;</span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>相邻兄弟选择器：同一层次，只有一个（仅对下）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span> +<span class="selector-tag">h1</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>.（class值） +  标签{         }</p>
</li>
<li><p>通用兄弟选择器：同一层次，向下所有</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>~ <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>.(class值) ~  标签{        }</li>
</ul>
<h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>伪类：条件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选取第一个li元素</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">选取最后一个li元素</span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line">            background: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">选中第一个p元素</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line">       background: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>第二行<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>第三行<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>122o<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2ih<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3pkom<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.damo</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            display: block;</span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 50px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            background: aquamarine;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: pink;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            margin-right: 5px;</span><br><span class="line">            font: bold 20px/52px Arial;</span><br><span class="line">        &#125;</span><br><span class="line">        /* 属性值，属性值 = 属性值（正则）</span><br><span class="line">        =绝对等于</span><br><span class="line">        *=包含这个元素</span><br><span class="line">        ^=以这个开头</span><br><span class="line">        $=以这个结尾</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        存在id属性的元素   a[]&#123;&#125;*/</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span></span><br><span class="line">            background: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*id=first的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id=first]</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*class中有links的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">"links"</span>]</span>&#123;</span></span><br><span class="line">            background: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*选中href中以http开头的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href^=http]</span>&#123;</span></span><br><span class="line">            background: cornflowerblue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*选中href中以为jpg结尾的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href$=jpg]</span>&#123;</span></span><br><span class="line">            background: cyan;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"damo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span><span class="attr">class</span>=<span class="string">"links check-menu-item first"</span><span class="attr">id</span>=<span class="string">"first"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://blog.kuangstudy.com"</span><span class="attr">class</span>=<span class="string">"links item active"</span><span class="attr">target</span>=<span class="string">"_blank"</span><span class="attr">title</span>=<span class="string">"text"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/123.html"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/123.png"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/123.jpg"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abc"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/a.pdf"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/abc.pdf"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abc.doc"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abcd.doc"</span><span class="attr">class</span>=<span class="string">"links item last"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="美化网页元素"><a href="#美化网页元素" class="headerlink" title="美化网页元素"></a>美化网页元素</h2><h3 id="为什么要美化网页"><a href="#为什么要美化网页" class="headerlink" title="为什么要美化网页"></a>为什么要美化网页</h3><ul>
<li>有效的传递页面信息</li>
<li>美化页面，页面漂亮，才能吸引用户</li>
<li>凸显页面主题</li>
<li>提高用户的体验</li>
</ul>
<p>span标签:重点突出的字，用span套起来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#sp</span> &#123;</span></span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎学习<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"sp"</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><ul>
<li>font-family: “Adobe 楷体 Std R”;       字体风格</li>
<li>font-size: 20px;        字号</li>
<li>font-weight: 100;      字体粗细</li>
<li>color: aqua;          字体颜色</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">       body&#123;</span><br><span class="line">           font-family: "Adobe 楷体 Std R";</span><br><span class="line">           font-size: 20px;</span><br><span class="line">           &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.zw</span>&#123;</span></span><br><span class="line">          color: aqua;</span><br><span class="line">            font-weight: 100;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"zw"</span>&gt;</span>正文第一段<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><ul>
<li><p>颜色   color</p>
<ul>
<li>单词</li>
<li>RGB  0~F</li>
<li>RGBA     A：透明度   0~1</li>
</ul>
</li>
<li><p>对齐的方式   text-align   </p>
<ul>
<li>center    排版，居中</li>
</ul>
</li>
<li><p>首行缩进</p>
<ul>
<li>text-indent：2em；  段落首行缩进2字母    </li>
</ul>
</li>
<li><p>行高</p>
<ul>
<li>hight    块的高度 </li>
<li>line-height     行高</li>
<li>块的高度和行高相同，就可以上下居中</li>
</ul>
</li>
<li><p>装饰  text-decoration</p>
<ul>
<li>下划线    underline</li>
<li>中划线     line-through</li>
<li>上划线      overline</li>
<li>超链接去下划线      a   { text-decoration :    none}</li>
</ul>
</li>
<li><p>文本图片水平对齐    参照物 a，b</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    a,b&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">vertical-align</span><span class="selector-pseudo">:middle</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本阴影和超链接伪类"><a href="#文本阴影和超链接伪类" class="headerlink" title="文本阴影和超链接伪类"></a>文本阴影和超链接伪类</h3><ul>
<li>超链接去下划线      </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-decoration：none            </span><br><span class="line">color:#000;</span><br></pre></td></tr></table></figure>

<ul>
<li>鼠标悬浮状态</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:orange;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">50px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>鼠标按住未释放的状态</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#ff008a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>阴影颜色(阴影颜色，水平偏移，垂直偏移，阴影半径)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-shadow:#3cc7f5 10px 10px  2px</span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>去掉列表前的点</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">list-style</span>: <span class="selector-tag">none</span>	去掉原点</span><br><span class="line">			<span class="selector-tag">circle</span>	空心圆</span><br><span class="line">			<span class="selector-tag">decimal</span>	数字</span><br><span class="line">			<span class="selector-tag">square</span>	正方形</span><br></pre></td></tr></table></figure>

<h3 id="背景图像应用及渐变"><a href="#背景图像应用及渐变" class="headerlink" title="背景图像应用及渐变"></a>背景图像应用及渐变</h3><ul>
<li>背景图片</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:url("</span>    ");图片地址</span><br><span class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:repeat-x</span>    在<span class="selector-tag">x</span>轴上平铺</span><br><span class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:repeat-y</span>	  在<span class="selector-tag">y</span>轴上平铺</span><br><span class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:none-repeat</span> 不平铺</span><br></pre></td></tr></table></figure>

<ul>
<li>颜色，图片，图片位置</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">red</span> <span class="selector-tag">url</span>("    ") 250<span class="selector-tag">px</span>,100<span class="selector-tag">px</span> <span class="selector-tag">no-repeat</span></span><br></pre></td></tr></table></figure>

<ul>
<li>渐变</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>:<span class="selector-id">#21D4FD</span>;</span><br><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:linear-gradient(19deg</span>,<span class="selector-id">#21D4FD</span> 0%，<span class="selector-id">#B721FF</span> 100%);</span><br></pre></td></tr></table></figure>

<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul>
<li><p>#box   {  }</p>
</li>
<li><p>margin：外边距  （body有默认的外边距）</p>
</li>
<li><p>padding：内边距</p>
</li>
<li><p>border：边框      border：1px,solid,red;</p>
<ul>
<li>边框的粗细（width）</li>
<li>边框的样式（solid虚线      deshed实线）</li>
<li>边框的颜色</li>
</ul>
</li>
</ul>
<h3 id="内外边距及div居中"><a href="#内外边距及div居中" class="headerlink" title="内外边距及div居中"></a>内外边距及div居中</h3><p>盒子的计算方式：margin + border + padding + 内容宽度</p>
<ul>
<li>内外边距   上右下左（顺时针）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:0</span> 0 0 0;(上右下左)</span><br><span class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 0 0 0;</span><br></pre></td></tr></table></figure>

<ul>
<li>div居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> <span class="selector-tag">aoto</span>;   居中</span><br></pre></td></tr></table></figure>

<p>要求：块元素，块元素有固定的宽度</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div style="width: 50px;</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">block</span>;     </span><br><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>"&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>4个角</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">20px</span> <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>左上右上      右下左下（主次对角线）顺时针方向</p>
<ul>
<li>圆： border-radius: 50px                      圆角   =   半径<ul>
<li>100*100 则四个角设置为50；</li>
</ul>
</li>
</ul>
<h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><ul>
<li>box-shadow:10px    10px    100px    yellow;</li>
</ul>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><ul>
<li>标准文档流</li>
</ul>
<p>块级元素：独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1~h6    p     div  列表</span><br></pre></td></tr></table></figure>

<p>行内元素：不独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">span   a    img</span><br></pre></td></tr></table></figure>

<p>行内元素可以被包含在块级元素中。</p>
<ul>
<li><p>display</p>
<ul>
<li>block：    块元素</li>
<li>inline       行内元素</li>
<li>inline-block     是块元素，但可以内联，在一行    </li>
<li>none     </li>
</ul>
</li>
<li><p>浮动     float</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">float</span>: <span class="selector-tag">right</span>;</span><br><span class="line"><span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>clear</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:right</span>;      右侧不允许有浮动元素</span><br><span class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:left</span>;       左侧不允许有浮动元素</span><br><span class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;       两侧都不允许有</span><br></pre></td></tr></table></figure>

<h3 id="父级边框塌陷问题-解决方案："><a href="#父级边框塌陷问题-解决方案：" class="headerlink" title="父级边框塌陷问题    解决方案："></a>父级边框塌陷问题    解决方案：</h3><ul>
<li>增加父级元素的高度</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">bored</span>:<span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>增加一个空的div标签，清除浮动</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;div class="clear"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在父级元素中加一个   overflow（自动溢出）<ul>
<li>hidden   隐藏</li>
</ul>
</li>
<li>父类增加一个伪类：after</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>浮动元素后面加空div</li>
</ul>
<p>简单，代码中尽量避免空div</p>
<ul>
<li>设置父级元素的高度</li>
</ul>
<p>简单，元素假设有了固定的高度，就会被限制</p>
<ul>
<li>overflow</li>
</ul>
<p>简单，下拉的一些场景避免使用</p>
<ul>
<li>父级添加一个伪类：after（推荐）</li>
</ul>
<p>写法稍微复杂，但是没有缺点</p>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul>
<li>display</li>
</ul>
<p>方向不可控制</p>
<ul>
<li>float</li>
</ul>
<p>浮动起来会脱离标准文档流</p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>position:relative;</p>
<ul>
<li>相对于自己原来的位置进行偏移,仍然在标准文档流中。原来的位置会被保留。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">top</span><span class="selector-pseudo">:-20px</span>;</span><br><span class="line"><span class="selector-tag">left</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line"><span class="selector-tag">bottom</span><span class="selector-pseudo">:-10px</span>;</span><br><span class="line"><span class="selector-tag">right</span><span class="selector-pseudo">:20px</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;   <span class="comment">/*相对定位：上下左右*/</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span>&#123;</span><br><span class="line">           <span class="attribute">padding</span>:<span class="number">20px</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0000ff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#first</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0000ff</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: aqua;</span><br><span class="line">            <span class="attribute">position</span>:relative;   <span class="comment">/*相对定位：上下左右*/</span></span><br><span class="line">            <span class="attribute">top</span>:-<span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#second</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0000ff</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: cyan;</span><br><span class="line">            <span class="attribute">position</span>:relative;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#third</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0000ff</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;div id="father"&gt;</span><br><span class="line">    &lt;div id="first"&gt;第一个盒子&lt;/div&gt;</span><br><span class="line">    &lt;div id="second"&gt;第二个盒子&lt;/div&gt;</span><br><span class="line">    &lt;div id="third"&gt;第三个盒子&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.wailian.work/image/QfcpF0" target="_blank" rel="noopener"><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/07/15/CSS3/sp200723_182303.png" alt="sp200723_182303.png"></a></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            height: 300px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            padding: 10px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        a&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ff55fa</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            display: block;</span><br><span class="line">            color: white;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 255, 0<span class="selector-class">.98</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a2</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            left: 200px;</span><br><span class="line">            top: -100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a4</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            right: -200px;</span><br><span class="line">            top: -100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a5</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:-100px</span>;</span></span><br><span class="line">            top: -300px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a1"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a2"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a3"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a4"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接四<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a5"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接五<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>position:absolute</p>
<ul>
<li>定位：基于xxx定位，上下左右<ul>
<li>没有父级元素定位的前提下，相对于浏览器定位</li>
<li>假设父级元素存在定位，我们通常会相对于父级元素进行偏移</li>
<li>在父级元素范围内移动</li>
</ul>
</li>
<li>相对于父级或浏览器的位置，进行指定的偏移，绝对定位的话，他不在标准文档流中，原来的位置也不会被保留。</li>
</ul>
<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>position:fixed;</p>
<p>元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动。fixed表示脱离了正常的文档流。</p>
<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>层级:最低是0，最高无限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">z-index:max;</span><br></pre></td></tr></table></figure>

<p>opactity:0.5      背景透明度</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>GUI</title>
    <url>/Mr-lee-MQ.hithub.io/2020/10/05/GUI/</url>
    <content><![CDATA[<h1 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程<a id="more"></a></h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul>
<li>窗口</li>
<li>弹窗</li>
<li>面板</li>
<li>文本框</li>
<li>列表框</li>
<li>按钮</li>
<li>图片</li>
<li>监听事件</li>
<li>鼠标事件</li>
<li>键盘事件</li>
<li>破解工具</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Gui的核心技术：Swing   AWT</p>
<ul>
<li>因为界面不美观</li>
<li>需要Jre环境</li>
</ul>
<p>为何学习</p>
<ul>
<li>可以写出自己的小工具</li>
<li>工作时候，也可能需要维护swing界面，概率极小。</li>
<li>了解MVC架构，了解监听。</li>
</ul>
<h2 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h2><h3 id="Awt介绍"><a href="#Awt介绍" class="headerlink" title="Awt介绍"></a>Awt介绍</h3><ul>
<li><p>包含了很多类和接口。Gui：图形界面编程</p>
</li>
<li><p>元素：窗口，按钮，文本框</p>
</li>
<li><p>java.awt包</p>
</li>
</ul>
<p><a href="https://www.wailian.work/image/QmMZi5" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp201005_135135.png" alt="sp201005_135135.png"></a> </p>
<h3 id="组件和容器"><a href="#组件和容器" class="headerlink" title="组件和容器"></a>组件和容器</h3><h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Frame.JDK。</span></span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">"我的第一个Java图像界面窗口"</span>);</span><br><span class="line">        <span class="comment">//需要设置可见性</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置窗口大小</span></span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">85</span>, <span class="number">159</span>, <span class="number">68</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//弹出的初始位置</span></span><br><span class="line">        frame.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置大小固定</span></span><br><span class="line">        frame.setResizable(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装上面的窗口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//展示多个窗口</span></span><br><span class="line">        MyFrame myFrame1 = <span class="keyword">new</span> MyFrame(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, Color.blue);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;  <span class="comment">//可能存在多个窗口，我们需要一个计数器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Myframe+"</span>+(++id));</span><br><span class="line">        setBackground(color);</span><br><span class="line">        setBound(x, y, w, h);</span><br><span class="line">        setVisble(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="面板Panel"><a href="#面板Panel" class="headerlink" title="面板Panel"></a>面板Panel</h3><p>Panel可以看成一个空间，但是不能单独存在</p>
<p>解决了关闭事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Panel可以看成一个空间，但是不能单独存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPanel</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        Panel panel = <span class="keyword">new</span> Panel();</span><br><span class="line">        <span class="comment">//设置布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//坐标</span></span><br><span class="line">        frame.setBounts(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">        frame.setbackground(<span class="keyword">new</span> Color(<span class="number">193</span>, <span class="number">161</span>, <span class="number">35</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//panel设置坐标，相对于frame</span></span><br><span class="line">        panel.setBounds(<span class="number">50</span>, <span class="number">50</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        panel.setBackground(newColor(<span class="number">193</span>, <span class="number">15</span>, <span class="number">60</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//frame.add(panel)</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line">        </span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//监听事件，监听窗口关闭事件 System.exit(0)</span></span><br><span class="line">        <span class="comment">//适配器模式:</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter)&#123;</span><br><span class="line">            <span class="comment">//窗口点击关闭的时候需要做的事情</span></span><br><span class="line">            <span class="meta">@override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowCloseing</span><span class="params">(WindowEvent e)</span></span>&#123;</span><br><span class="line">                <span class="comment">//结束程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><ul>
<li>流式布局</li>
<li>东西南北中</li>
<li>表格布局</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//流式布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFlowLayout</span></span>&#123;</span><br><span class="line">    <span class="function">publiic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//组件-按钮</span></span><br><span class="line">        Button button1 = <span class="keyword">new</span> Button(<span class="string">"button1"</span>);</span><br><span class="line">        Button button2 = <span class="keyword">new</span> Button(<span class="string">"button2"</span>);</span><br><span class="line">        Button button3 = <span class="keyword">new</span> Button(<span class="string">"button3"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置流式布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayle.LEFT));</span><br><span class="line">         frame.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayle.RIGHT));</span><br><span class="line">        </span><br><span class="line">        frame.setSize(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加按钮</span></span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line">        </span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//东西南北中布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBorderLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">"TestBorderLayout"</span>);</span><br><span class="line">        </span><br><span class="line">        Button east = <span class="keyword">new</span> Button(<span class="string">"East"</span>);</span><br><span class="line">        Button west = <span class="keyword">new</span> Button(<span class="string">"West"</span>);</span><br><span class="line">        Button south = <span class="keyword">new</span> Button(<span class="string">"South"</span>);</span><br><span class="line">        Button north = <span class="keyword">new</span> Button(<span class="string">"North"</span>);</span><br><span class="line">        Button center = <span class="keyword">new</span> Button(<span class="string">"Center"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        frame.add(east.BorderLayout.EAST);</span><br><span class="line">        frame.add(west.BorderLayout.WEST);</span><br><span class="line">        frame.add(south.BorderLayout.SOUTH);</span><br><span class="line">        frame.add(north.BorderLayout.NORTH);</span><br><span class="line">        frame.add(cencer.BorderLayout.CENCER);</span><br><span class="line">        </span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表格布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGridLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">"TestGridLayout"</span>);</span><br><span class="line">        </span><br><span class="line">        Button btn1 = <span class="keyword">new</span> Button(<span class="string">"btn1"</span>);</span><br><span class="line">        Button btn2 = <span class="keyword">new</span> Button(<span class="string">"btn2"</span>);</span><br><span class="line">        Button btn3 = <span class="keyword">new</span> Button(<span class="string">"btn3"</span>);</span><br><span class="line">        Button btn4 = <span class="keyword">new</span> Button(<span class="string">"btn4"</span>);</span><br><span class="line">        Button btn5 = <span class="keyword">new</span> Button(<span class="string">"btn5"</span>);</span><br><span class="line">        Button btn6 = <span class="keyword">new</span> Button(<span class="string">"btn6"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line">        </span><br><span class="line">        frame.pack();<span class="comment">//java函数</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>



<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActionEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">//按下按钮，触发一些事件</span></span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">    Button button = <span class="keyword">new</span> Button();</span><br><span class="line">    <span class="comment">//因为，addActionListener()需要一个ActionListener,所以我们需要构造一个ActionListener</span></span><br><span class="line">    </span><br><span class="line">    MyActionListener myActionListener = <span class="keyword">new</span> MyActionListener();</span><br><span class="line">    button.addActionListener(myActionLIstener);</span><br><span class="line">    </span><br><span class="line">    frame.add(button,BorderLayout.CENTER);</span><br><span class="line">    frame.pack();</span><br><span class="line">        </span><br><span class="line">    windowClose(frame);<span class="comment">//关闭窗口    </span></span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭窗体事件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">windowClose</span><span class="params">(Frame frame)</span></span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter()) &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(windowEvent e)</span></span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListrener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformd</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"aaa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两个按钮，实现一个监听</span></span><br><span class="line"><span class="comment">//开始，  停止</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActionTwo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	Frame frame = <span class="keyword">new</span> Frame(<span class="string">"开始-停止"</span>);</span><br><span class="line">    	Button button1 = <span class="keyword">new</span> Button(<span class="string">"start"</span>);</span><br><span class="line">        Button button2 = <span class="keyword">new</span> Button(<span class="string">"stop"</span>);</span><br><span class="line">        </span><br><span class="line">        button2.setActionCommand(<span class="string">"button2-stop"</span>);</span><br><span class="line">        </span><br><span class="line">        MyMonitor myMonitor = <span class="keyword">new</span> MyMonitor();</span><br><span class="line">        </span><br><span class="line">        button1.addActionListener(myMonitor);</span><br><span class="line">        button2.addActionListener(myMonitor);</span><br><span class="line">        </span><br><span class="line">        frame.add(button1,BorderLayout.NORTH);</span><br><span class="line">        frame.add(button2,BorderLayout.SOUTH);</span><br><span class="line">        </span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMonitor</span> <span class="title">implement</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"按钮被点击了: msg"</span>+e.getActionCommand());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输入框事件监听"><a href="#输入框事件监听" class="headerlink" title="输入框事件监听"></a>输入框事件监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestText01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        <span class="keyword">new</span> MyFrame();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TextField textField = <span class="keyword">new</span> TestField();</span><br><span class="line">        add(tsxtField);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//监听这个文本框输入的文字</span></span><br><span class="line">        MyActionListener2 myActionListener2 = <span class="keyword">new</span> MyActionListener2();</span><br><span class="line">        textField.addActionListener(myActionListener2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置替换编码</span></span><br><span class="line">        textField.setEchoChar(<span class="string">'*'</span>);</span><br><span class="line">        </span><br><span class="line">        setVIsible(<span class="keyword">true</span>);</span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener2</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@OVerride</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">        TextField field = (TextField) e.getSource();</span><br><span class="line">        <span class="comment">//获得一些资源，返回一个对象</span></span><br><span class="line">        System.out.println(field.getText());<span class="comment">//获得输入框的文本</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPaint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyPint().loadFrame();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPaint</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">500</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//画笔，需要有颜色，画笔可以画画</span></span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        g.drawOval(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        g.fillOval(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);<span class="comment">//实心的圆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="鼠标监听"><a href="#鼠标监听" class="headerlink" title="鼠标监听"></a>鼠标监听</h3><p>目的：想要使用鼠标画画</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//鼠标监听事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMouseListener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自己的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="comment">//画画需要画笔，需要监听鼠标当前的位置，需要集合来存储这个点</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(title);</span><br><span class="line">        setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="comment">//存鼠标点击的点</span></span><br><span class="line">        points = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//鼠标监听器,对于这个窗口</span></span><br><span class="line">        <span class="keyword">this</span>.addMouselistener(<span class="keyword">new</span> MymouseListener());</span><br><span class="line">        </span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//画画，监听鼠标的事件</span></span><br><span class="line">        Iterator iterator = points.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Point point = (Point) iterator.next();</span><br><span class="line">            g.setColor(Color.BLUE);</span><br><span class="line">            g.fillOval(point.x, point.y, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加一个点到界面上</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPaint</span><span class="params">(Point point)</span></span>&#123;</span><br><span class="line">        points.add(point);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">psint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//画画，监听鼠标的事件</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//适配器模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMouseListener</span> <span class="keyword">extends</span> <span class="title">MouseAdapter</span></span>&#123;</span><br><span class="line">        <span class="comment">//鼠标  按下，弹起，按住不放</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span></span>&#123;</span><br><span class="line">            MyFream fream = (MyFream) e.getSource();</span><br><span class="line">            <span class="comment">//这个我们点击的时候，就会在界面上产生一个点</span></span><br><span class="line">            <span class="comment">//这个点就是鼠标的点</span></span><br><span class="line">            frame.addPaint(<span class="keyword">new</span> Point(e.getX(),e.getY()));</span><br><span class="line">            </span><br><span class="line">            fream.addPaint(<span class="keyword">new</span> Point(e.getX(),e.getY()));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//每次点击鼠标都需要重新画一遍</span></span><br><span class="line">            fream.repaint();<span class="comment">//刷新</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="键盘监听"><a href="#键盘监听" class="headerlink" title="键盘监听"></a>键盘监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//键</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKeyListener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> KeyFream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyFream</span> <span class="keyword">extends</span> <span class="title">Fream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KeyFream</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setBounds(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">new</span> KeyAdapter)&#123;</span><br><span class="line">            <span class="comment">//键盘按下</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span></span>&#123;</span><br><span class="line">                <span class="comment">//获得键盘下的键是哪一个，当前的码</span></span><br><span class="line">                <span class="keyword">int</span> keyCode = e.getKeyCode();</span><br><span class="line">                <span class="comment">//不需要去记录这个数值，直接使用静态属性 VK_XXX</span></span><br><span class="line">                System.out.println(keyCode);</span><br><span class="line">                <span class="keyword">if</span>(keyCode == keyEvent.VK_UP)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"你按下了上键"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//根据按下不同的操作，选择不同的结果</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h2><h3 id="窗口，面板"><a href="#窗口，面板" class="headerlink" title="窗口，面板"></a>窗口，面板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JFreamDemo</span></span>&#123;</span><br><span class="line">    <span class="comment">//init(); 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JFream jf = <span class="keyword">new</span> JFream(<span class="string">"这是一个JFream窗口"</span>);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        jf.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">        jf.setBackground(Color.cyan);</span><br><span class="line">        <span class="comment">//设置文字 JLabel</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"我们来到狂神说Java节目"</span>);</span><br><span class="line">        </span><br><span class="line">        jf.add(label);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//容器实例化</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭事件</span></span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//建立一个窗口</span></span><br><span class="line">        <span class="keyword">new</span> JFreamDemo().init();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//容器实例化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JframeDemo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyJframe2().init();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyJframe2</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">10</span>, <span class="number">10</span>, <span class="number">200</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"欢迎来到狂神说Java系列节目"</span>);</span><br><span class="line">        <span class="keyword">this</span>.add(label);</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//让文本标签居中</span></span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得一个容器</span></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        container.setBackground(Color.BLUE);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="弹窗"><a href="#弹窗" class="headerlink" title="弹窗"></a>弹窗</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//JDialog   弹窗 默认就有关闭事件</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//主窗口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DialogDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">DialogDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">700</span>, <span class="number">500</span>);</span><br><span class="line">  					        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//Jframe 放东西 容器</span></span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        <span class="comment">//绝对布局</span></span><br><span class="line">        container.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//按钮</span></span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton(<span class="string">"点击弹出一个对话框"</span>);<span class="comment">//创建</span></span><br><span class="line">        button.setBounds(<span class="number">30</span>, <span class="number">30</span>, <span class="number">200</span>, <span class="number">50</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//点击这个按钮的时候，弹出一个弹窗</span></span><br><span class="line">        button.addActionLIstener(<span class="keyword">new</span> ActionListener &#123;</span><br><span class="line">            <span class="comment">//监听器</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">                <span class="comment">//弹窗</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        container.add(button);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹窗的窗口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDialogDemo</span> <span class="keyword">extends</span> <span class="title">JDialog</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyDialogDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">        </span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        container.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        container.add(<span class="keyword">new</span> Label(<span class="string">"秦老师带你学Java"</span>)); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="标签"><a href="#标签" class="headerlink" title="标签"></a>标签</h3><p>label</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> JLabel(<span class="string">"XXXX"</span>);</span><br></pre></td></tr></table></figure>

<p>图标  icon</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//图标，需要实现类，Fream继承</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IconDemo</span> <span class="keyword">extends</span> <span class="title">Fream</span> <span class="keyword">implements</span> <span class="title">Icon</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> height;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IconDemo</span><span class="params">()</span></span>&#123;&#125;<span class="comment">//无参构造</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">IconDemo</span><span class="params">(<span class="keyword">int</span> width, <span class="keyword">int</span> height)</span></span>&#123;...&#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        IconDemo icondemo = <span class="keyword">new</span> IconDemo(<span class="number">15</span>, <span class="number">15</span>);</span><br><span class="line">        <span class="comment">//图标放在标签，也可以放在按钮上</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"icontest"</span>,iconDemo,SwingConstants.CENTER);</span><br><span class="line">        </span><br><span class="line">        Container container = getContentPane();</span><br><span class="line">        container.add(label);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOpenation(WindowConstsnts.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> IconDemo().init();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paintIcon</span><span class="params">(Component c, Graphics g, <span class="keyword">int</span> x, <span class="keyword">int</span> y)</span></span>&#123;</span><br><span class="line">        g.fillOval(x, y, width, height);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getIconWidth</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.width;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getIconHeight</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.height;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//图标为一个图片</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ImageIconDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ImageIconDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取图片的地址</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"ImageIcon"</span>);</span><br><span class="line">        URL url = ImageIconDemo.class.getResource("图片名称.格式");</span><br><span class="line">        </span><br><span class="line">        ImageIcon imageIcon = <span class="keyword">new</span> imageIcon(url);<span class="comment">//注意命名不要冲突</span></span><br><span class="line">        label.setIcon(imageIcon);</span><br><span class="line">        label.setHorizontalAlignment(SwingConstants.CENTER);</span><br><span class="line">        </span><br><span class="line">        Container container = getContentPane();</span><br><span class="line">        container.add(label);</span><br><span class="line">        </span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> ImageIconDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="面板"><a href="#面板" class="headerlink" title="面板"></a>面板</h3><p>JPanel</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JPanelDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JPanelDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        </span><br><span class="line">        container.setLayout(<span class="keyword">new</span> GridLayout(<span class="number">2</span>, <span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>));</span><br><span class="line">        <span class="comment">//后面的两个参数的意思是，每个面板间的间距</span></span><br><span class="line">        </span><br><span class="line">        JPanel panel = <span class="keyword">new</span> JPanel(<span class="keyword">new</span> GridLayout(<span class="number">1</span>, <span class="number">3</span>));</span><br><span class="line">        </span><br><span class="line">        panel.add(<span class="keyword">new</span> JButton(<span class="string">"1"</span>));</span><br><span class="line">        panel.add(<span class="keyword">new</span> JButton(<span class="string">"1"</span>));</span><br><span class="line">        panel.add(<span class="keyword">new</span> JButton(<span class="string">"1"</span>));</span><br><span class="line">        </span><br><span class="line">        container.add(panel1);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setVisible(ture);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JPanelDemo();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JScroll</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JScrollDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JScrollDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//文本域</span></span><br><span class="line">        JTextArea textArea = <span class="keyword">new</span> JTextArea(<span class="number">20</span>, <span class="number">50</span>);</span><br><span class="line">        textArea.setText(<span class="string">"欢迎学习Java"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Scorll面板</span></span><br><span class="line">        </span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(textArea);</span><br><span class="line">        container.add(scrollPane);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JscrollDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>图片按钮</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  class <span class="title">JButtonDemo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JbuttonDemo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContenPane();</span><br><span class="line">    	<span class="comment">//将一个图片变成图标</span></span><br><span class="line">        URL resource = JButtonDemo01.class.getResource("图片名称");</span><br><span class="line">        Icon icon = <span class="keyword">new</span> ImageIcon(resource);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把这个图标放在按钮上</span></span><br><span class="line">        JButton button = <span class="keyword">new</span> JButton();</span><br><span class="line">        button.setIcon(icon);</span><br><span class="line">        button.setToolTipText(<span class="string">"图片按钮"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//add</span></span><br><span class="line">        container.add(button);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefualtCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> JButtonDemo01(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>单选框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  class <span class="title">JButtonDemo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JbuttonDemo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContenPane();</span><br><span class="line">    	<span class="comment">//将一个图片变成图标</span></span><br><span class="line">        URL resource = JButtonDemo01.class.getResource("图片名称");</span><br><span class="line">        Icon icon = <span class="keyword">new</span> ImageIcon(resource);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//单选框</span></span><br><span class="line">        JRadioButton radioButton1 = <span class="keyword">new</span> JRadioButton(<span class="string">"JRadioButton01"</span>);</span><br><span class="line">        JRadioButton radioButton2 = <span class="keyword">new</span> JRadioButton(<span class="string">"JRadioButton02"</span>);</span><br><span class="line">        JRadioButton radioButton3 = <span class="keyword">new</span> JRadioButton(<span class="string">"JRadioButton03"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//由于单选框只能选择一个，分组,一个组中只能选一个</span></span><br><span class="line">         ButtonGroup group = <span class="keyword">new</span> ButtonGroup();</span><br><span class="line">        group.add(radioButton1);</span><br><span class="line">        group.add(radioButton2);</span><br><span class="line">        group.add(radioButton3);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置位置</span></span><br><span class="line">        container.add(radioButton1,BorderLayout.CENTER);</span><br><span class="line">        container.add(raidoButton2,BorderLayout.NORTH);</span><br><span class="line">        container.add(raidoButton3,BorderLayout.SOUTH);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefualtCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> JButtonDemo02(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>复选框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span>  class <span class="title">JButtonDemo03</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JbuttonDemo03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContenPane();</span><br><span class="line">    	<span class="comment">//将一个图片变成图标</span></span><br><span class="line">        URL resource = JButtonDemo01.class.getResource("图片名称");</span><br><span class="line">        Icon icon = <span class="keyword">new</span> ImageIcon(resource);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//复选框</span></span><br><span class="line">        JChockBox checkBox01 = <span class="keyword">new</span> JChockBox(<span class="string">"checkBox01"</span>);</span><br><span class="line">        JChockBox chockBox02 = <span class="keyword">new</span> JChockBox(<span class="string">"checkBox02"</span>);</span><br><span class="line">        </span><br><span class="line">        container.add(checkBox01, BorderLayout.NORTH);</span><br><span class="line">        container.add(chockBox02, BorderLayout.SOUTH);</span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>,<span class="number">500</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefualtCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    	</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> JButtonDemo03(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><p>下拉框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//下拉框</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComboboxDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestComboboxDemo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        </span><br><span class="line">        JComboBox status = <span class="keyword">new</span> JComboBox();</span><br><span class="line">        </span><br><span class="line">        status.addItem(<span class="keyword">null</span>);</span><br><span class="line">        status.addItem(<span class="string">"正在热映"</span>);</span><br><span class="line">        status.addItem(<span class="string">"已下架"</span>);</span><br><span class="line">        atatus.addItem(<span class="string">"即将上映"</span>);</span><br><span class="line">        </span><br><span class="line">        container.add(status);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstats.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> TestComboboxDemo01(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>列表框</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//列表框</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestComboboxDemo02</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestComboboxDemo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//生成列表的内容</span></span><br><span class="line">        String[] contents = &#123;<span class="string">"1"</span>, <span class="string">"2"</span>, <span class="string">"3"</span>&#125;;		        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//列表中需要放入内容</span></span><br><span class="line">        JList jList = <span class="keyword">new</span> JList(contents);</span><br><span class="line">        </span><br><span class="line">        contens.add(<span class="string">"张三"</span>);</span><br><span class="line">        contens.add(<span class="string">"李四"</span>);</span><br><span class="line">        contens.add(<span class="string">"王五"</span>);</span><br><span class="line">        </span><br><span class="line">        container.add(jList);</span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstats.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">      </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> TestComboboxDemo02(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文本框"><a href="#文本框" class="headerlink" title="文本框"></a>文本框</h3><ul>
<li>文本框</li>
<li>密码框</li>
<li>文本域</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文本框 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTextDemo01</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestTextDemo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        JTextField textFried = <span class="keyword">new</span> JTextField(<span class="string">"hello"</span>);</span><br><span class="line">        JTextField textFried2 = <span class="keyword">new</span> JTextField(<span class="string">"World"</span>,<span class="number">20</span>);</span><br><span class="line">        </span><br><span class="line">        container.add(textField, BorderLayout.NORTH);</span><br><span class="line">        container.add(textField2, BorderLayout.SOUTH);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstats.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> TextTextDemo01(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//密码框</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestTextDemo02</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestTextDemo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        </span><br><span class="line">        JPassworldField passworldField = <span class="keyword">new</span> JPassworldField();<span class="comment">//默认为...</span></span><br><span class="line">        passworldField.setEchoChar(<span class="string">'*'</span>);</span><br><span class="line">        </span><br><span class="line">        container.add(passworldField);</span><br><span class="line">      </span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setSize(<span class="number">500</span>, <span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstats.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">     </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> TextTextDemo02(); </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//文本域</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JScrollDemo</span> <span class="keyword">extends</span> <span class="title">JFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">JScrollDemo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Container container = <span class="keyword">this</span>.getContentPane();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//文本域</span></span><br><span class="line">        JTextArea textArea = <span class="keyword">new</span> JTextArea(<span class="number">20</span>, <span class="number">50</span>);</span><br><span class="line">        textArea.setText(<span class="string">"欢迎学习Java"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Scorll面板</span></span><br><span class="line">        </span><br><span class="line">        JScrollPane scrollPane = <span class="keyword">new</span> JScrollPane(textArea);</span><br><span class="line">        container.add(scrollPane);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">this</span>.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">300</span>, <span class="number">350</span>);</span><br><span class="line">        <span class="keyword">this</span>.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> JscrollDemo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="贪吃蛇实战"><a href="#贪吃蛇实战" class="headerlink" title="贪吃蛇实战"></a>贪吃蛇实战</h2><p>帧，如果时间碎片足够小，就是动画，一秒是30帧 60帧。连起来就是动画，拆开就是静态的图片。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//游戏的主启动类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartGame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        JFrameframe = <span class="keyword">new</span> JFrame();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        frame.setBounds(<span class="number">10</span>, <span class="number">10</span>, <span class="number">900</span>, <span class="number">720</span>);</span><br><span class="line">        frame.setResizable(flase);<span class="comment">//窗口大小不可变</span></span><br><span class="line">        </span><br><span class="line">        frame.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        <span class="comment">//正常游戏界面应该在面板上</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//游戏的面板</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GamePanel</span> <span class="keyword">extends</span> <span class="title">Jpanel</span> <span class="keyword">implements</span> <span class="title">KeyListener</span>,<span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义蛇的数据结构</span></span><br><span class="line">    <span class="keyword">int</span> length;<span class="comment">//蛇的长度</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeX = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">600</span>];<span class="comment">//蛇的x坐标 25*25</span></span><br><span class="line">    <span class="keyword">int</span>[] snakeY = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">500</span>];<span class="comment">//蛇的Y坐标 25*25</span></span><br><span class="line">    String fx;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//食物的坐标</span></span><br><span class="line">    <span class="keyword">int</span> foodx;</span><br><span class="line">    <span class="keyword">int</span> foody;</span><br><span class="line">    Random random = <span class="keyword">new</span> Ramdom();</span><br><span class="line">    <span class="comment">//游戏当前的状态: 开始，停止</span></span><br><span class="line">    <span class="keyword">boolean</span> isStart = <span class="keyword">false</span>;<span class="comment">//默认是不开始</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定时器  以毫秒为单位</span></span><br><span class="line">    Timer timer = <span class="keyword">new</span> Timer(<span class="number">100</span>, <span class="keyword">this</span>);<span class="comment">//100毫秒监听一次</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">GamePanel</span><span class="params">()</span></span>&#123;</span><br><span class="line">        init();</span><br><span class="line">        <span class="comment">//获得焦点和键盘事件</span></span><br><span class="line">        <span class="keyword">this</span>.setfocusable(<span class="keyword">true</span>);<span class="comment">//获得焦点事件</span></span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">this</span>);<span class="comment">//获得键盘监听事件</span></span><br><span class="line">        timer.start();<span class="comment">//游戏一开始定时器就启动</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//初始化方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        length = <span class="number">3</span>;</span><br><span class="line">        snakeX[<span class="number">0</span>] = <span class="number">100</span>;snakeY[<span class="number">0</span>] = <span class="number">100</span>;<span class="comment">//脑袋的坐标</span></span><br><span class="line">        snakeX[<span class="number">1</span>] = <span class="number">75</span>;snakeY[<span class="number">1</span>] = <span class="number">100</span>;<span class="comment">//第一个身体的坐标</span></span><br><span class="line">        snakeX[<span class="number">2</span>] = <span class="number">50</span>;snakeY[<span class="number">2</span>] = <span class="number">100</span>;<span class="comment">//第二个身体的坐标</span></span><br><span class="line">        fx = <span class="string">"R"</span>;<span class="comment">//初始化方向向右</span></span><br><span class="line">        <span class="comment">//把食物随机分布在界面上</span></span><br><span class="line">        foodx = <span class="number">25</span> + <span class="number">25</span>*random.nextInt(<span class="number">34</span>);</span><br><span class="line">        foody = <span class="number">75</span> + <span class="number">25</span>*random.nextInt(<span class="number">24</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//绘制面板，我们游戏中的所有东西，都是用这个画笔来画</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">paintComponent</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.paintComponent(g);<span class="comment">//清屏</span></span><br><span class="line">        <span class="keyword">this</span>.setBackground(Color.BLACK);</span><br><span class="line">        Data.header.paintIcon(<span class="keyword">this</span>,g,<span class="number">25</span>,<span class="number">11</span>);<span class="comment">//头部广告栏</span></span><br><span class="line">        g.fillRect(<span class="number">25</span>, <span class="number">75</span>, <span class="number">850</span>, <span class="number">600</span>);<span class="comment">//默认的游戏界面</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把蛇画上去</span></span><br><span class="line">        <span class="comment">//蛇头初始化向右,需要通过方向来判断</span></span><br><span class="line">        <span class="keyword">if</span>(fx.equals(<span class="string">"R"</span>))&#123;</span><br><span class="line">Date.right.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]); </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (fx.equals(<span class="string">"L"</span>))&#123;</span><br><span class="line">Date.left.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]); </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (fx.equals(<span class="string">"U"</span>))&#123;</span><br><span class="line">Date.up.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]); </span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (fx.equals(<span class="string">"D"</span>))&#123;</span><br><span class="line">Date.down.paintIcon(<span class="keyword">this</span>,g,snakeX[<span class="number">0</span>],snakeY[<span class="number">0</span>]); </span><br><span class="line">        &#125;</span><br><span class="line">       </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)&#123;</span><br><span class="line">           Data.body.paintIcon(<span class="keyword">this</span>,g,snakeX[i],snakeY[i]);</span><br><span class="line">            <span class="comment">//第一个身体的坐标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//画食物</span></span><br><span class="line">        Data.food.paintIcon(<span class="keyword">this</span>,g,foodx,foody);</span><br><span class="line">        <span class="comment">//游戏状态</span></span><br><span class="line">        <span class="keyword">if</span>(isStart==<span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">//设置字体</span></span><br><span class="line">            g.setColor(Color.white);</span><br><span class="line">            g.setfount(<span class="keyword">new</span> Fount(<span class="string">"微软雅黑"</span>, Fount.BOLD, <span class="number">40</span>));</span><br><span class="line">            g.drawString(<span class="string">"按下空格开始游戏"</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(isFail)&#123;</span><br><span class="line">            g.setColor(Color.red);</span><br><span class="line">            g.setfount(<span class="keyword">new</span> Fount(<span class="string">"微软雅黑"</span>, Fount.BOLD, <span class="number">40</span>));</span><br><span class="line">            g.drawString(<span class="string">"失败，按下空格重新开始"</span>,<span class="number">300</span>,<span class="number">300</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//键盘监听事件</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> keyCode = e.getKeyCode();<span class="comment">//获得键盘按键是哪一个</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(keyCode == KeyEvent.VK_SPACE)&#123;</span><br><span class="line">            <span class="comment">//如果按下的是空格键</span></span><br><span class="line">            <span class="keyword">if</span>(isFail)&#123;</span><br><span class="line">                <span class="comment">//重新开始</span></span><br><span class="line">                isfail = <span class="keyword">false</span>;</span><br><span class="line">                init();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                isStart = !isStart;<span class="comment">//取反</span></span><br><span class="line">            &#125;</span><br><span class="line">            reoaint();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//小蛇移动,头部图片转换</span></span><br><span class="line">        <span class="keyword">if</span>(keyCode == KeyEvent.VK_UP)&#123;</span><br><span class="line">            fx = <span class="string">"U"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(keyCode == KeyEvent.VK_DOWN)&#123;</span><br><span class="line">            fx = <span class="string">"D"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(keyCode == KeyEvent.VK_LEFT)&#123;</span><br><span class="line">            fx = <span class="string">"L"</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(keyCode == KeyEvent.VK_RIGHT)&#123;</span><br><span class="line">            fx = <span class="string">"R"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//事件监听————需要通过固定的事件来刷新，1s = 10次</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(isStart &amp;&amp; isFail == <span class="keyword">false</span>)&#123;</span><br><span class="line">            <span class="comment">//如果游戏时开始状态，就让小蛇动起来</span></span><br><span class="line">            <span class="comment">//吃食物</span></span><br><span class="line">            <span class="keyword">if</span>(snakeX[<span class="number">0</span>] == foodX &amp;&amp; foodY[<span class="number">0</span>] == foody)&#123;</span><br><span class="line">                length++;<span class="comment">//长度+1</span></span><br><span class="line">                <span class="comment">//食物再次随机生成</span></span><br><span class="line">                foodx = <span class="number">25</span> + <span class="number">25</span>*random.nextInt(<span class="number">34</span>);</span><br><span class="line">        		foody = <span class="number">75</span> + <span class="number">25</span>*random.nextInt(<span class="number">24</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//移动</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = length-<span class="number">1</span>; i &gt; <span class="number">0</span>; i--)&#123;</span><br><span class="line">                snakeX[i] = snackX[i-<span class="number">1</span>];</span><br><span class="line">                snackY[i] = snackY[i-<span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//走向</span></span><br><span class="line">            <span class="keyword">if</span>(fx.equals(<span class="string">"R"</span>))&#123;</span><br><span class="line">                snakeX[<span class="number">0</span>] = snakeX[<span class="number">0</span>]+<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span>(snakeX[<span class="number">0</span>]&gt;<span class="number">850</span>)&#123;snakeX[<span class="number">0</span>] = <span class="number">25</span>;&#125;<span class="comment">//边界判断</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fx.equals(<span class="string">"L"</span>))&#123;</span><br><span class="line">                snakeX[<span class="number">0</span>] = snakeX[<span class="number">0</span>]-<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span>(snakeX[<span class="number">0</span>]&lt;<span class="number">25</span>)&#123;snakeX[<span class="number">0</span>] = <span class="number">850</span>;&#125;<span class="comment">//边界判断</span></span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(fx.equals(<span class="string">"U"</span>))&#123;</span><br><span class="line">                snakeY[<span class="number">0</span>] = snakeY[<span class="number">0</span>]-<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span>(snakeY[<span class="number">0</span>]&lt;<span class="number">75</span>)&#123;snakeY[<span class="number">0</span>] = <span class="number">650</span>;&#125;<span class="comment">//边界判断</span></span><br><span class="line">            &#125;<span class="function">elae <span class="title">if</span><span class="params">(fx.equals(<span class="string">"D"</span>)</span>)</span>&#123;</span><br><span class="line">                snakeY[<span class="number">0</span>] = snakeY[<span class="number">0</span>]+<span class="number">25</span>;</span><br><span class="line">                <span class="keyword">if</span>(snakeX[<span class="number">0</span>]&gt;<span class="number">650</span>)&#123;snakeX[<span class="number">0</span>] = <span class="number">75</span>;&#125;<span class="comment">//边界判断</span></span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//失败判定，撞到自己就算失败</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; length; i++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(snakeX[<span class="number">0</span>]==snakeX[i] &amp;&amp; snakeY[<span class="number">0</span>] == snakeY[i])&#123;</span><br><span class="line">                    isFail = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">            repaint();<span class="comment">//重画页面</span></span><br><span class="line">        &#125;</span><br><span class="line">        timer.start();<span class="comment">//定时器开启</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//数据中心</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Data</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//相对路径  XX.jpg</span></span><br><span class="line">    <span class="comment">//绝对路径  /   相当于当前的项目</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//头部</span></span><br><span class="line">    public static URL headerURL = Data.class.getResource("statics/header.png");</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon header = <span class="keyword">new</span> ImageIcon(headerURL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//上下左右</span></span><br><span class="line">    public static URL upURL = Data.class.getResource("statics/up.png");</span><br><span class="line">    public static URL downURL = Data.class.getResource("statics/down.png");</span><br><span class="line">    public static URL leftURL = Data.class.getResource("statics/left.png");</span><br><span class="line">    public static URL rightURL = Data.class.getResource("statics/right.png");</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon up = <span class="keyword">new</span> ImageIcon(upURL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon down = <span class="keyword">new</span> ImageIcon(downURL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon left = <span class="keyword">new</span> ImageIcon(leftURL);</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon right = <span class="keyword">new</span> ImageIcon(rightURL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//身体</span></span><br><span class="line">        public static URL bodyURL = Data.class.getResource("statics/body.png");</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon body = <span class="keyword">new</span> ImageIcon(bodyURL);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//食物</span></span><br><span class="line">     public static URL foodURL = Data.class.getResource("statics/food.png");</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">static</span> ImageIcon food = <span class="keyword">new</span> ImageIcon(foodURL);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><ul>
<li>定义数据</li>
<li>画上去</li>
<li>监听事件<ul>
<li>键盘</li>
<li>事件</li>
</ul>
</li>
</ul>
<h2 id="GUI编程-1"><a href="#GUI编程-1" class="headerlink" title="GUI编程"></a>GUI编程</h2><ul>
<li>GUI</li>
<li>AWT<ul>
<li>组件</li>
<li>容器</li>
<li>画板</li>
<li>事件监听</li>
<li>文本框监听</li>
<li>画图类paint</li>
<li>鼠标监听器</li>
<li>窗口监听器</li>
<li>键盘监听器</li>
</ul>
</li>
<li>SWing<ul>
<li>容器</li>
<li>面板   可以带滚动条</li>
<li>label<ul>
<li>普通标签</li>
<li>图片标签</li>
<li>图像标签</li>
</ul>
</li>
<li>按钮<ul>
<li>普通按钮</li>
<li>带图片的</li>
<li>单选框</li>
<li>多选框</li>
</ul>
</li>
<li>列表<ul>
<li>下拉框</li>
<li>列表框</li>
</ul>
</li>
<li>文本框<ul>
<li>普通文本</li>
<li>密码框</li>
<li>文本域</li>
</ul>
</li>
</ul>
</li>
<li>贪吃蛇</li>
</ul>
]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/Mr-lee-MQ.hithub.io/2020/06/10/Git/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git<a id="more"></a></h1><h2 id="idea安装Git"><a href="#idea安装Git" class="headerlink" title="idea安装Git"></a>idea安装Git</h2><ul>
<li><p>[下载地址]:<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p>
</li>
<li><p>安装默认</p>
</li>
<li><p>运行测试：win+r,cmd  打开控制台，输入git指令，看到下图即表示安装成功</p>
</li>
<li><p><img src="https://stepimagewm.how2j.cn/5793.png" alt="运行测试"></p>
</li>
</ul>
<h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><ul>
<li><p>菜单-&gt;settings-&gt;Version Control-&gt;Git-&gt;Path to Git executable: 设置为<a href="https://how2j.cn/k/idea/idea-git-install/1359.html" target="_blank" rel="noopener">安装git</a>中所安装的git.exe</p>
</li>
<li><p><img src="https://stepimagewm.how2j.cn/5794.png" alt="为IDEA指定git路径"></p>
</li>
<li><p>接下来为github设置账号密码：<br>菜单-&gt;settings-&gt;Version Control-&gt;GitHub-&gt;Create API Token</p>
</li>
<li><p><img src="https://stepimagewm.how2j.cn/5795.png" alt="设置github账号"></p>
</li>
</ul>
<h2 id="idea-pull项目"><a href="#idea-pull项目" class="headerlink" title="idea pull项目"></a>idea pull项目</h2><ul>
<li>checkout：菜单-&gt;VCS-&gt;Chekout from Version Control-&gt;GitHub</li>
<li><img src="https://stepimagewm.how2j.cn/5797.png" alt="checkout"></li>
<li>输入项目参数：Git Repositor URL:<a href="https://github.com/how2j/higit.git" target="_blank" rel="noopener">https://github.com/how2j/higit.git</a><br>Parent Directory: e:\project<br>Directory Name: higit<br>然后点击 Clone</li>
<li><img src="https://stepimagewm.how2j.cn/5798.png" alt="输入项目参数"></li>
</ul>
]]></content>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5</title>
    <url>/Mr-lee-MQ.hithub.io/2020/07/13/HTML5/</url>
    <content><![CDATA[<h1 id="HTML详解"><a href="#HTML详解" class="headerlink" title="HTML详解"></a>HTML详解<a id="more"></a></h1><h2 id="初识HTML"><a href="#初识HTML" class="headerlink" title="初识HTML"></a>初识HTML</h2><ul>
<li>Hper Text Markup Language(超文本标记语言)</li>
<li>W3C     万维网联盟</li>
<li>W3C标准包括<ul>
<li>结构化标准语言（HTML    XML）</li>
<li>表现标准语言（CSS）</li>
<li>行为标准（DOM，ECMAScript）</li>
</ul>
</li>
</ul>
<h2 id="HTML的基本结构"><a href="#HTML的基本结构" class="headerlink" title="HTML的基本结构"></a>HTML的基本结构</h2><p>网页头部</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>主体部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>&lt; body&gt;  ，&lt; /body&gt;等成对出现的标签（&lt; body&gt; 为开放标签     &lt; /body&gt;为闭合标签 ）</p>
</li>
<li><p>&lt; meta charset=”UTF-8”&gt;为自闭合标签</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE：      &gt;</span>      <span class="comment">&lt;!--告诉浏览器要使用什么规范--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="comment">&lt;!--网页的标题--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>      <span class="comment">&lt;!--mate 描述性标签，用来描述网站的信息，可做SEO--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta  name &#x3D;&quot;keywords&quot; content&#x3D;&quot;西部开源&quot; &gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;可以学JAVA&quot; &gt;	&lt;！--网站描述--&gt;</span><br></pre></td></tr></table></figure>

<h2 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h2><ul>
<li><p>标题标签</p>
<ul>
<li>（&lt; h1&gt;一级标签&lt; /h1&gt;）</li>
<li>（&lt; h2&gt;一级标签&lt; /h2&gt;）</li>
<li>（&lt; h3&gt;一级标签&lt; /h3&gt;）</li>
</ul>
</li>
<li><p>段落标签</p>
<ul>
<li>（&lt; p&gt;段落&lt; /p&gt;）</li>
</ul>
</li>
<li><p>换行标签</p>
<ul>
<li>（br  换行）自闭合标签</li>
</ul>
</li>
<li><p>水平线标签</p>
<ul>
<li>（&lt; /hr&gt;）</li>
</ul>
</li>
<li><p>字体样式标签</p>
<ul>
<li>粗体（&lt; stong&gt;  &lt; /stong&gt;）</li>
<li>斜体（&lt; em&gt;&lt; /em&gt;）</li>
</ul>
</li>
<li><p>特殊符号（&amp;     ）</p>
<ul>
<li>空格（&amp;nbsp；）</li>
<li>大于号   (&amp;gt ;）</li>
<li>小于号   (&amp;lt ;)</li>
<li>版权符号（&amp;copy；）</li>
</ul>
</li>
</ul>
<h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><ul>
<li>img标签学习<ul>
<li>&lt; img src&gt;<ul>
<li>src     图片地址<ul>
<li>相对地址（常用）../      –上一级目录</li>
<li>绝对地址</li>
</ul>
</li>
<li>alt     图片名字</li>
<li>title     鼠标悬停显示的文字</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&quot;&gt;&lt;&#x2F;a&gt;       &lt;!--必填，表示要跳转的网址</span><br></pre></td></tr></table></figure>

<ul>
<li><p>target     以何种方式打开窗口</p>
<ul>
<li>blank     在一个新的网页中打开</li>
<li>self         在本网页中打开</li>
</ul>
</li>
<li><p>锚链接</p>
<ul>
<li>需要一个锚标记</li>
<li>#加标记name </li>
</ul>
</li>
<li><p>功能性链接</p>
<ul>
<li><p>邮件链接： mailto</p>
</li>
<li><p>QQ链接：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">src</span>=<span class="string">"http://wpa.qq.com/pa?p=2::52"</span> <span class="attr">alt</span>=<span class="string">"点击我"</span> <span class="attr">title</span>=<span class="string">"点击我"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h2><ul>
<li>块元素<ul>
<li>无论内容多少，该元素独占一行</li>
<li>（p、h1-h6）</li>
</ul>
</li>
<li>行内元素<ul>
<li>内容撑开宽度，左右都是行元素的可以排在一行</li>
<li>（a.strong.em…..）</li>
</ul>
</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>无序列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">	&lt;li&gt;JAVA&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;前端&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;C语言&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>有序列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">	&lt;li&gt;JAVA&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;前端&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;C语言&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;学科&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;JAVA&lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;Linux&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul>
<li><p>表格标签table</p>
<ul>
<li><p>行标签   tr</p>
</li>
<li><p>列标签   td</p>
</li>
<li><p>边框   border</p>
</li>
<li><p>跨列   colspan</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;td colspan&#x3D;&quot;4&quot;&gt;1-1&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>跨行  rowspan</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;td rowspan&#x3D;&quot;2&quot;&gt;2-1&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure>

<h2 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;video src&#x3D;&quot;..&#x2F;resources&#x2F;video&#x2F;NOGIZAKA46_&gt;&lt;&#x2F;video&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>src     资源路径</li>
<li>controls    控制条 </li>
<li>autoplay    自动播放</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;audio src&#x3D;&quot;..&#x2F;resources&#x2F;audio&#x2F;LOSER%20-%20米津玄師.mp3&quot;&gt;&lt;&#x2F;audio&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>controls    控制条 </li>
<li>autoplay    自动播放</li>
</ul>
<h2 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h2><ul>
<li>header    标题头部区域的内容</li>
<li>footer     标题脚部区域的内容</li>
<li>section    Web页面中的一块独立区域</li>
<li>article      独立的文章内容</li>
<li>aside      相关内容或应用</li>
<li>nav      导航类辅助内容</li>
</ul>
<h2 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">height</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>src    地址</li>
<li>w-h    高度宽度   </li>
</ul>
<h2 id="表单语法"><a href="#表单语法" class="headerlink" title="表单语法"></a>表单语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&quot;&gt;&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>action   表单提交的位置，可以是网站，也可以是一个请求处理的地址</li>
<li>method    post，get 提交方式<ul>
<li>get     信息可以在url中看到，不安全，高速</li>
<li>post    比较安全，传输大文件</li>
</ul>
</li>
</ul>
<p>文本输入框    input</p>
<ul>
<li>type     指定元素类型<ul>
<li>text  文本框</li>
<li>password    密码框</li>
<li>submit    提交</li>
<li>reset    重置</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"我的第一个程序.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span><span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password "</span><span class="attr">name</span>=<span class="string">"psd"</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单元素格式"><a href="#表单元素格式" class="headerlink" title="表单元素格式"></a>表单元素格式</h3><ul>
<li>type    指定元素类型      （都需要name属性）<ul>
<li>text   文本框（默认）</li>
<li>password    密码框</li>
<li>checkbox   单选框</li>
<li>radio   单选框       必须有初值，且单选框的name需一致</li>
<li>submit    按钮提交</li>
<li>reset    按钮重置</li>
<li>file     文件域</li>
<li>hidden 隐藏域</li>
<li>image   图片点击</li>
<li>button   按钮</li>
</ul>
</li>
<li>name    指定表单元素的名称</li>
<li>value    元素的初始值      type为radio时必须指定一个值</li>
<li>size   指定表单元素的初始宽度。当type为text或password时，表单元素的大小以字符为单位。对于其它类型，宽度以像素为单位</li>
<li>maxlength    type为text或password时，输入的最大字符</li>
<li>checked     type为radio或checkbox时，指定按钮是否被选中</li>
</ul>
<p>单选框   radio</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span><span class="attr">value</span>=<span class="string">"boy"</span>  <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span><span class="attr">value</span>=<span class="string">"girl"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>多选框    checkbox</p>
<ul>
<li>checked    默认选中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"game"</span><span class="attr">name</span>=<span class="string">"hobby"</span> &gt;</span>游戏</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"go"</span><span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">checked</span>&gt;</span>逛街</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"hua"</span><span class="attr">name</span>=<span class="string">"hobby"</span> &gt;</span>化妆</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按钮  button</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span><span class="attr">name</span>=<span class="string">"but1"</span> <span class="attr">value</span>=<span class="string">"点击"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span><span class="attr">src</span>=<span class="string">"../resources/image/mmexport1564926230808.jpg"</span><span class="attr">alt</span>=<span class="string">"tutu"</span><span class="attr">width</span>=<span class="string">"200"</span><span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>下拉框/列表框      select</p>
<ul>
<li><p>select    列表</p>
</li>
<li><p>option  value=“      ”     选项的值</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"列表名称"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"china"</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ruishi"</span>&gt;</span>瑞士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"deguo"</span>&gt;</span>德国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"meiguo"</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文本域   textarea</p>
<ul>
<li>cols   长度</li>
<li>rows   宽度</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"textarea"</span> <span class="attr">cols</span>=<span class="string">"10"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件域    file</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"bon1"</span> <span class="attr">value</span>=<span class="string">"上传"</span> &gt;</span></span><br></pre></td></tr></table></figure>

<p>邮件验证     email</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;email&quot;name&#x3D;&quot;email&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>URL验证   url</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;url&quot; name&#x3D;&quot;url&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>数字验证  number</p>
<ul>
<li>max</li>
<li>min</li>
<li>step     递增或递减</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;number&quot;name&#x3D;&quot;number&quot; max&#x3D;&quot;100&quot;min&#x3D;&quot;10&quot;step&#x3D;&quot;1&quot; &gt;</span><br></pre></td></tr></table></figure>

<p>滑块     range</p>
<ul>
<li>max</li>
<li>min</li>
<li>step    递增或递减 </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span><span class="attr">name</span>=<span class="string">"huakuai"</span><span class="attr">max</span>=<span class="string">"100"</span><span class="attr">min</span>=<span class="string">"1"</span><span class="attr">step</span>=<span class="string">"1"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>搜索框   search</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span><span class="attr">name</span>=<span class="string">"sousuo"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单的应用"><a href="#表单的应用" class="headerlink" title="表单的应用"></a>表单的应用</h2><ul>
<li><p>只读域   readonly</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span><span class="attr">value</span>=<span class="string">"boy"</span>  <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">readonly</span>/&gt;</span>男</span><br></pre></td></tr></table></figure>
</li>
<li><p>禁用域    disabled</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"game"</span><span class="attr">name</span>=<span class="string">"hobby"</span>  <span class="attr">disabled</span>&gt;</span>游戏</span><br></pre></td></tr></table></figure>

<ul>
<li>隐藏域   hidden</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password "</span><span class="attr">name</span>=<span class="string">"psd"</span> <span class="attr">hidden</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>增强鼠标的可用性   lable<ul>
<li>for=“进入某个id中”</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mark"</span>&gt;</span>你点我试试<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单初级验证"><a href="#表单初级验证" class="headerlink" title="表单初级验证"></a>表单初级验证</h2><ul>
<li>提示信息：placeholder=“请输入用户名”</li>
<li>非空判断：required</li>
<li>正则表达式:    pattern     百度可得</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的搭建</title>
    <url>/Mr-lee-MQ.hithub.io/2020/05/24/Hexo%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="软件安装部署及更新"><a href="#软件安装部署及更新" class="headerlink" title="软件安装部署及更新"></a>软件安装部署及更新<a id="more"></a></h1><h2 id="hexo-github-搭建的个人博客"><a href="#hexo-github-搭建的个人博客" class="headerlink" title="hexo + github 搭建的个人博客"></a>hexo + github 搭建的个人博客</h2><p>源于 <a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Yb411a7ty</a></p>
<h2 id="hexo-gitee-搭建的个人博客"><a href="#hexo-gitee-搭建的个人博客" class="headerlink" title="hexo + gitee 搭建的个人博客"></a>hexo + gitee 搭建的个人博客</h2><p>源于 <a href="https://ouwen666.gitee.io/2020/01/29/Hexo+Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="noopener">https://ouwen666.gitee.io/2020/01/29/Hexo+Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more</a></p>
<h2 id="搭建完成后更换主题"><a href="#搭建完成后更换主题" class="headerlink" title="搭建完成后更换主题"></a>搭建完成后更换主题</h2><ul>
<li>安装主题</li>
</ul>
<p>git clone –depth=1 <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus.git" target="_blank" rel="noopener">https://github.com/JoeyBling/hexo-theme-yilia-plus.git</a> ./yilia-plus</p>
<ul>
<li>配置</li>
</ul>
<p>修改hexo根目录下的 _config.yml ➡️ theme: yilia-plus</p>
<ul>
<li>更新</li>
</ul>
<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>
<p>源于 <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">https://github.com/JoeyBling/hexo-theme-yilia-plus</a></p>
<p>用Hexo写一篇博客</p>
<pre><code>$ hexo n &quot;我的第一篇博客&quot;
INFO  Created: E:\bolg\source\_posts\我的第一篇博客.md</code></pre><p>编辑完保存文件，重启Hexo服务</p>
<pre><code> hexo clean          # 清除所有记录 
$ hexo generate       # 生成静态网页 简写：hexo g
$ hexo server         # 启动服务 简写：hexo s</code></pre><p>或者用&amp;&amp;连接起来也可以</p>
<pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="2020年8月4日11-36-49"><a href="#2020年8月4日11-36-49" class="headerlink" title="2020年8月4日11:36:49"></a>2020年8月4日11:36:49</h3><ul>
<li><p>将图片存放在同名文件夹中，放到图床上，然后将Markdown的详细链接放到博客中即可插入图片</p>
</li>
<li><p>网易云音乐更换音乐<a href="https://music.163.com/#，选择外链id后进入主题下config文件下更改音乐id" target="_blank" rel="noopener">https://music.163.com/#，选择外链id后进入主题下config文件下更改音乐id</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/05/JSON/</url>
    <content><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON<a id="more"></a></h1><p><strong>要求及语法格式</strong></p>
<ul>
<li>对象表示为键值对</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;!-- 键名写在前面并用双引号<span class="string">""</span>包裹，使用:分割，然后紧接着值--&gt;</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"qinjiang"</span>&#125;</span><br><span class="line">&#123;<span class="string">"age"</span>:<span class="string">"3"</span>&#125;</span><br><span class="line">&#123;<span class="string">"sex"</span>:<span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据由逗号分割</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<p><strong>JSON和JS对象的关系</strong>:</p>
<p>JSON是JS对象的字符串表示法，他使用文本表示一个JS对象的信息，本质是一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="string">'hello'</span>,<span class="attr">b</span>:<span class="string">'World'</span>&#125;;<span class="comment">//这是一个对象，注意键名也是可以使用引号包裹。</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"a":"Hello","b":"World"&#125;'</span>;<span class="comment">//这是一个JSON字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure>

<p><strong>JSON和JS对象互转</strong></p>
<p>JSON字符串转换为JS对象，使用JSON.parse()方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a":"Hello","b":"World"&#125;'</span>);</span><br><span class="line"><span class="comment">//结果是&#123;a:'Hello',b:'World'&#125;</span></span><br></pre></td></tr></table></figure>

<p>JS对象转换为JSON字符串，使用JSON.stringify()方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>:<span class="string">'Hello'</span>,<span class="attr">b</span>:<span class="string">'World'</span>&#125;);</span><br><span class="line"><span class="comment">//结果是'&#123;"a":"Hello","b":"World"&#125;'</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Java-多线程</title>
    <url>/Mr-lee-MQ.hithub.io/2020/10/17/Java-%E5%A4%9A%E7%BA%BF%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="多线程详解"><a href="#多线程详解" class="headerlink" title="多线程详解 "></a>多线程详解 <a id="more"></a></h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>线程简介</li>
<li><strong>线程实现（重点）</strong></li>
<li>线程状态</li>
<li><strong>线程同步（重点）</strong></li>
<li>线程通信问题</li>
<li>高级主题</li>
</ul>
<h2 id="线程简介"><a href="#线程简介" class="headerlink" title="线程简介"></a>线程简介</h2><h3 id="Process（进程）和Thread（线程）"><a href="#Process（进程）和Thread（线程）" class="headerlink" title="Process（进程）和Thread（线程）"></a>Process（进程）和Thread（线程）</h3><ul>
<li>说起进程，就不得不说下程序。程序是指令和数据的有序集合，其本身没有任何运行的含义，是一个静态的概念</li>
<li>而进程则是执行程序的一次执行过程，它是一个动态的概念。是系统资源分配的单位。</li>
<li>通常一个进程中可以包含若干个线程，当然一个进程中至少有一个线程，不然没有存在的意义。线程就是CPU调度和执行的单位。</li>
</ul>
<p><strong>注意：</strong>很多多线程是模拟出来的，真正的多线程是指有多个cpu，即多核，如服务器。如果模拟出来的多线程，即在一个cpu的情况下，在同一个时间点，cpu只能执行一个代码，所以就有同时执行的错觉。</p>
<h3 id="核心概念"><a href="#核心概念" class="headerlink" title="核心概念"></a>核心概念</h3><ul>
<li><p>线程就是独立的执行路径。</p>
</li>
<li><p>在程序运行时，即使没有自己创建线程，后台也会有多个线程，如主线程，gc线程；</p>
</li>
<li><p>main（）称之为主线程，为系统的入口，用于执行整个程序。</p>
</li>
<li><p>在一个进程中，如果开辟了多个线程，线程的运行由调度器安排调度，调度器是与操作系统紧密相关的，先后顺序是不能认为的干预。</p>
</li>
<li><p>对同一份资料操作时，会存在资源抢夺的问题，需要加入并发控制。</p>
</li>
<li><p>线程会带来额外的开销，如cpu调度时间，并发控制开销。</p>
</li>
<li><p>每个线程在自己的工作内存交互，内存控制不当会造成数据不一致。</p>
</li>
</ul>
<h2 id="线程创建（三种）"><a href="#线程创建（三种）" class="headerlink" title="线程创建（三种）"></a>线程创建（三种）</h2><ul>
<li><p>Thread class        继承Thread类(重点)</p>
</li>
<li><p>Runnable接口        实现Runnable接口(重点)</p>
</li>
<li><p>Callable接口       实现Callable接口(了解)</p>
</li>
</ul>
<h3 id="Thread类"><a href="#Thread类" class="headerlink" title="Thread类"></a>Thread类</h3><ul>
<li>自定义线程类继承Thread类。</li>
<li>重写run()方法。</li>
<li>创建线程对象，调用start()方法启动线程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建线程方法一:继承Thread类，重写run方法，调用start开启线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我早看代码"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//main线程，主线程</span></span><br><span class="line">        <span class="comment">//创建一个线程对象</span></span><br><span class="line">        TestThread1 testThread1 = <span class="keyword">new</span> TestThread();</span><br><span class="line">        <span class="comment">//调用start()方法开启线程</span></span><br><span class="line">        testThread.start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">200</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在学习多线程--"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>run方法和Thread.start方法的区别</strong></p>
<p>run方法是按照调用的顺序执行,而Thread.start方法则是有cpu安排顺序。</p>
<h3 id="网图下载"><a href="#网图下载" class="headerlink" title="网图下载"></a>网图下载</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//需要导包 commons.io.FileUtils</span></span><br><span class="line"><span class="comment">//练习Thread，实现多线程同步下载图片</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread2</span> <span class="keyword">extends</span> <span class="title">Thread</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//保存的文件名</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestThread2</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//下载图片的执行体</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url,name);</span><br><span class="line">        Syetem.out.println(<span class="string">"下载了文件名为:"</span>+name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestThread2 t1 = <span class="keyword">new</span> TestThread2(url,name);</span><br><span class="line">        TestThread2 t2 = <span class="keyword">new</span> TestThread2(url,name);</span><br><span class="line">        TestThread2 t3 = <span class="keyword">new</span> TestThread2(url,name);</span><br><span class="line">        <span class="comment">//并非按照顺序下载，同时下载。</span></span><br><span class="line">        t1.start();</span><br><span class="line">        t1.start();</span><br><span class="line">        t1.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//下载器</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WebDownloader</span></span>&#123;</span><br><span class="line">    <span class="comment">//下载方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">downloader</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            FileUtils.copyURLTOFile(<span class="keyword">new</span> URL(url),<span class="keyword">new</span> FIle(name));</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            System.out.println(<span class="string">"IO异常，downloader方法出现异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现Runnable"><a href="#实现Runnable" class="headerlink" title="实现Runnable"></a>实现Runnable</h3><ul>
<li>定义MyRunnable类实现的Runnable接口</li>
<li>实现run（）方法，编写线程执行体</li>
<li>创建线程对象，调用start（）方法启动线程</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//大体实现步骤</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StartThread3</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//线程体</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在听课"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建实现类对象</span></span><br><span class="line">    StartTjread3 st = <span class="keyword">new</span> StartThread3();</span><br><span class="line">    <span class="comment">//创建代理类对象</span></span><br><span class="line">    Thread thread = <span class="keyword">new</span> Thread(st);</span><br><span class="line">    <span class="comment">//启动</span></span><br><span class="line">    thread.start();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建线程方式2:实现runnable接口，重写run方法，执行线程需要丢入runnable接口实现类，调用start方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread</span> <span class="title">imlements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//run方法线程体</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;<span class="number">200</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在看代码"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建runnable接口的实现类对象</span></span><br><span class="line">        TestThread3 testThread3 = <span class="keyword">new</span> TestThread3();</span><br><span class="line">        <span class="comment">//创建线程对象，通过线程对象来开启我们的线程，代理。</span></span><br><span class="line">        <span class="comment">//Thread thread = new Thread(testThread3);</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//thread.start();</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testThread3).start();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"我在学习多线程"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>小结：</strong></p>
<ul>
<li>继承Thread类<ul>
<li>子类继承Thread类具有多线程能力。</li>
<li>启动线程：子类对象.start()</li>
<li>不建议使用：避免OOP单继承局限性</li>
</ul>
</li>
<li><strong>实现Runnable接口</strong><ul>
<li>实现接口Runnable具有多线程的能力。</li>
<li>启动线程:传入目标对象+Thread对象.start()</li>
<li><strong>推荐使用：避免单继承局限性，灵活方便，方便同一个对象被多个线程使用。</strong></li>
</ul>
</li>
</ul>
<h2 id="初识并发问题"><a href="#初识并发问题" class="headerlink" title="初识并发问题"></a>初识并发问题</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//多个线程同时操作同一个对象</span></span><br><span class="line"><span class="comment">//买火车票的例子</span></span><br><span class="line"><span class="comment">//发现问题：多个线程操作同一个资源的情况下，线程不安全，数据紊乱。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestThread4</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//票数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (ture)&#123;</span><br><span class="line">            <span class="keyword">if</span>(ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//模拟延时</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">200</span>);</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.prontStartTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;拿了第"</span>+ticketNums--+<span class="string">"票"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestThread4 ticket = <span class="keyword">new</span> TestThread4();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"小明"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"老师"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(ticket,<span class="string">"黄牛党"</span>).start();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//输出发现小明，老师，黄牛党可能拿到相同的票</span></span><br></pre></td></tr></table></figure>

<h2 id="案例：龟兔赛跑"><a href="#案例：龟兔赛跑" class="headerlink" title="案例：龟兔赛跑"></a>案例：龟兔赛跑</h2><ul>
<li>首先来个赛道距离，然后要离终点越来越近</li>
<li>判断比赛是否结束</li>
<li>打印出胜利者</li>
<li>龟兔赛跑开始</li>
<li>故事中的乌龟赢的，兔子需要睡觉，所以我们来模拟兔子睡觉</li>
<li>终于，乌龟赢得了比赛</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟龟兔赛跑</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Race</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//模拟兔子休息</span></span><br><span class="line">            <span class="keyword">if</span>(Thread.currentThread().getName().equlas(<span class="string">"兔子"</span>)&amp;&amp; i%<span class="number">10</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">200</span>);</span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="comment">//判断比赛是否结束</span></span><br><span class="line">        <span class="keyword">boolean</span> flog = gameOver(i);  </span><br><span class="line">        <span class="comment">//如果比赛结束了，就停止程序</span></span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;    System.out.println(Thread.currentThread().getName()+<span class="string">"--&gt;跑了"</span>+i+<span class="string">"步"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断是否完成比赛</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">gameOver</span><span class="params">(<span class="keyword">int</span> steps)</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有胜利者</span></span><br><span class="line">        <span class="keyword">if</span>(winner!= <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//已经存在胜利者了</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;&#123;</span><br><span class="line">            <span class="keyword">if</span> (steps&gt;= <span class="number">100</span>)&#123;</span><br><span class="line">                winner = Thread.currentThread().getName();</span><br><span class="line">                System.out.println(<span class="string">"winner is "</span>+winner);</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flase;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Race race = <span class="keyword">new</span> Race();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(race, <span class="string">"兔子"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(race, <span class="string">"乌龟"</span>).start();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实现Callable接口"><a href="#实现Callable接口" class="headerlink" title="实现Callable接口"></a>实现Callable接口</h3><ul>
<li>实现Callable接口，需要返回值类型</li>
<li>重写call方法，需要抛出异常</li>
<li>创建目标对象</li>
<li>创建执行服务：ExecutorService  ser = Executors.newFixedThreadPool(1);</li>
<li>提交执行:Future<Boolean> result = ser.submit(t1);</Boolean></li>
<li>获取结果:boolean r1 = result.get();</li>
<li>关闭服务:ser.shutdownNow(); </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程创建方式三：实现callable接口</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">callable的好处</span></span><br><span class="line"><span class="comment">1.可以定义返回值</span></span><br><span class="line"><span class="comment">2.可以抛出异常</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCallable</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Boolean</span>&gt;</span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> String url;<span class="comment">//网络图片地址</span></span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//保存的文件名</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TestCallable</span><span class="params">(String url,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.url = url;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//下载图片线程的执行体</span></span><br><span class="line">    <span class="meta">@Override</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> Boolean <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        WebDownloader webDownloader = <span class="keyword">new</span> WebDownloader();</span><br><span class="line">        webDownloader.downloader(url,name);</span><br><span class="line">        System.out.println(<span class="string">"下载了文件名为:"</span>+name);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestCallable t1 = <span class="keyword">new</span> TestCallable(<span class="string">"http://blog.kuangstudy.com/usr/themes/handsome/usr/img/sj/1.jpg"</span>);</span><br><span class="line">        <span class="comment">//创建执行服务</span></span><br><span class="line">        ExecutorService ser = Executors.newFixedThreadPool(<span class="number">3</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//执行提交</span></span><br><span class="line">        Future&lt;Boolean&gt; r1 = ser.submit(t1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取结果</span></span><br><span class="line">        <span class="keyword">boolean</span> rs1 = r1.get();</span><br><span class="line">        System.out.println(rs1);</span><br><span class="line">        <span class="comment">//关闭服务</span></span><br><span class="line">        ser.shutdownNow();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="静态代理"><a href="#静态代理" class="headerlink" title="静态代理"></a>静态代理</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态代理模式总结</span></span><br><span class="line"><span class="comment">//真实对象和代理对象都实现一个接口</span></span><br><span class="line"><span class="comment">//代理对象要代理真实角色</span></span><br><span class="line"><span class="comment">//好处：</span></span><br><span class="line">	<span class="comment">//代理对象可以做很多真实对象做不了的事情</span></span><br><span class="line">	<span class="comment">//真实对象专注做自己的事情</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StaticProxy</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        You you = <span class="keyword">new</span> You();<span class="comment">//你要结婚</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread (()-&gt;System.out.println(<span class="string">"我爱你"</span>)).start();</span><br><span class="line">        </span><br><span class="line">        WeddingCompany weddingCompany = <span class="keyword">new</span> WeddingCompany(you);</span><br><span class="line">        weddingCompany.HappyMarry();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//真实角色，你去结婚</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">HappyMarry</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"秦老师要结婚了。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代理角色</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">weddingCompany</span> <span class="keyword">implements</span> <span class="title">Marry</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Marry target;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WeddingCompany</span> <span class="params">(Marry target)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target.HappyMarry();</span><br><span class="line">        after();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">after</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚之前，布置现场"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">before</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"结婚之后，收尾款"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Lamda表达式"><a href="#Lamda表达式" class="headerlink" title="Lamda表达式"></a>Lamda表达式</h2><ul>
<li><p>希腊字母表中排序第十一位的字母，英语名称为Lamda</p>
</li>
<li><p>避免匿名内部类定义过多</p>
</li>
<li><p>其实质属于函数式编程的概念</p>
</li>
<li><blockquote>
<p>new Thread (()-&gt;System.out.println(“多线程学习…”)).start(</p>
</blockquote>
</li>
</ul>
<ul>
<li><p>为什么使用lambda表达式</p>
<ul>
<li>避免匿名内部类定义过多</li>
<li>可以让你的代码看起来很简洁</li>
<li>去掉了一堆没有意义的代码，只留下核心的逻辑</li>
</ul>
</li>
<li><p>函数式接口的定义：</p>
<ul>
<li><p>任何接口，如果只包含唯一一个抽象方法，那么他就是一个函数式接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
<li><p>对于函数式接口，我们可以通过lambda表达式来创建该接口的对象。</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//推导lambda表达式</span></span><br><span class="line">Public <span class="class"><span class="keyword">class</span> <span class="title">TestLambda</span></span>&#123;</span><br><span class="line">    <span class="comment">//3.静态内部类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"I Like Lambda2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ILike like = <span class="keyword">new</span> Like();</span><br><span class="line">        like.lambda();</span><br><span class="line">        </span><br><span class="line">        like = <span class="keyword">new</span> Like2();</span><br><span class="line">        like.lambda();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//4.局部内部类</span></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Like2</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"I Like Lambda3"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        like = <span class="keyword">new</span> Like3();</span><br><span class="line">        like.lambda();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.匿名内部类</span></span><br><span class="line">        like = <span class="keyword">new</span> ILike()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"I Like Lambda4"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        like.lambda();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//6.用lambda简化</span></span><br><span class="line">        like = ()-&gt;System.out.println(<span class="string">"I Like Lambda"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;;</span><br><span class="line">    like.lambda();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.定义一个函数式接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.实现类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Like</span> <span class="keyword">implements</span> <span class="title">ILike</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">lambda</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"I Like Lambda"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//lambda表达式简化 </span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLambda2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.lambda表示简化</span></span><br><span class="line">        ILove love = (<span class="keyword">int</span> a)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"i Love you--&gt;"</span>+ a);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//简化1.参数类型</span></span><br><span class="line">        love = (a)-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"i love you--&gt;"</span>+a);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//简化2.去掉括号</span></span><br><span class="line">        love = a-&gt;&#123;</span><br><span class="line">            System.out.println(<span class="string">"i love you--&gt;"</span>+a);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="comment">//简化3.去掉花括号</span></span><br><span class="line">        love = a-&gt;System.out.println(<span class="string">"i love you--&gt;"</span>+a);</span><br><span class="line">        </span><br><span class="line">        love.love(<span class="number">520</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="comment">/*总结：lambda表达式只能有一行代码的情况下才能简化成一行，如果有多行，		那么就用代码块包裹</span></span><br><span class="line"><span class="comment">		前提是接口为函数式接口</span></span><br><span class="line"><span class="comment">		多个参数也可以去掉参数类型，要去掉就都去掉，必须加上括号</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h2><ul>
<li><p>创建状态</p>
</li>
<li><p>就绪状态</p>
</li>
<li><p>阻塞状态</p>
</li>
<li><p>运行状态</p>
</li>
<li><p>死亡状态</p>
</li>
</ul>
<h3 id="停止线程"><a href="#停止线程" class="headerlink" title="停止线程"></a>停止线程</h3><ul>
<li>不推荐使用JDK提供的stop（），destroy（）方法。已废弃</li>
<li>推荐线程自己停下来</li>
<li>建议使用一个标志位进行终止变量，当flog=fslse，则终止线程运行</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.线程中定义线程体使用的标识</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//2.线程使用该标识</span></span><br><span class="line">        <span class="keyword">while</span> (flog)&#123;</span><br><span class="line">            System.out.println(<span class="string">"run...Thread"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//3.对外提供方法改变标识</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flog = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试stop</span></span><br><span class="line"><span class="comment">//1.建议线程正常停止--&gt;利用次数，不建议死循环</span></span><br><span class="line"><span class="comment">//2.建议使用标志位--&gt;设置一个标志位</span></span><br><span class="line"><span class="comment">//3.不要使用stop或者destroy等过时或不推荐使用的方法</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestStop</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//1.设置一个标识位</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (flag)&#123;</span><br><span class="line">            System.out.println(<span class="string">"run...Thread"</span>+i++);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//2.设置一个公开的方法停止线程，转换标志位</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">stop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.flog = <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TestStop teststop = <span class="keyword">new</span> TestStop();</span><br><span class="line">        <span class="keyword">new</span> Thread(testStop).start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"main"</span>+i);</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">900</span>)&#123;</span><br><span class="line">                <span class="comment">//调用stop方法切换标志位，让线程停止</span></span><br><span class="line">                testStop.stop();</span><br><span class="line">                System.out.println(<span class="string">"线程停止了"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程休眠"><a href="#线程休眠" class="headerlink" title="线程休眠"></a>线程休眠</h3><ul>
<li>sleep(时间)指定当前线程阻塞的毫秒数；</li>
<li>sleep存在异常interruptedException;</li>
<li>sleep时间达到后线程进入就绪状态；</li>
<li>sleep可以模拟网络延时，倒计时等、</li>
<li>每一个对象都有一个锁，sleep不会释放锁；</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//模拟倒计时</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestSleep2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//打印当前系统时间</span></span><br><span class="line">        Date startTime = <span class="keyword">new</span> Date(System.currentTimeMills());<span class="comment">//获取系统当前时间</span></span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                System.out.println(<span class="keyword">new</span> SimpleDateFormat(<span class="string">"HH-mm-ss"</span>).format(startTime));</span><br><span class="line">                startTime = <span class="keyword">new</span> Date(System.currentTimeMills());<span class="comment">//更新当前时间</span></span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程礼让"><a href="#线程礼让" class="headerlink" title="线程礼让"></a>线程礼让</h3><ul>
<li>线程礼让，让当前正在执行的线程暂停，但不阻塞。</li>
<li>将线程从运行状态转为就绪状态</li>
<li>让CPU重新调度，礼让不一定成功，看CPU心情</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试礼让线程，礼让不一定成功，看CPU调度</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestYield</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        MyYield myYield = <span class="keyword">new</span> MyYield();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">"a"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(myYield,<span class="string">"b"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyYield</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"线程开始执行"</span>);</span><br><span class="line">    Thread.yield();    System.out.println(Thread.currentThread().getName()+<span class="string">"线程停止执行"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程强制执行-Join"><a href="#线程强制执行-Join" class="headerlink" title="线程强制执行    Join"></a>线程强制执行    Join</h3><ul>
<li>Join合并线程，待此线程执行完成后，再执行其他线程，其他线程阻塞。</li>
<li>可以想象成插队。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试Join方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJoin</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">1000</span>; i++ )&#123;</span><br><span class="line">            System.out.println(<span class="string">"线程Vip来了"</span>+i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//启动线程</span></span><br><span class="line">        TestJoin testJoin = <span class="keyword">new</span> TestJoin();</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(testJoin);</span><br><span class="line">        thread.start();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//主线程</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">500</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i==<span class="number">200</span>)&#123;</span><br><span class="line">                thread.join();<span class="comment">//插队</span></span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"main"</span>+i);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程状态观测"><a href="#线程状态观测" class="headerlink" title="线程状态观测"></a>线程状态观测</h3><ul>
<li><p>Thread.State</p>
<p>线程状态。</p>
<ul>
<li><p>NEW </p>
<p>尚未启动的线程处于此状态</p>
</li>
<li><p>RUNNABLE</p>
<p>在Java虚拟机中执行的线程处于此状态</p>
</li>
<li><p>BLOCKED</p>
<p>被阻塞等待监视器锁定的线程处于此状态</p>
</li>
<li><p>WAITING</p>
<p>正在等待另一个线程执行特定动作的线程处于此状态</p>
</li>
<li><p>TIMED_WAITING</p>
<p>正在等待另一个线程执行动作达到指定等待时间的线程处于此状态</p>
</li>
<li><p>TERMINATED</p>
<p>已退出的线程处于此状态</p>
</li>
</ul>
</li>
</ul>
<p>一个线程可以在给定时间点处于一个状态。这些状态是不反映任何操作系统线程状态的虚拟机状态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//观察测试线程的状态</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestState</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)&#123;</span><br><span class="line">                <span class="keyword">try</span>&#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    </span><br><span class="line">                &#125;<span class="keyword">catch</span> (InterruptedEcxeption e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println(<span class="string">"////////"</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">       </span><br><span class="line">        <span class="comment">//观察状态</span></span><br><span class="line">        Thread.State state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//NEW</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//观察启动后</span></span><br><span class="line">        thread.start();<span class="comment">//启动线程</span></span><br><span class="line">        state = thread.getState();</span><br><span class="line">        System.out.println(state);<span class="comment">//Run</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(state != Thread.State.TERMINATED)&#123;</span><br><span class="line">            <span class="comment">//只要线程不终止，就一直输出</span></span><br><span class="line">            Thread.sleep(<span class="number">100</span>);</span><br><span class="line">            state = thread.getState();<span class="comment">//更新线程状态</span></span><br><span class="line">            System.out.println(state);<span class="comment">//输出状态</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="线程的优先级"><a href="#线程的优先级" class="headerlink" title="线程的优先级"></a>线程的优先级</h3><ul>
<li>Java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程，线程调度器按照优先级决定应该调度哪个线程来执行。</li>
<li>线程的优先级用数字表示，范围1~10.<ul>
<li>Thread.MIN_PRIORITY = 1;</li>
<li>Thread.MAX_PRIORITY = 10;</li>
<li>Thread.NORM_PRIORITY = 5;</li>
</ul>
</li>
<li>使用以下方式改变或获取优先级<ul>
<li>getPriority().setPriority(int XXX)</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试线程的优先级</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPriority</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//主线程默认优先级</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"---&gt;"</span>+Thread.currentThread().getPriority());</span><br><span class="line">        </span><br><span class="line">        MyPriority_myPriority = <span class="keyword">new</span> MyPriority();</span><br><span class="line">        </span><br><span class="line">        Thread t1 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t2 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t3 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t4 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t5 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        Thread t6 = <span class="keyword">new</span> Thread(myPriority);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//先设置优先级，再启动</span></span><br><span class="line">        t1.start();</span><br><span class="line">        </span><br><span class="line">        t2.setPriority(<span class="number">1</span>);</span><br><span class="line">        t2.start();</span><br><span class="line">		</span><br><span class="line">        t3.setPriority(<span class="number">4</span>);</span><br><span class="line">        t3.start();</span><br><span class="line">        </span><br><span class="line">        t4.setPriority(Thread.MAX_PRIORITY);</span><br><span class="line">        t4.start();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>优先级低只是意味着获取调度的概率低，并不是优先级低就不会被调用了，都看CPU的调度。</p>
<h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><ul>
<li>线程分为用户线程和守护线程</li>
<li>虚拟机必须确保用户线程执行完毕</li>
<li>虚拟机不用等待守护线程执行完毕</li>
<li>如，后台记录操作日志，监控内存，垃圾回收等待</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试守护线程</span></span><br><span class="line"><span class="comment">//上帝守护你</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestDaemon</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> class <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        God god = <span class="keyword">new</span> GOd();</span><br><span class="line">        You you = <span class="keyword">new</span> You();</span><br><span class="line">        </span><br><span class="line">        Thread thread = <span class="keyword">new</span> Thread(god);</span><br><span class="line">        thread.setDaemon(<span class="keyword">true</span>);<span class="comment">//默认是false表示用户线程。</span></span><br><span class="line">        </span><br><span class="line">        thread.start();<span class="comment">//上帝守护线程启动</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(you).start();<span class="comment">//你  用户线程启动</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//上帝</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">God</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"上帝保有着你"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//你</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">You</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">36500</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"你一生都开心的活着"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.prntln(<span class="string">"====goodbay! world===="</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程同步机制"><a href="#线程同步机制" class="headerlink" title="线程同步机制"></a>线程同步机制</h2><p>多个线程作用统一资源</p>
<p><strong>并发：</strong>同一个对象被多个线程同时操作</p>
<p>处理多线程问题时，多个线程访问同一个对象，并且某些线程还想修改这个对象。这时候我们就需要线程同步。</p>
<p><strong>线程同步</strong>其实就是一种等待机制，多个需要同时访问此对象的线程进入这个<strong>对象的等待池</strong>形成队列，等待前面线程使用完毕，下一个线程再使用。</p>
<h3 id="队列和锁"><a href="#队列和锁" class="headerlink" title="队列和锁"></a>队列和锁</h3><p>线程同步需要队列和锁</p>
<h3 id="线程同步"><a href="#线程同步" class="headerlink" title="线程同步"></a>线程同步</h3><ul>
<li>由于同一进程的多个线程共享同一块存储空间，在带来方便的同时，也带来了访问冲突问题，为了保证数据在方法中被访问时的正确性，在访问时加入<strong>锁机制  synchronized</strong>,当一个线程获得对象的排它锁，独占资源，其他线程必须得等待，使用后释放锁即可。存在以下几个问题<ul>
<li>一个线程持有锁会导致其他需要此锁的线程挂起。</li>
<li>在多线程竞争下，加锁，释放锁会导致比较多的上下文切换和调度延时，引起性能问题。</li>
<li>如果一个优先级高的线程等待一个优先级低的线程释放锁，会导致优先级倒置，引起性能问题。</li>
</ul>
</li>
</ul>
<h3 id="三大不安全案例"><a href="#三大不安全案例" class="headerlink" title="三大不安全案例"></a>三大不安全案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的买票案例</span></span><br><span class="line"><span class="comment">//线程不安全，有负数</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBuyTicket</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        BuyTicket station = <span class="keyword">new</span> BuyTicket();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(station,<span class="string">"苦逼的我"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Tgread(station,<span class="string">"牛逼的你们"</span>).start();</span><br><span class="line">        <span class="keyword">new</span> Thread（station,<span class="string">"可恶的黄牛党"</span>).start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BuyTicket</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="comment">//票</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;<span class="comment">//外部停止方式</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        <span class="keyword">while</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123; </span><br><span class="line">                buy();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断是否有票</span></span><br><span class="line">        <span class="keyword">if</span>(ticketNums&lt;=<span class="number">0</span>)&#123;</span><br><span class="line">            flag = <span class="keyword">false</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//模拟延时</span></span><br><span class="line">        Thread.sleep(<span class="number">100</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//买票</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">"拿到"</span>+ticketNums--);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//不安全的取钱</span></span><br><span class="line"><span class="comment">//两个人去银行取钱，账户</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeBank</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//账户</span></span><br><span class="line">        Account account = <span class="keyword">new</span> Account(<span class="number">100</span>,<span class="string">"结婚基金"</span>);</span><br><span class="line">        </span><br><span class="line">        Drawing you = <span class="keyword">new</span> Drawing(account, <span class="number">50</span>, <span class="string">"你"</span>);</span><br><span class="line">        Drawing girl = <span class="keyword">new</span> Drawing(account, <span class="number">50</span>, <span class="string">"girl"</span>);</span><br><span class="line">        </span><br><span class="line">        you.start();</span><br><span class="line">        girl.start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//账户</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Account</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> money;<span class="comment">//余额</span></span><br><span class="line">    String name;<span class="comment">//卡名</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Account</span> <span class="params">(<span class="keyword">int</span> money,String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.money = money;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//银行：模拟取款</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Drawing</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    Account account;<span class="comment">//账户</span></span><br><span class="line">    <span class="keyword">int</span> drawingMoney;</span><br><span class="line">    <span class="keyword">int</span> nowMoney;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Drawing</span><span class="params">(Account account,<span class="keyword">int</span> drawingMoney,Stirng name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.account = account;</span><br><span class="line">        <span class="keyword">this</span>.drawingMoney = drawingMonry;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//取钱</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断有没有钱</span></span><br><span class="line">        <span class="keyword">if</span>(account.money-drawingMoney&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">"钱不够，取不了"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//卡内余额 = 余额 - 你取的钱</span></span><br><span class="line">        account.money = account.money - drawingMoney;</span><br><span class="line">        <span class="comment">//你手里的钱</span></span><br><span class="line">        nowMoney = nowMoney + drawingMoney;</span><br><span class="line">        </span><br><span class="line">        System.out.println(account.name+<span class="string">"余额为:"</span>+account.money);</span><br><span class="line">        <span class="comment">//Thread.currentThread().getName() = this.getName()</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.getName()+<span class="string">"手里的钱:"</span>+nowMony);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//线程不安全的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UnsafeList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10000</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()--&gt;&#123;</span><br><span class="line">                list.add(Thread.cirrentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="同步方法及同步块"><a href="#同步方法及同步块" class="headerlink" title="同步方法及同步块"></a>同步方法及同步块</h2><ul>
<li><p>由于我们可以通过private关键字来保证数据对象只能被方法访问，所以我们需要针对方法提出一套机制，这个机制就是synchronized关键字，他包括两种用法：synchronized方法和synchronized块</p>
<p><strong>同步方法：public synchronized void method (int args){}</strong></p>
</li>
<li><p>synchronized方法控制对”对象“的访问，每个对象对应一把锁，每个synchronized方法都必须获得调用该方法的对象的锁才能执行，否则线程会阻塞，方法一旦执行，就独占该锁，直到该方法返回才释放锁，后面被阻塞的线程才能获得这个锁，继续执行。</p>
<p><strong>缺陷：若将一个大的方法声明为synchronized将会影响效率。</strong></p>
</li>
</ul>
<h3 id="同步方法弊端"><a href="#同步方法弊端" class="headerlink" title="同步方法弊端"></a>同步方法弊端</h3><p>方法里面需要修改的内容才需要锁，锁的太多，浪费资源。</p>
<h3 id="同步块"><a href="#同步块" class="headerlink" title="同步块"></a>同步块</h3><ul>
<li>同步块:synchronized(Obj){}</li>
<li>Obj称之为同步监视器<ul>
<li>Obj可以是任何对象，但是推荐使用共享资源作为同步监视器</li>
<li>同步方法中无需指定同步监视器，因为同步方法中的同步监视器就是this，就是这个对象本身，或者class[反射中讲解]</li>
</ul>
</li>
<li>同步监视器的执行过程<ul>
<li>第一个线程访问，锁定同步监视器，执行其中的代码。</li>
<li>第二个线程访问，发现同步监视器被锁定，无法访问。</li>
<li>第一个线程访问完毕，解锁同步监视器。</li>
<li>第二个线程访问，发现同步监视器没有锁，然后锁定并访问。</li>
</ul>
</li>
</ul>
<p>锁的对象是变化的量，需要增删改的对象</p>
<h3 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试JUC安全类型的集合</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestJUC</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        CopyOnWriteArrayList&lt;String&gt; list = <span class="keyword">new</span> CopyOnWriteArrayList&lt;String&gt;();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; <span class="number">1000</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">new</span> Thread(()-&gt;&#123;</span><br><span class="line">                list.add(Thread.currentThread().getName());</span><br><span class="line">            &#125;).start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Thread.sleep(<span class="number">3000</span>);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(list.size());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>多个线程各自占有一些共享资源，并且互相等待其他线程占有的资源才可以运行，而导致两个或者多个线程都在等待对方释放资源，都停止执行的情景。某一个同步块同时拥有两个”两个以上对象的锁”时，就有可能会发生“死锁”的问题。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死锁：多个线程互相抱着对方需要的资源，然后形成僵持</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DeadLock</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       Makeup g1 = <span class="keyword">new</span> Makeup(<span class="number">0</span>,<span class="string">"灰姑凉"</span>);</span><br><span class="line">       Makeup g2 = <span class="keyword">new</span> Makeup(<span class="number">1</span>,<span class="string">"白雪公主"</span>);</span><br><span class="line">        </span><br><span class="line">        g1.start();</span><br><span class="line">        g2.start();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//口红</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Lipstick</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//镜子</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mirror</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Makeup</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//需要的资源只有一份，用static来保证只有一份</span></span><br><span class="line">    <span class="keyword">static</span> Lipstick liostick = <span class="keyword">new</span> Lipstick();</span><br><span class="line">    <span class="keyword">static</span> Mirror mirror = <span class="keyword">new</span> Mirror();</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> choice;<span class="comment">//选择</span></span><br><span class="line">    String girlName;<span class="comment">//使用化妆品的人</span></span><br><span class="line">    </span><br><span class="line">    Makeup (<span class="keyword">int</span> choice, String girlName)&#123;</span><br><span class="line">        <span class="keyword">this</span>.choice = choice;</span><br><span class="line">        <span class="keyword">this</span>.girlName = girlName;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//化妆</span></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            makeup();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//化妆,互相持有对方的锁，就是需要拿到对方的资源</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">makeup</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(choice == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (lipstick)&#123;<span class="comment">//获得口红的锁</span></span><br><span class="line">            	System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得口红的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span>(mirror)&#123;<span class="comment">//一秒后想获得镜子</span></span><br><span class="line">                    System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得镜子的锁"</span>);</span><br><span class="line">                    </span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (mirror)&#123;</span><br><span class="line">                <span class="comment">//获得镜子的锁</span></span><br><span class="line">                System.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得镜子的锁"</span>);</span><br><span class="line">                Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">                <span class="keyword">synchronized</span>(lipstick)&#123;</span><br><span class="line">                    <span class="comment">//一秒钟后想获得口红</span></span><br><span class="line">                    system.out.println(<span class="keyword">this</span>.girlName+<span class="string">"获得口红的锁"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>产生死锁的四个必要条件</strong></p>
<ul>
<li>互斥条件：一个资源每次只能被一个进程使用。</li>
<li>请求与保持条件：一个进程因请求而阻塞时，对已获得的资源保持不放。</li>
<li>不剥夺条件：进程已获得的资源，在未使用完之前，不能强行剥夺。</li>
<li>循环等待条件：若干进程之间形成一种头尾相接的循环等待资源关系。</li>
</ul>
<h3 id="lock锁"><a href="#lock锁" class="headerlink" title="lock锁"></a>lock锁</h3><p>ReentrantLock可重入锁</p>
<ul>
<li><p>从JDK5.0开始，Java提供了更强大的线程同步机制——通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</p>
</li>
<li><p>Java.util.concurrent.locks.Lock接口使控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</p>
</li>
<li><p>ReettantLock类实现了Lock，他拥有与synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是ReentrantLock，可以显式加锁，释放锁。</p>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestLock</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(Strinh[] args)</span></span>&#123;</span><br><span class="line">        TestLock2 testLock2 = <span class="keyword">new</span> TestLock2();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread (testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread (testLock2).start();</span><br><span class="line">        <span class="keyword">new</span> Thread (testLock2).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TestLock2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ticketNums = <span class="number">10</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//定义Lock锁</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentranLock lock = <span class="keyword">new</span> ReentrantLock();</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                lock.lock();<span class="comment">//加锁</span></span><br><span class="line">                <span class="keyword">if</span>(ticketNums&gt;<span class="number">0</span>)&#123;</span><br><span class="line">                    <span class="keyword">try</span>&#123;</span><br><span class="line">                        Thraed.sleep(<span class="number">1000</span>);</span><br><span class="line">                    &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                    System.out.println(ticketNums--);</span><br><span class="line">                &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">                <span class="comment">//解锁</span></span><br><span class="line">                lock.unlock();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Lock锁   模板</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ReentrantLock lock = <span class="keyword">new</span> ReenTrantLock();</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m</span><span class="params">()</span></span>&#123;</span><br><span class="line">        lock.lock();</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//保证线程安全的代码;</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span>&#123;</span><br><span class="line">            lock.unlock();</span><br><span class="line">            <span class="comment">//如果同步代码有异常，要将unlock()写入finally语句块</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="synchronized与Lock的对比"><a href="#synchronized与Lock的对比" class="headerlink" title="synchronized与Lock的对比"></a>synchronized与Lock的对比</h3><ul>
<li>Lock是显式锁（手动开启和关闭锁，别忘记关闭锁）synchronized是隐式锁，出了作用域自动释放</li>
<li>Lock只有代码块锁，synchronized有代码块和方法锁</li>
<li>使用Lock锁，JVM将花费较少的时间来调度线程，性能更好。并且具有更好的扩展性（提供更多的子类）</li>
<li>优先使用顺序：<ul>
<li>Lock &gt; 同步代码块（已经进入了方法体，分配了相应资源）&gt; 同步方法（在方法体之外）</li>
</ul>
</li>
</ul>
<h2 id="线程协作"><a href="#线程协作" class="headerlink" title="线程协作"></a>线程协作</h2><h3 id="问题：生产者消费者模式"><a href="#问题：生产者消费者模式" class="headerlink" title="问题：生产者消费者模式"></a>问题：生产者消费者模式</h3><h3 id="线程通信"><a href="#线程通信" class="headerlink" title="线程通信"></a>线程通信</h3><ul>
<li>应用场景：生产者和消费者问题<ul>
<li>假设仓库中只能存放一件产品，生产者将生产出来的产品放入仓库，消费者将仓库中产品取走消费。</li>
<li>如果仓库中没有产品，则生产者将产品放入仓库，否则停止生产并等待，直到仓库中的产品被消费者取走为止。</li>
<li>如果仓库中放有产品，则消费者可以将产品取走消费，否则停止消费并等待，直到仓库中再次放入产品为止。</li>
</ul>
</li>
</ul>
<p><strong>分析：</strong>这是一个线程同步问题，生产者和消费者共享同一个资源，并且生产者和消费者之间相互依赖，互为条件。</p>
<ul>
<li>对于生产者，没有生产产品之前，要通知消费者等待。而生产了产品之后，有需要马上通知消费者消费。</li>
<li>对于消费者，在消费之后，要通知生产者已经结束消费，需要生产新的产品以供消费。</li>
<li>生产者消费者问题中，仅有synchronized是不够的。<ul>
<li>synchronized可阻止并发更新同一个资源共享，实现了同步。</li>
<li>synchronized不能用来实现不同线程之间的消息传递（通信）</li>
</ul>
</li>
</ul>
<p><strong>解决方法1</strong></p>
<p>并发协作模型”生产者/消费者模式”—-&gt;管程法</p>
<ul>
<li>生产者：负责生产数据的模块（可能是方法，对象，线程，进程）</li>
<li>消费者：负责生产数据的模块（可能是方法，对象，线程，进程）</li>
<li>缓冲区：消费者不能直接使用生产者的数据，他们之间有个”缓冲区“</li>
</ul>
<p><strong>生产者将生产好的数据放入缓冲区，消费者从缓冲区拿出数据。</strong></p>
<p><strong>解决方式2</strong></p>
<p>并发协作模型”生产者/消费者模式”—-&gt;信号灯法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试：生产者和消费者模型---&gt;利用缓冲区解决:管程法</span></span><br><span class="line"><span class="comment">//生产者，消费者，产品，缓冲区</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPC</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      SynContainer container = <span class="keyword">new</span> SynContainer();</span><br><span class="line">      </span><br><span class="line">      <span class="keyword">new</span> Productor(container).start();</span><br><span class="line">      <span class="keyword">new</span> Consumer(container).start();</span><br><span class="line">  &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生产者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Productor</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生产</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.run()&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100</span>; i++)&#123;</span><br><span class="line">                container.push(<span class="keyword">new</span> Chicken(i));</span><br><span class="line">                System.out.println(<span class="string">"生产了"</span>+i+<span class="string">"只鸡"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    SynContainer container;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Productor</span><span class="params">(SynContainer container)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.container = container;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//消费</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;<span class="number">100</span>; i++)&#123;</span><br><span class="line">            System.out.println(<span class="string">"消费了"</span>+container.pop().id+<span class="string">"只鸡"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Chicken</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> id;<span class="comment">//产品编号</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chicken</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓冲区</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SynContainer</span></span>&#123;</span><br><span class="line">    <span class="comment">//需要一个容器大小</span></span><br><span class="line">    Chicken[] chicken = <span class="keyword">new</span> Chicken[<span class="number">10</span>];</span><br><span class="line">    <span class="comment">//容器计数器</span></span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//生产者放入产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(Chicken chicken)</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果容器满了，就需要等待消费者消费</span></span><br><span class="line">        <span class="keyword">if</span>(count == chickens.length)&#123;</span><br><span class="line">            <span class="comment">//通知消费者消费，生产等待</span></span><br><span class="line">        &#125;</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//如果没有满，我们就需要丢入产品 </span></span><br><span class="line">        chicken[count] = chicken;</span><br><span class="line">        count++;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//可以通知消费者消费了。</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//消费者消费产品</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> Chicken <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//判断能否消费</span></span><br><span class="line">        <span class="keyword">if</span>(count == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="comment">//生产者生产，消费者等待</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如果可以消费</span></span><br><span class="line">        count--;</span><br><span class="line">        Chicken chicken = chickens[count];</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//吃完了，通知生产者生产</span></span><br><span class="line">        <span class="keyword">return</span> chicken;</span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试生产者消费者问题2:信号灯法，标志位解决</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPc2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        TV tv = <span class="keyword">new</span> TV;</span><br><span class="line">        <span class="keyword">new</span> Player(tv).start();</span><br><span class="line">        <span class="keyword">new</span> Watch(tv).start();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//生产者--&gt;演员</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Player</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    TV tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Player</span><span class="params">(TV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i%<span class="number">2</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"快乐大本营"</span>);</span><br><span class="line">            &#125;elae&#123;</span><br><span class="line">                <span class="keyword">this</span>.tv.play(<span class="string">"抖音:记录美好生活"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//消费者--&gt;观众</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Watcher</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">     TV tv;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Watcher</span><span class="params">(TV tv)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">20</span>; i++ )&#123;</span><br><span class="line">            tv.watch();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品--&gt;节目</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TV</span></span>&#123;</span><br><span class="line">    <span class="comment">//演员表演，观众等待</span></span><br><span class="line">    <span class="comment">//观众观看，演员等待</span></span><br><span class="line">    String voice;<span class="comment">//表演的节目</span></span><br><span class="line">    <span class="keyword">boolean</span> flag = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//表演</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">(String[] voice)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(!flag)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"演员表演了:"</span>+voice);</span><br><span class="line">        <span class="comment">//通知观众观看</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();<span class="comment">//通知唤醒</span></span><br><span class="line">        <span class="keyword">this</span>.voice = voice;</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//观看</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">watch</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(flag)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="keyword">this</span>.wait();</span><br><span class="line">            &#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"观看了:"</span>+ voice);</span><br><span class="line">        <span class="comment">//通知演员表演</span></span><br><span class="line">        <span class="keyword">this</span>.notifyAll();</span><br><span class="line">        <span class="keyword">this</span>.flag = !<span class="keyword">this</span>.flag;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h2><ul>
<li>背景：经常创建和销毁，使用量特别大的资源，比如并发情况下的线程，对性能影响很大。</li>
<li>思路：提前创建好多个线程，放入线程池中，使用时直接获取，使用后放回池中。可以避免频繁的创建销毁，实现重复利用。</li>
<li>好处：<ul>
<li>提高响应速度（减少了创建新线程的时间）</li>
<li>降低资源消耗（重复利用线程池中线程，不需要每次都创建）</li>
<li>便于线程管理<ul>
<li>corePoolSize：线程池的大小</li>
<li>maximumPoolSize：最大线程数</li>
<li>keepAliveTime：线程没有任务时最多保持多长时间会终止。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="使用线程池"><a href="#使用线程池" class="headerlink" title="使用线程池"></a>使用线程池</h3><ul>
<li>JDK5.0起提供了线程池相关的API：ExecutorService 和 Executors</li>
<li>ExecutorService ：真正的线程池接口。常见的子类ThreadPoolExecutor<ul>
<li>void execute(Runnable command)：执行任务/命令，没有返回值，一般用来执行Runnable</li>
<li><T>Future<T>submit(Callable<T> task)：执行任务，有返回值，一般又来执行Callable</T></T></T></li>
<li>void shutdown()：关闭连接池</li>
</ul>
</li>
<li>Executors：工具类，线程池的工厂类，用于创建返回不同类型的线程池。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试线程池</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPool</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建服务，创建线程池</span></span><br><span class="line">        <span class="comment">//newFixedThreadPool  参数为：线程池大小</span></span><br><span class="line">        ExecutorService service = Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">        </span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        service.execute(<span class="keyword">new</span> MyThread());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.关闭连接</span></span><br><span class="line">        service.shutdown();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(Thread.currentThread().getName());</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//回顾总结线程的创建</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ThreadNew</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyThread1().start();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> MyThread2()).start();</span><br><span class="line">        </span><br><span class="line">        FutureTask futureTask = <span class="keyword">new</span> FutureTask(<span class="keyword">new</span> MyThread3());</span><br><span class="line">        <span class="keyword">new</span> Thread().start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//1.继承Thread类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread1</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyThread"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2.实现Runnable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread2</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyThread2"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//3.实现Callable接口</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread3</span> <span class="keyword">implements</span> <span class="title">Callable</span>&lt;<span class="title">Intrger</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Integer <span class="title">call</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"MyThread3"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/Mr-lee-MQ.hithub.io/2020/07/24/JavaScript/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript<a id="more"></a></h1><p>JavaScript是一门世界上最流行的脚本语言。</p>
<p>严格区分大小写。</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="引入JavaScript"><a href="#引入JavaScript" class="headerlink" title="引入JavaScript"></a>引入JavaScript</h3><ul>
<li>内部标签使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       alert(<span class="string">"Hello,JavaScript"</span>)</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>外部引入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">"Hello,JavaScript"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=<span class="string">"js.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="基本语法入门"><a href="#基本语法入门" class="headerlink" title="基本语法入门"></a>基本语法入门</h3><ul>
<li>定义变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">变量类型    变量名 = 变量值；</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>；</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"liminqiang"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>条件控制</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">2</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">alert(<span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注释</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*     */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打印变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(score)		&#x2F;*在浏览器的控制台打印变量相当于sout*&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li>控制台调试JavaScript<ul>
<li>Elements   :HTML和CSS代码</li>
<li>Console   :控制台（可写JavaScript代码）</li>
<li>Sources   :当前的源码目录<ul>
<li>打断点<ul>
<li>在Sources的源码中点击左侧行数即打断点，然后刷新页面</li>
<li>右上角上下箭头选择</li>
</ul>
</li>
</ul>
</li>
<li>Neteork :网络请求 </li>
<li>Application：相当于web里的数据库</li>
</ul>
</li>
</ul>
<h3 id="数据类型概述"><a href="#数据类型概述" class="headerlink" title="数据类型概述"></a>数据类型概述</h3><p>数值，文本，图形，音频，视频……</p>
<ul>
<li>number</li>
</ul>
<p>js不区分小数跟整数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span><span class="comment">//整数123</span></span><br><span class="line"><span class="number">123.3</span><span class="comment">// 浮点数123.3</span></span><br><span class="line"><span class="number">1.12e3</span><span class="comment">//科学计数法</span></span><br><span class="line"><span class="number">-99</span> <span class="comment">//复数</span></span><br><span class="line"><span class="literal">NaN</span>  <span class="comment">//not a number</span></span><br><span class="line"><span class="literal">Infinity</span>  <span class="comment">//表示无限大</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="string">"abc"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>布尔值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> </span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑运算</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;&amp; 两个都为真，结果为真</span><br><span class="line">||一个为真，结果为真</span><br><span class="line">!真既假，假即真</span><br></pre></td></tr></table></figure>

<ul>
<li>比较运算符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;   赋值</span><br><span class="line">&#x3D;&#x3D;   等于（类型不一样，值一样，也会判断为true）</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;   绝对等于（类型一样，值一样，则为true）</span><br></pre></td></tr></table></figure>

<p>特殊：NaN===NaN，NaN与所有值都不相等，包括自己。</p>
<p>​            只能通过isNaN(NaN)来判断这个数是否是NaN</p>
<p>浮点数问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>尽量避免使用浮点数进行运算，存在精度问题。</p>
<p>可用Math.abs解决</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">1</span>/<span class="number">3</span>-(<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>))&lt;<span class="number">0.00000001</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>null和undefined</p>
<ul>
<li>null空</li>
<li>undefined未定义</li>
</ul>
</li>
<li><p>数组</p>
</li>
</ul>
<p>Java中必须是一系列类型相同的对象,JS中不需要</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">"hello"</span>,<span class="literal">null</span>,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure>

<p>为保证代码的可读性数组尽量用[   ],对象则用{   }</p>
<p>取数组下标，如果越界，则为undefined。</p>
<ul>
<li>对象</li>
</ul>
<p>对象是大括号，数组是中括号。每个属性用逗号隔开，最后一个不用加。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">varperson=&#123;</span><br><span class="line">    </span><br><span class="line">    name:<span class="string">"limin"</span>,</span><br><span class="line">    age:<span class="number">14</span>,	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取对象的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">调用：person.name</span><br><span class="line">		limin</span><br></pre></td></tr></table></figure>

<p>严格检查模式   use strict</p>
<ul>
<li><p>放第一行。</p>
</li>
<li><p>预防JavaScript的随意性导致产生一些问题。</p>
</li>
<li><p>局部变量都用let去定义。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span> ;</span><br></pre></td></tr></table></figure>

<h2 id="数据类型详解"><a href="#数据类型详解" class="headerlink" title="数据类型详解"></a>数据类型详解</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li>正常的字符串我们用单引号，或双引号包裹</li>
<li>注意转义字符 \</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&#39;</span><br><span class="line">\n</span><br><span class="line">\t</span><br><span class="line">\u4e2d</span><br><span class="line">\u####</span><br><span class="line">unicode字符</span><br><span class="line">\x41   Ascll字符</span><br></pre></td></tr></table></figure>

<ul>
<li>多行字符串编写</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tab上面的  esc键下面</span></span><br><span class="line"><span class="keyword">var</span> msg=</span><br><span class="line">    <span class="string">`hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">你好呀</span></span><br><span class="line"><span class="string">你好</span></span><br></pre></td></tr></table></figure>

<ul>
<li>模板字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tab上面 esc下面</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"qinjiang"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`你好呀，<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串长度</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.length)</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串的可变性，不可变</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">console.log(student[<span class="number">0</span>])</span><br><span class="line">    s</span><br><span class="line">student[<span class="number">0</span>]= <span class="number">1</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">console.leg(student)</span><br><span class="line">    student</span><br></pre></td></tr></table></figure>

<ul>
<li>大小写转换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;注意，这里是方法，不是属性</span><br><span class="line">student.toUpperCase()</span><br><span class="line">student.toLowerCase()</span><br></pre></td></tr></table></figure>

<ul>
<li>student.indexOf(‘t’)    获取指令的下标</li>
<li>substring</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//包含前面，不包含后面</span></span><br><span class="line">student.substring(<span class="number">1</span>)  <span class="comment">//从第一个字符串截取到最后一个字符串</span></span><br><span class="line">student.substring(<span class="number">1</span>,<span class="number">3</span>)   <span class="comment">//[1)</span></span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Array可以包含任意的数据类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>长度</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr.length</span><br></pre></td></tr></table></figure>

<p>注意：假如给arr.length赋值，则数组大小就会发生变化。如果赋值过小，元素会丢失。</p>
<ul>
<li>indexOf   通过元素获得下标索引。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.indexOf(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>字符串的“1”和数字1是不同的</p>
<ul>
<li>slice（）截取Array的一部分，返回一个新数组，类似于String中的substring</li>
<li>push（） , pop（）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">push:  压入到尾部</span><br><span class="line">pop:  弹出尾部的一个元素</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.push(<span class="string">'a'</span>,<span class="string">'b'</span>)</span><br><span class="line">arr;</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">"a"</span>,<span class="string">"b"</span></span><br><span class="line"></span><br><span class="line">arr.pop()</span><br><span class="line">arr;</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">"a"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>unshift(),   shift()头部</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">unshift:  压入到头部</span><br><span class="line">shift:  弹出头部的一个元素</span><br></pre></td></tr></table></figure>

<ul>
<li>sort  排序        </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"A"</span>]</span><br><span class="line">arr.sort()</span><br><span class="line">(<span class="number">3</span>)[<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>reverse()     元素反转</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"A"</span>]</span><br><span class="line">arr.reverse()</span><br><span class="line">(<span class="number">3</span>)[<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>concat()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"A"</span>]</span><br><span class="line">arr.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">(<span class="number">6</span>)[<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr</span><br><span class="line">(<span class="number">3</span>)[<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>]</span><br></pre></td></tr></table></figure>

<p>注意：concat（）并没有修改数组，只是会返回了一个新的数组</p>
<ul>
<li>连接符   join</li>
</ul>
<p>打印拼接数组，使用特定的字符串连接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>]</span><br><span class="line">arr.join(<span class="string">'-'</span>)</span><br><span class="line"><span class="string">"C-B-A"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多维数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>][<span class="number">3</span>,<span class="number">4</span>][<span class="string">"5"</span>,<span class="string">"6"</span>]];</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>数组：存储数据（如何存，如何取，方法可以自己实现！）</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>若干个键值对</p>
<p>JavaScript中的所有的键都是字符串，值是任意对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名= &#123;</span><br><span class="line">    属性名：属性值，</span><br><span class="line">    属性名：属性值，</span><br><span class="line">    属性名：属性值</span><br><span class="line">&#125;</span><br><span class="line">定义了一个person对象，它有<span class="number">4</span>个属性</span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    name:<span class="string">"kuangshen"</span>,</span><br><span class="line">    age:<span class="number">3</span>,</span><br><span class="line">    email:<span class="string">"2285051311@qq.com"</span>,</span><br><span class="line">    score:<span class="number">0</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS中对象，{…..}表示一个对象，键值对描述属性XXX：XXXX，多个属性之间使用逗号隔开，最后一个属性不加逗号！</p>
<ul>
<li>对象赋值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.name = <span class="string">"qinjiang"</span></span><br><span class="line"><span class="string">"qinjiang"</span></span><br><span class="line">person.name</span><br><span class="line"><span class="string">"qinjiang"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用一个不存在的对象属性，不会报错！undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.haha</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>动态的删减属性，通过delete删除对象的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.name</span><br><span class="line">ture</span><br></pre></td></tr></table></figure>

<ul>
<li>动态的添加,直接给新的属性添加值即可</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.haha = <span class="string">"haha"</span></span><br><span class="line"><span class="string">"haha"</span></span><br><span class="line">person</span><br></pre></td></tr></table></figure>

<ul>
<li>判断属性值是否在这个对象中！XXX  in   XXX</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'age'</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="string">'toString'</span>  <span class="keyword">in</span>  person</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>判断一个属性是否是这个对象拥有的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.hasOwnProperty(<span class="string">'toString'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">person.hasOwnProperty(<span class="string">'age'</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul>
<li>if判断</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(age&gt;<span class="number">3</span>)&#123;</span><br><span class="line">    alert(<span class="string">"haha"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">"kuwa~"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>while循环，避免程序死循环</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(age&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    age = age +<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do  while 循环</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    age = age + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age)</span><br><span class="line">&#125;<span class="keyword">while</span>(age&lt;<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>for循环</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>forEach循环</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">123</span>];</span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line">age.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>))</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(value)</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>for…..in</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for(var index in object)&#123;&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> num <span class="keyword">in</span> age)&#123;</span><br><span class="line"><span class="keyword">if</span>(age.hasownProperty(num))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"存在"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(age[num])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h3><p>ES6的新特性</p>
<ul>
<li>Map</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="comment">//学生的成绩，学生的名字</span></span><br><span class="line"><span class="comment">//var names = ["tom","jack","haha"];</span></span><br><span class="line"><span class="comment">//var scores = [100,90,80];</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'tom'</span>,<span class="number">100</span>],[<span class="string">'jack'</span>,<span class="number">90</span>][<span class="string">'haha'</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map.get(<span class="string">'tom'</span>);</span><br><span class="line">map.get(<span class="string">'admin'</span>,<span class="number">123456</span>);</span><br><span class="line">map.delete(<span class="string">"tom"</span>);   <span class="comment">//删除</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Set：无序不重复的集合</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set可以去重 </span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set([3,1,1,1,]);</span><br><span class="line"><span class="keyword">set</span>.add(2);   //添加</span><br><span class="line"><span class="keyword">set</span>.delete(1);  //删除</span><br><span class="line">console.log(<span class="keyword">set</span>.has(3))   //是否包含某个元素</span><br></pre></td></tr></table></figure>

<h3 id="inerator"><a href="#inerator" class="headerlink" title="inerator"></a>inerator</h3><p>遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过for of /for  in   下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历Map</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"tom"</span>,<span class="number">100</span>],[<span class="string">"jack"</span>,<span class="number">90</span>],[<span class="string">"haha"</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历set</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set([5,6,7]);</span><br><span class="line">for (let x of <span class="keyword">set</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>绝对值函数</p>
<blockquote>
<p>定义方式一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">funstion abs(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦执行到return代表函数结束，返回结果。如果没有执行return，函数执行完也会返回结果，结果是undefined</p>
<blockquote>
<p>定义方式二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>function(x){……}这是一个匿名函数。但是可以把结果赋值给abs，通过abs就可以调用函数。</p>
<ul>
<li>调用函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abs(<span class="number">10</span>)</span><br><span class="line">abs(<span class="number">-10</span>)</span><br></pre></td></tr></table></figure>

<p>参数问题JS可以传任意个参数，也可以不传参数。</p>
<ul>
<li>假设不存在参数，如何规避？</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = funstion(x)&#123;</span><br><span class="line">    <span class="comment">//手动抛出异常判断</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> x !==<span class="string">'number'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'Not a number'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>argument</li>
</ul>
<p>argument是Js的关键字，代表传递进来的所有参数，是一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = funstion(x)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"X=&gt;"</span>+x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;argument.length;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(argument[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：argument包含所有的参数，我们有时候想使用多余的参数来进行附加操作。需要排除已有的参数。</p>
<ul>
<li>rest</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(argument.length&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>;i&lt;armument.length;i++)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6引入的新特性，获取除了已经定义的参数之外的所有参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">funstion aaa(a,b,.....rest)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a=&gt;"</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b=&gt;"</span>+b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rest 参数只能写在最后面，必须用…..标识。</p>
<h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>在Java Script中，var定义变量实际是有作用域的。</p>
<p>假设在函数体中声明，则在函数体外不可以使用（闭包）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = x + <span class="number">2</span>;</span><br></pre></td></tr></table></figure>



<p>如果两个函数使用了相同的变量名，只要在函数内部，就不冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">'A'</span>;</span><br><span class="line">    x = x + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>内部函数可以访问外部函数的成员，反之则不行。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">funstion qj()&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = x + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> z = y + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>假设，内部函数变量和外部函数变量重名</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'inner'</span>+ x );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'outter'</span> + X );</span><br><span class="line">    qj2()</span><br><span class="line">&#125;</span><br><span class="line">qj()</span><br></pre></td></tr></table></figure>

<p>假设JavaScript中函数查找变量从自身函数开始，由内向外查找，假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数的变量。</p>
<blockquote>
<p>提升变量的作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">"x"</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：xundefined</span></span><br><span class="line">说明JS执行引擎，自动提升了y的声明，但不会提升变量y的赋值</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">"x"</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    y = <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//即所有的变量定义都放在函数的头部</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>全局函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure>

<p>全局对象    window</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'xxx'</span>;</span><br><span class="line">alret(x);</span><br><span class="line">zlert(<span class="built_in">window</span>.x);</span><br></pre></td></tr></table></figure>

<p>alert()本身也是window的一个变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vsar x = <span class="string">'xxx'</span>;</span><br><span class="line"><span class="built_in">window</span>.alert(x);</span><br><span class="line"><span class="keyword">var</span> old_alert = <span class="built_in">window</span>.alert;</span><br><span class="line"><span class="comment">//old_alert</span></span><br><span class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发现alert()失效了。</span></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="built_in">window</span>.alert = old_alert;</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">456</span>);</span><br></pre></td></tr></table></figure>

<p>JavaScript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数的作用范围内找到，就会向外查找，如果在全局作用域都没有找到，报错（ReferenceError）引用异常.</p>
<blockquote>
<p>规范</p>
</blockquote>
<p>由于我们所有的全局变量都会绑在我们的window上，如果不停的JS文件，使用了相同的全局变量，冲突—&gt;如何减少冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> KuangApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">KuangApp.name = <span class="string">'kuangshen'</span>;</span><br><span class="line">KuangApp.add = <span class="function"><span class="keyword">function</span>(<span class="params"> a , b </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把自己的代码全部放到自己定义的唯一空间名字中，降低全局冲突的问题</p>
<ul>
<li>局部定义域  let</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i) </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(i + <span class="number">1</span>)</span><br><span class="line">&#125;                <span class="comment">//i出了作用域还可以使用</span></span><br></pre></td></tr></table></figure>

<p>ES6 let关键字，解决局部作用域冲突问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i) </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>常量 const</li>
</ul>
<p>在ES6之前，怎么定义常量：只有用全部大写字母命名的变量就是常量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> PI = <span class="string">'3.14'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br><span class="line">PI = <span class="string">'213'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br></pre></td></tr></table></figure>

<p>在ES6引用关键字   const   </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">'3.14'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br><span class="line">PI = <span class="string">'213'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li>定义方法：方法就是把函数放在对象里面，对象只有两个东西：属性和方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">    name:<span class="string">'秦疆'</span>；</span><br><span class="line">    birth: <span class="number">2000</span>;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//今年-出生的年</span></span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="keyword">this</span>.birth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    kuangshen.name</span><br><span class="line">	<span class="comment">//方法，一定带括号()</span></span><br><span class="line">	kuangshen.age()</span><br></pre></td></tr></table></figure>

<p>this代表什么？拆开上面的代码看看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//今年-出生的年</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="keyword">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">        name:<span class="string">'秦疆'</span>，</span><br><span class="line">        birth:<span class="number">2000</span>,</span><br><span class="line">        age:getAge</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用kuangshen.age()   ok</span></span><br><span class="line">    <span class="comment">//getAge() NaN</span></span><br></pre></td></tr></table></figure>

<p>this 是无法指向的，是默认指向调用它的那个对象；</p>
<ul>
<li>apply</li>
</ul>
<p>在JS中可以控制this的指向</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//今年-出生的年</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="keyword">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">        name:<span class="string">'秦疆'</span>，</span><br><span class="line">        birth:<span class="number">2000</span>,</span><br><span class="line">        age:getAge</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getAge.apply(kuangshen,[]);</span><br><span class="line"><span class="comment">//this.指向了kuangshen. 参数为空</span></span><br></pre></td></tr></table></figure>

<h2 id="内部对象"><a href="#内部对象" class="headerlink" title="内部对象"></a>内部对象</h2><ul>
<li>标准对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span></span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'123'</span></span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"boolean"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span></span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>.abs</span><br><span class="line"><span class="string">"function"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Date</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.getFullYear();<span class="comment">//年</span></span><br><span class="line">now.getMonth();<span class="comment">//月</span></span><br><span class="line">now.getDate();<span class="comment">//日</span></span><br><span class="line">now.getDay();<span class="comment">//星期几</span></span><br><span class="line">now.getHours();<span class="comment">//时</span></span><br><span class="line">now.getMinutes();<span class="comment">//分</span></span><br><span class="line">now.getSeconds();<span class="comment">//秒</span></span><br><span class="line"></span><br><span class="line">now.getTime();<span class="comment">//时间戳</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul>
<li>定义：<ul>
<li><a href="https://baike.baidu.com/item/JSON" target="_blank" rel="noopener">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。</li>
<li>简洁和清晰的<strong>层次结构</strong>使得 JSON 成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
</li>
</ul>
<p>在JavaScript一切皆为对象，任何JS支持的类型都可以用JSON来表示。</p>
<p>格式：</p>
<ul>
<li>对象都用{}</li>
<li>数组都用[]</li>
<li>所有的键值对都用keyy:value</li>
</ul>
<p>JSON字符串和JS对象的转化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name:<span class="string">"qinjiang"</span>,</span><br><span class="line">    age:<span class="number">3</span>,</span><br><span class="line">    sex:<span class="string">'男'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对象转化为json字符串&#123;"name":"qinjiang","age":3,"sex":"男"&#125;</span></span><br><span class="line">    <span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line">	<span class="comment">//json字符串转化为对象，参数为json字符串</span></span><br><span class="line">	<span class="keyword">var</span> obj = 						      						<span class="built_in">JSON</span>.parse(<span class="string">'&#123;"name":"qinjiang","age":3,"sex":"男"&#125;'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Ajax简述"><a href="#Ajax简述" class="headerlink" title="Ajax简述"></a>Ajax简述</h3><ul>
<li>原生的js写法   xhr异步请求</li>
<li>jQury封装好的方法    $(“#name”)ajax(“”)</li>
<li>axios请求</li>
</ul>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><ul>
<li><p>类：一个模板     (原型对象)</p>
</li>
<li><p>对象：具体的实例</p>
</li>
</ul>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> Student = &#123;</span><br><span class="line">        name:<span class="string">"qinjiang"</span>,</span><br><span class="line">        age: <span class="number">3</span>,</span><br><span class="line">        run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"run...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">	<span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">        name:<span class="string">"xiaoming"</span></span><br><span class="line">    &#125;;</span><br><span class="line">	<span class="keyword">var</span> Bird = &#123;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//小明的原型是Student</span></span><br><span class="line">    xiaoming._proto_ = Student;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Class继承"><a href="#Class继承" class="headerlink" title="Class继承"></a>Class继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给student新增一个方法</span></span><br><span class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    slert(<span class="string">'Hello'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//ES6之后</span></span><br><span class="line"><span class="comment">//定义一个学生的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;	</span><br><span class="line">	hello()&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>继承</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    slert(<span class="string">'Hello'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;	</span><br><span class="line">	hello()&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xiaostudent</span> <span class="title">extend</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,grade)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    myGrade()&#123;</span><br><span class="line">        alert(<span class="string">'我是一名小学生'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> student(<span class="string">"xiaoming"</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Xiaostudent(<span class="string">"xiaohong"</span>,<span class="number">1</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>本质：查看对象原型</p>
<h2 id="操作BOM对象"><a href="#操作BOM对象" class="headerlink" title="操作BOM对象"></a>操作BOM对象</h2><p>JavaScript和浏览器的关系？</p>
<p>JavaScript诞生就是为了能够让他在浏览器中运行</p>
<p>BOM：浏览器对象模型</p>
<ul>
<li>IE6~11</li>
<li>Chrome</li>
<li>Safari</li>
<li>FireFox</li>
</ul>
<blockquote>
<p>window</p>
</blockquote>
<p>window 代表 浏览器窗口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight	<span class="comment">//内部高度</span></span><br><span class="line"><span class="number">258</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth	<span class="comment">//内部宽度</span></span><br><span class="line"><span class="number">919</span></span><br><span class="line"><span class="built_in">window</span>.outerHeight	<span class="comment">//外部高度</span></span><br><span class="line"><span class="number">325</span></span><br><span class="line"><span class="built_in">window</span>.outerrWidth	<span class="comment">//外部宽度</span></span><br><span class="line"><span class="number">919</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Navigator</p>
</blockquote>
<p>Navigator,封装了浏览器的信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.appName    <span class="comment">//浏览器名称</span></span><br><span class="line">navigator.appVersion    <span class="comment">//版本号</span></span><br><span class="line">navigator.userAgent    <span class="comment">//用户信息</span></span><br><span class="line">navigator.platform    <span class="comment">//系统版本</span></span><br></pre></td></tr></table></figure>

<p>大多数时候不使用navigator对象，因为可能会被人为修改。不建议使用这些属性来判断和编写代码。</p>
<blockquote>
<p>screen</p>
</blockquote>
<p>屏幕尺寸</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line"><span class="number">1920</span></span><br><span class="line">screen.height</span><br><span class="line"><span class="number">1080</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>location</p>
</blockquote>
<p>location代表当前页面的URL信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">host:<span class="string">"www.baidu.com"</span></span><br><span class="line">href:<span class="string">"https://www.baidu.com/"</span></span><br><span class="line">protocol:<span class="string">"https:"</span></span><br><span class="line">reload:f reload()<span class="comment">//刷新网页</span></span><br><span class="line">location.assign(<span class="string">"https://blog.kuangstudy.com/"</span>)设置新的地址</span><br></pre></td></tr></table></figure>

<blockquote>
<p>document （文本内容）</p>
</blockquote>
<p>document代表当前的页面，HTML DOM文档树</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.title</span><br><span class="line"><span class="string">"百度一下，你就知道"</span></span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">'狂神说'</span></span><br><span class="line"><span class="string">"狂神说"</span></span><br></pre></td></tr></table></figure>

<p>获取具体的文档数节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">	&lt;dt&gt;Java&lt;&#x2F;dt&gt;</span><br><span class="line">	&lt;dt&gt;JavaSE&lt;&#x2F;dt&gt;</span><br><span class="line">	&lt;dt&gt;JavaEE&lt;&#x2F;dt&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	var dl &#x3D; document.getElementById(&#39;app&#39;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>获取cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie</span><br></pre></td></tr></table></figure>

<p>劫持cookie原理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src = <span class="string">"aa.js"</span>&gt;&lt;<span class="regexp">/stript&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--恶意人员：获取你的cooike上传到他的服务器 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务端可以设置 cooike为httpOnly</p>
<blockquote>
<p>history</p>
</blockquote>
<p>history代表浏览器的历史记录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.back()  <span class="comment">//后退</span></span><br><span class="line">history.forward()  <span class="comment">//前进</span></span><br></pre></td></tr></table></figure>

<h2 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h2><p>DOM：文本对象模型</p>
<p>核心：</p>
<ul>
<li>更新：更新    Dom节点</li>
<li>遍历Dom节点：得到Dom节点</li>
<li>删除：删除一个Dom节点</li>
<li>添加：添加一个新的节点</li>
</ul>
<p>要操作一个Dom节点，就必须要先获得这个Dom节点</p>
<blockquote>
<p>获得Dom节点</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;标题一&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;p id = "p1"&gt;p1&lt;/</span>p&gt;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span> </span>= <span class="string">"p2"</span>&gt;p2&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/获得dom节点   标签</span></span><br><span class="line"><span class="regexp">var h1 = document.getElementsByTagName('h1')</span></span><br><span class="line"><span class="regexp">var p1 = document.getElementsById('p1')</span></span><br><span class="line"><span class="regexp">var p2 = document.getElementsByClassName('h1')</span></span><br></pre></td></tr></table></figure>

<p>这是原生代码，之后一般会使用JQuery</p>
<blockquote>
<p>更新节点</p>
</blockquote>
<p>操作文本</p>
<ul>
<li>innerText 修改文本值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.innerText = <span class="string">'456'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以解析HTML文本标签</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.innrtHTML = <span class="string">'&lt;strong&gt;123&lt;/strong&gt;'</span></span><br></pre></td></tr></table></figure>

<p>操作JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.style.color = <span class="string">'yellow'</span>;</span><br><span class="line">id1.style.fontSize = <span class="string">'20px'</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除节点</p>
</blockquote>
<p>删除节点的步骤：先获取父节点，在通过父节点删除自己</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id =<span class="string">"father"</span>&gt;</span><br><span class="line">	&lt;h1&gt;标题一&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">	&lt;p id = "p1"&gt;p1&lt;/</span>p&gt;</span><br><span class="line">	&lt;p <span class="class"><span class="keyword">class</span> </span>= <span class="string">"p2"</span>&gt;p2&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">father.removeChild(p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除是一个动态的过程</span></span><br><span class="line">father.removeChild(father.children[<span class="number">0</span>])</span><br><span class="line">father.removeChild(father.children[<span class="number">1</span>])</span><br><span class="line">father.removeChild(father.children[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>注意：删除多个节点的时候，children是在时刻变化的，删除节点的时候一定要注意</p>
<blockquote>
<p>插入节点</p>
</blockquote>
<p>我们获得了某个DOM节点，假设这个DOM节点是空的，我们通过innerHTML就可以增加一个元素，但是这个DOM节点已经存在元素了，就不能这么做了，会产生覆盖。</p>
<ul>
<li>追加    appendChild</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p id = <span class="string">'js'</span>&gt;JavaScript&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id = 'list'&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p id = "se"&gt;JavaSE&lt;/</span>p&gt;</span><br><span class="line">	&lt;p id = <span class="string">"ee"</span>&gt;JavaEE&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">	&lt;p id = "me"&gt;JavaME&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var js = docoment.getElmentById('js');</span></span><br><span class="line"><span class="regexp">		var list = docoment.getElmentById('list');</span></span><br><span class="line"><span class="regexp">		list.appendChild(js);/</span><span class="regexp">/追加到后面</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个新的标签,实现插入    document.createElement</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">'js'</span>);   <span class="comment">//已经存在的节点</span></span><br><span class="line">	<span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="comment">// 通过JS创建一个新的节点</span></span><br><span class="line">	<span class="keyword">var</span> newP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);<span class="comment">//创建一个P标签</span></span><br><span class="line">	newP.id = <span class="string">'newP'</span>;</span><br><span class="line">	newP.innerText = <span class="string">'Helllo,kuangshen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个标签节点</span></span><br><span class="line">	<span class="keyword">var</span> myScript = <span class="built_in">document</span>.creatElement(<span class="string">'script'</span>);</span><br><span class="line">	myScript.setAttribute(<span class="string">'type'</span>,<span class="string">'text/css'</span>);</span><br><span class="line"><span class="comment">//可以创建一个style标签</span></span><br><span class="line"><span class="keyword">var</span> myStyle = <span class="built_in">document</span>.creatElement(<span class="string">'style'</span>);<span class="comment">//创建了一个空style</span></span><br><span class="line">myStyle.setAttribute(<span class="string">'type'</span>,<span class="string">'text/css'</span>);</span><br><span class="line">myStyle.innerHTML = <span class="string">'body&#123;background-color;chartreuse;&#125;'</span>;<span class="comment">//设置标签内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appengchild(myStyle)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="操作表单（验证）"><a href="#操作表单（验证）" class="headerlink" title="操作表单（验证）"></a>操作表单（验证）</h2><blockquote>
<p>表单是什么     form  DOM树</p>
</blockquote>
<ul>
<li>文本框    text</li>
<li>下拉框     select</li>
<li>单选框      radio</li>
<li>多选框      checkbox</li>
<li>隐藏域      hidden</li>
<li>密码框      password</li>
<li>……….</li>
</ul>
<p>表单的目的：提交信息</p>
<blockquote>
<p>获得要提交的信息</p>
</blockquote>
<ul>
<li>得到输入框的值      input_text.value</li>
<li>修改输入框的值       input_text.value = ‘123’</li>
<li>对于单选框，多选框等等固定的值，boy_radio.value只能取到当前的值，</li>
<li>查看返回的结果       boy_radio.checked;      </li>
</ul>
<p>提交表单</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    	&lt;span&gt;用户名：&lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">	&lt;p&gt;</span><br><span class="line">    	&lt;span&gt;密码：&lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="comment">//绑定事件   onclick  被点击</span></span><br><span class="line">	&lt;button type=<span class="string">"button"</span> onclick=<span class="string">"aaa()"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><p>JavaScript</p>
<p>JQuery库，里面存在大量的javascript函数</p>
<blockquote>
<p>获取JQuery</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>= <span class="string">"&lt;script src="</span><span class="attr">http:</span>//<span class="attr">code.jquery.com</span>/<span class="attr">jquery-migrate-1.2.1.min.js</span>"&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"&gt;</span><br></pre></td></tr></table></figure>

<p>公式：</p>
<p>$(selector   选择器).action()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">两种方法</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">""</span> id=<span class="string">"test-jquery"</span>&gt;点我&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    document.getElementById('id');</span></span><br><span class="line"><span class="regexp">	</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/选择器就是CSS选择器</span></span><br><span class="line"><span class="regexp">$('#text-jquery').click(function()&#123;</span></span><br><span class="line"><span class="regexp">    alert('hello,jquery');</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>

<p>选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//原生JS，选择器少，麻烦不好记</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//标签</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName();</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//id</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">document</span>.getElementsById();</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//类</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">document</span>.getElementsByClassName();</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="actionscript">  <span class="comment">//JQuery  css  中的选择器他全部都能用</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'p'</span>).click();<span class="comment">//标签选择器</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#id1'</span>).click();<span class="comment">//id选择器</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.class'</span>).click();<span class="comment">//class选择器</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文档工具站：<a href="https://jquery.cuishifeng.cn/" target="_blank" rel="noopener">https://jquery.cuishifeng.cn/</a></p>
<blockquote>
<p>事件</p>
</blockquote>
<ul>
<li>鼠标事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按下</span></span><br><span class="line">mousedown()(JQuery)</span><br><span class="line"><span class="comment">//离开</span></span><br><span class="line">mouseleave()(JQuery)</span><br><span class="line"><span class="comment">//移动</span></span><br><span class="line">mousemove()(JQuery)</span><br><span class="line"><span class="comment">//点击结束</span></span><br><span class="line">mouseover()(JQuery)</span><br></pre></td></tr></table></figure>



<ul>
<li>键盘事件</li>
<li>其他事件</li>
</ul>
<h3 id="操作DOM元素"><a href="#操作DOM元素" class="headerlink" title="操作DOM元素"></a>操作DOM元素</h3><p>节点文本操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).text();<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">'#test-ul li[name-python]'</span>).text(<span class="string">'设置值'</span>)；<span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">'#test-ul'</span>).html();  <span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">'#test-ul'</span>).html(<span class="string">'设置值'</span>)  <span class="comment">//设置值</span></span><br></pre></td></tr></table></figure>

<p>CSS的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).css(&#123;<span class="string">"color"</span>,<span class="string">"red"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>元素的显示和隐藏：本质 display:none</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).show()</span><br><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).hide()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaWeb</title>
    <url>/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/</url>
    <content><![CDATA[<h1 id="JavaWeb"><a href="#JavaWeb" class="headerlink" title="JavaWeb"></a>JavaWeb<a id="more"></a></h1><h2 id="1、基本概念"><a href="#1、基本概念" class="headerlink" title="1、基本概念"></a>1、基本概念</h2><h3 id="1-1、-前言"><a href="#1-1、-前言" class="headerlink" title="1.1、 前言"></a>1.1、 前言</h3><ul>
<li>web开发，网页的意思</li>
<li>静态web<ul>
<li>html，css</li>
<li>提供给所有人看的数据始终不会变化</li>
</ul>
</li>
<li>动态web<ul>
<li>淘宝，几乎所有的网站</li>
<li>提供给所有人看的数据始终会发生变化，每个人在不同的时间，不同的地点看到的信息各不相同</li>
<li>技术栈：Servlt/JSP，ASP，PHP</li>
</ul>
</li>
</ul>
<p>在java中，动态web资源开发的技术统称为javaWeb</p>
<h3 id="1-2、web应用程序"><a href="#1-2、web应用程序" class="headerlink" title="1.2、web应用程序"></a>1.2、web应用程序</h3><p>web应用程序：可以提供浏览器访问的程序。</p>
<ul>
<li><p>a.html，b.html….多个web资源可以被外界访问，对外界提供服务。</p>
</li>
<li><p>你们能访问到的任何一个页面和资源，都存在与这个世界上的某一台计算机上。</p>
</li>
<li><p>URL：统一资源定位符</p>
</li>
<li><p>这个统一的web资源会被放在同一个文件夹下。</p>
</li>
<li><p>一个web应用由多部分组成(静态web，动态web)</p>
<ul>
<li>html，css，js</li>
<li>jsp，servlet</li>
<li>java程序</li>
<li>jar包</li>
<li>配置文件（Properties）</li>
</ul>
</li>
</ul>
<p>web应用程序编写完毕后，若想提供给外界访问：需要一个服务器来统一管理。</p>
<h3 id="1-3、静态web"><a href="#1-3、静态web" class="headerlink" title="1.3、静态web"></a>1.3、静态web</h3><ul>
<li>*.html,这些都是网页的后缀，如果服务器上一直存在这些东西，我们就可以直接进行读取。</li>
<li>静态web存在的缺点<ul>
<li>web页面动态无法更新，所有用户看到的是同一个页面<ul>
<li>轮播图，点击特效：伪动态</li>
<li>Javascript[实际开发中，他用的最多]</li>
<li>VBScript</li>
</ul>
</li>
<li>他无法和数据库交互(数据无法持久化，用户无法交互)</li>
</ul>
</li>
</ul>
<h3 id="1-4、动态web"><a href="#1-4、动态web" class="headerlink" title="1.4、动态web"></a>1.4、动态web</h3><p>页面会动态展示：web的页面展示的效果因人而异。</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201107161657089.png" alt="image-20201107161657089"></p>
<p>缺点：</p>
<ul>
<li>加入服务器的动态web资源出现了错误，我们需要重新编写我们的后台程序，重新发布<ul>
<li>停机维护</li>
</ul>
</li>
</ul>
<p>优点：</p>
<ul>
<li>Web页面可以动态更新，所有的用户看到都不是同一个页面。</li>
<li>他可以与数据库交互（数据持久化：注册，商品信息）</li>
</ul>
<h2 id="2、Web服务器"><a href="#2、Web服务器" class="headerlink" title="2、Web服务器"></a>2、Web服务器</h2><h3 id="2-1、技术讲解"><a href="#2-1、技术讲解" class="headerlink" title="2.1、技术讲解"></a>2.1、技术讲解</h3><p><strong>ASP</strong></p>
<ul>
<li>微软：国内最早流行的就是ASP</li>
<li>在html中嵌入了VB的脚本，ASP+COM</li>
<li>在ASP开发中，基本一个页面都有几千行的业务代码，页面极其混乱</li>
<li>维护成本高</li>
<li>C#</li>
</ul>
<p><strong>PHP</strong></p>
<ul>
<li>PHP开发速度很快，功能很强大，跨平台，代码简单</li>
<li>无法承载大访问量的情况（局限性）</li>
</ul>
<p><strong>JSP/Servlet</strong></p>
<p>B/S:浏览器和服务器</p>
<p>C/S：客户端和服务器</p>
<ul>
<li>sun公司主推的B/S架构</li>
<li>基于Java语言的（所有大公司，或者一些开源的组件，都是用Java写的）</li>
<li>可以承载三高问题带来的影响</li>
</ul>
<h3 id="2-2、web服务器"><a href="#2-2、web服务器" class="headerlink" title="2.2、web服务器"></a>2.2、web服务器</h3><p>服务器是一种被动的操作，用来处理用户的请求和用户的一些响应信息</p>
<p><strong>IIS</strong></p>
<p>微软的：ASP…..Windows中自带。</p>
<p><strong>Tomcat</strong></p>
<p>下载tomcat：</p>
<p>1.安装或解压</p>
<p>2.了解配置文件及目录结构</p>
<p>3.了解tomcat的作用</p>
<h2 id="3、Tomcat"><a href="#3、Tomcat" class="headerlink" title="3、Tomcat"></a>3、Tomcat</h2><h3 id="3-1、安装tomcat"><a href="#3-1、安装tomcat" class="headerlink" title="3.1、安装tomcat"></a>3.1、安装tomcat</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201107165304701.png" alt="image-20201107165304701"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201107165406879.png" alt="image-20201107165406879"></p>
<h3 id="3-2、Tomcat启动和配置"><a href="#3-2、Tomcat启动和配置" class="headerlink" title="3.2、Tomcat启动和配置"></a>3.2、Tomcat启动和配置</h3><p>文件夹作用：</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201107165803596.png" alt="image-20201107165803596"></p>
<p><strong>启动。关闭Tomcat</strong></p>
<p>bin目录下：startup 开启。shutdown：关闭</p>
<p>可能遇到的问题：</p>
<ul>
<li>java环境变量没有配置</li>
<li>闪退问题：需要配置兼容性</li>
<li>乱码问题</li>
</ul>
<h3 id="3-3、配置"><a href="#3-3、配置" class="headerlink" title="3.3、配置"></a>3.3、配置</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201107171644336.png" alt="image-20201107171644336"></p>
<p>可以配置启动的端口号</p>
<ul>
<li>tomcat的默认端口号为：8080</li>
<li>mysql：3306</li>
<li>http：80</li>
<li>https：443</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Connector</span> <span class="attr">port</span>=<span class="string">"8080"</span> <span class="attr">protocol</span>=<span class="string">"HTTP/1.1"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">connectionTimeout</span>=<span class="string">"20000"</span></span></span><br><span class="line"><span class="tag">           <span class="attr">redirectPort</span>=<span class="string">"8443"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>可以配置主机的名称</p>
<ul>
<li>默认的主机名为：localhost</li>
<li>默认网站应用存放的位置：webapps</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Host</span> <span class="attr">name</span>=<span class="string">"www.qinjiang.com"</span> <span class="attr">appBass</span>=<span class="string">"webapps"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">unpackWARs</span>=<span class="string">"true"</span> <span class="attr">autoDeploy</span>=<span class="string">"ture"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>高难度面试题</strong></p>
<p>请你谈谈网站是如何进行访问的</p>
<ul>
<li><p>输入一个域名：回车</p>
</li>
<li><p>检查本机的hosts配置文件下有没有这个域名的映射</p>
<ul>
<li>有，直接返回对应的ip地址，这个地址中有我们要访问的web程序</li>
<li>没有，去DNS服务器找，找到的话就返回，找不到就返回找不到</li>
</ul>
</li>
<li><p>可以配置一下环境变量</p>
</li>
</ul>
<h3 id="3-4、发布一个web网站"><a href="#3-4、发布一个web网站" class="headerlink" title="3.4、发布一个web网站"></a>3.4、发布一个web网站</h3><p>不会就先模仿</p>
<ul>
<li>将自己写的网站，放到服务器（Tomcat）中指定的web应用文件夹下（webapps）下，就可以访问了。</li>
</ul>
<p>网站应该有的结构</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">--webapps:Tomcat服务器的web目录</span><br><span class="line">    -ROOT</span><br><span class="line">    -kuangstudy:网站的目录名</span><br><span class="line">        -WEB-INF</span><br><span class="line">        	-class:java程序</span><br><span class="line">            -lib:web应用所依赖的jar包</span><br><span class="line">            -web.xml:网站的配置文件</span><br><span class="line">        -index.html默认的首页</span><br><span class="line">        -<span class="keyword">static</span></span><br><span class="line">            -css</span><br><span class="line">                -style.css</span><br><span class="line">            -js</span><br><span class="line">            -img</span><br></pre></td></tr></table></figure>

<p>HTTP协议：面试</p>
<p>Maven：构建工具</p>
<ul>
<li>Maven安装包</li>
</ul>
<p>Servlet入门</p>
<ul>
<li>HelloWorld</li>
<li>Servlet配置</li>
<li>原理</li>
</ul>
<h2 id="4、HTTP"><a href="#4、HTTP" class="headerlink" title="4、HTTP"></a>4、HTTP</h2><h3 id="4-1、什么是HTTP"><a href="#4-1、什么是HTTP" class="headerlink" title="4.1、什么是HTTP"></a>4.1、什么是HTTP</h3><p>​     HTTP（超文本传输协议）是一个简单的请求响应协议，它通常运行在TCP之上。</p>
<ul>
<li>文本：html，字符串。</li>
<li>超文本：图片，音乐，视频….</li>
<li>端口80</li>
</ul>
<p>HTTPS：安全的</p>
<ul>
<li>443</li>
</ul>
<h3 id="4-2、两个时代"><a href="#4-2、两个时代" class="headerlink" title="4.2、两个时代"></a>4.2、两个时代</h3><ul>
<li>http1.0<ul>
<li>HTTP/1.0：客户端可以与web服务器连接后，只能获得一个web资源，断开连接。</li>
</ul>
</li>
<li>http2.0<ul>
<li>HTTP/1.1：客户端可以与web服务器连接后，可以获得多个web资源。</li>
</ul>
</li>
</ul>
<h3 id="4-3、Http请求"><a href="#4-3、Http请求" class="headerlink" title="4.3、Http请求"></a>4.3、Http请求</h3><ul>
<li>客户端–发请求–</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Ruquest URL:https:<span class="comment">//www.baidu.com/   请求地址</span></span><br><span class="line">Request Method:GET        get方法/post方法</span><br><span class="line">Status Code:<span class="number">200</span>  ok    状态码:<span class="number">200</span></span><br><span class="line">Remote(远程) Address:<span class="number">14.215</span><span class="number">.177</span><span class="number">.39</span>:<span class="number">443</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accept:text/html</span><br><span class="line">Accpet-Encoding:gzip,deflate, br</span><br><span class="line">Accpet-Language:zh-CN,zh;q=<span class="number">0.9</span>    语言</span><br><span class="line">Cache-Control:max-age=<span class="number">0</span></span><br><span class="line">Connection:keep-alive</span><br></pre></td></tr></table></figure>

<p><strong>请求行</strong></p>
<ul>
<li>请求行中的请求方式：GET</li>
<li>请求方式：Get，Post，HEAD，DELETE，PUT，TRACT….<ul>
<li>get：请求能够携带的参数比较少，大小有限制，会在浏览器的URL地址栏显示数据内容，不安全，但高效</li>
<li>post：请求能携带的参数没有限制，大小没有限制，不会再浏览器的URL地址栏显示数据内容，安全，但不高效</li>
</ul>
</li>
</ul>
<p><strong>消息头</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accpt:告诉浏览器，他所支持的数局类型</span><br><span class="line">Accpt-Encoding:支持哪种编码格式    GBK UTF-<span class="number">8</span> GB2312 Iso8859-<span class="number">1</span></span><br><span class="line">Accpt-Language:告诉浏览器，他的语言环境</span><br><span class="line">Cache-Control:缓存控制</span><br><span class="line">Connertion:告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST:主机</span><br></pre></td></tr></table></figure>



<h3 id="4-4、Http响应"><a href="#4-4、Http响应" class="headerlink" title="4.4、Http响应"></a>4.4、Http响应</h3><ul>
<li>服务器—响应—客户端</li>
</ul>
<p>百度：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cache-Control:<span class="keyword">private</span>     缓存控制</span><br><span class="line">Connection:keep-Alive     连续</span><br><span class="line">Content-Encoding:gzip     编码</span><br><span class="line">Content-Type:text/html    类型</span><br></pre></td></tr></table></figure>

<p><strong>响应体</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Accpt:告诉浏览器，他所支持的数局类型</span><br><span class="line">Accpt-Encoding:支持哪种编码格式    GBK UTF-<span class="number">8</span> GB2312 Iso8859-<span class="number">1</span></span><br><span class="line">Accpt-Language:告诉浏览器，他的语言环境</span><br><span class="line">Cache-Control:缓存控制</span><br><span class="line">Connertion:告诉浏览器，请求完成是断开还是保持连接</span><br><span class="line">HOST:主机</span><br><span class="line"></span><br><span class="line">Refrush:告诉客户端刷新频率</span><br><span class="line">Location:让网页重新定位</span><br></pre></td></tr></table></figure>

<p><strong>响应状态码</strong></p>
<p>200：请求响应成功</p>
<p>3XX：请求重定向</p>
<ul>
<li>重定向：你重新到我给你的新位置</li>
</ul>
<p>4XX：找不到资源   404</p>
<ul>
<li>资源不存在</li>
</ul>
<p>5XX：服务器代码错误    500          502：网关错误</p>
<p><strong>常见面试题</strong></p>
<p>当你的浏览器中地址栏输入地址并回车的一瞬间到页面能够展示回来，经历了什么？</p>
<h2 id="5、Maven"><a href="#5、Maven" class="headerlink" title="5、Maven"></a>5、Maven</h2><p><strong>为什么要学习这个技术？</strong></p>
<p>1.在Javaweb开发中，需要使用大量的Jar包，我们手动去导入</p>
<p>2.如何能够让一个东西自动帮我导入和配置这个jar包。</p>
<p>​    由此Maven诞生了</p>
<h3 id="5-1、Maven项目架构管理工具"><a href="#5-1、Maven项目架构管理工具" class="headerlink" title="5.1、Maven项目架构管理工具"></a>5.1、Maven项目架构管理工具</h3><p>我们目前用来就是方便导入jar包的！</p>
<p>Maven的核心思想：约定大于配置</p>
<ul>
<li>有约束，不要去违反</li>
</ul>
<p>Maven会规定好你该如何去编写我们的Java代码，必须按规定来</p>
<h3 id="5-2、下载安装Maven"><a href="#5-2、下载安装Maven" class="headerlink" title="5.2、下载安装Maven"></a>5.2、下载安装Maven</h3><p>官网：<a href="https://maven.apache.org/" target="_blank" rel="noopener">https://maven.apache.org/</a></p>
<p>下载完成后，解压即可</p>
<h3 id="5-3、配置环境变量"><a href="#5-3、配置环境变量" class="headerlink" title="5.3、配置环境变量"></a>5.3、配置环境变量</h3><p>在我们的系统环境中</p>
<p>配置如下配置</p>
<ul>
<li>M2_HOME      maven目录下的bin目录</li>
<li>MAVEN_HOME    maven的目录</li>
<li>在系统的path中配置%MAVEN_HOME%\bin</li>
</ul>
<p>测试Maven是否安装成功，保证必须配置完毕</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">mvn -version</span><br></pre></td></tr></table></figure>

<h3 id="5-4、阿里云镜像"><a href="#5-4、阿里云镜像" class="headerlink" title="5.4、阿里云镜像"></a>5.4、阿里云镜像</h3><ul>
<li>镜像：mirrors<ul>
<li>作用：加速我们的下载</li>
</ul>
</li>
<li>国内建议使用阿里云的镜像</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrorof</span>&gt;</span>*,!jeecg,!jeecg-snapshots<span class="tag">&lt;/<span class="name">mirrorof</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span> Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">	</span><br><span class="line"><span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-5、本地仓库"><a href="#5-5、本地仓库" class="headerlink" title="5.5、本地仓库"></a>5.5、本地仓库</h3><p><strong>建立一个本地仓库:</strong>localRepository</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">localRepository</span>&gt;</span>D:\Program Files (x86)\apache-maven-3.6.3-bin\apache-maven-3.6.3\maven-repo<span class="tag">&lt;/<span class="name">localRepository</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="5-6、在idea中使用Maven"><a href="#5-6、在idea中使用Maven" class="headerlink" title="5.6、在idea中使用Maven"></a>5.6、在idea中使用Maven</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110110131290.png" alt="image-20201110110131290"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110110541132.png" alt="image-20201110110541132"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110110840932.png" alt="image-20201110110840932"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110111213580.png" alt="image-20201110111213580"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110113737211.png" alt="image-20201110113737211"></p>
<h3 id="5-7、创建一个普通的Maven项目"><a href="#5-7、创建一个普通的Maven项目" class="headerlink" title="5.7、创建一个普通的Maven项目"></a>5.7、创建一个普通的Maven项目</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110114656095.png" alt="image-20201110114656095"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110115708908.png" alt="image-20201110115708908"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110120425839.png" alt="image-20201110120425839"></p>
<h3 id="5-8、在IDEA中标记文件夹内容"><a href="#5-8、在IDEA中标记文件夹内容" class="headerlink" title="5.8、在IDEA中标记文件夹内容"></a>5.8、在IDEA中标记文件夹内容</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110120531117.png" alt="image-20201110120531117"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110120814218.png" alt="image-20201110120814218"></p>
<h3 id="5-9、在IDEA中配置TOmcat"><a href="#5-9、在IDEA中配置TOmcat" class="headerlink" title="5.9、在IDEA中配置TOmcat"></a>5.9、在IDEA中配置TOmcat</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110121243196.png" alt="image-20201110121243196"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110121426242.png" alt="image-20201110121426242"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110121755243.png" alt="image-20201110121755243"></p>
<p>解决警告问题</p>
<p>为什么会有这个问题：我们访问一个网站，需要指定一个文件夹名字。</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110122105184.png" alt="image-20201110122105184"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110122256726.png" alt="image-20201110122256726"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110122557719.png" alt="image-20201110122557719"></p>
<h3 id="5-10、pom文件"><a href="#5-10、pom文件" class="headerlink" title="5.10、pom文件"></a>5.10、pom文件</h3><p>pom.xml是Maven的核心配置文件</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110123405151.png" alt="image-20201110123405151"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110124220240.png" alt="image-20201110124220240"></p>
<p><strong>Maven的高级之处在于：</strong>他会帮你导入这个jar包所依赖的其他jar包</p>
<p>maven由于他的约定大于配置，我们之后可能会遇到我们写的配置文件，无法被导出或者生效的问题。</p>
<p><strong>解决方案：</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>true<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110125041883.png" alt="image-20201110125041883"></p>
<p><strong>百度Maven仓库即可找到对应的jar包</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">packaging</span>&gt;</span>war<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">name</span>&gt;</span>javaweb-01-maven Maven Webapp<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- FIXME change it to the project's website --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://www.example.com<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.7<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">finalName</span>&gt;</span>javaweb-01-maven<span class="tag">&lt;/<span class="name">finalName</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">pluginManagement</span>&gt;</span><span class="comment">&lt;!-- lock down plugins versions to avoid using Maven defaults (may be moved to parent pom) --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-clean-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- see http://maven.apache.org/ref/current/maven-core/default-bindings.html#Plugin_bindings_for_war_packaging --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-compiler-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.8.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-surefire-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.22.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-war-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.2.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-install-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.5.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-deploy-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.8.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">pluginManagement</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure>





<h3 id="5-11、IDEA操作"><a href="#5-11、IDEA操作" class="headerlink" title="5.11、IDEA操作"></a>5.11、IDEA操作</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201110125420366.png" alt="image-20201110125420366"></p>
<h2 id="6、-Servlet"><a href="#6、-Servlet" class="headerlink" title="6、 Servlet"></a>6、 Servlet</h2><h3 id="6-1、Servlet简介"><a href="#6-1、Servlet简介" class="headerlink" title="6.1、Servlet简介"></a>6.1、Servlet简介</h3><ul>
<li>Servlet就是sun公司开发动态web的一门技术</li>
<li>Sun在这些API中提供了一个接口叫做：Servlet，如果你想开发一个Servlet程序，只需要完成两个步骤：<ul>
<li>编写一个类，实现Servlet接口</li>
<li>把开发好的java类部署到服务器中。</li>
</ul>
</li>
</ul>
<p>把实现了Servlet接口的Java程序叫做，Servlet</p>
<h3 id="6-2、HelloServlet"><a href="#6-2、HelloServlet" class="headerlink" title="6.2、HelloServlet"></a>6.2、HelloServlet</h3><p>Maven导入Servlet包和Jsp包</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet/javax.servlet-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.0.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/javax.servlet.jsp/javax.servlet.jsp-api --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet.jsp<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javax.servlet.jsp-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>provided<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol>
<li><p>构建一个普通的Maven项目，删除里面的src目录，以后我们的学习就是在这个项目里面建立Moudel；这个空的工程就是Maven的主工程。</p>
</li>
<li><p>关于Maven父子工程的理解 ：</p>
<p>父项目中会有</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">moudles</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>servlet-01<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">moudles</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​    子项目中会有</p>
 <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>javaweb-01-servlet<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kuang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.0-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>父项目中的jar包子项目可以直接使用</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">son extends father</span><br></pre></td></tr></table></figure>

<ol start="3">
<li>Maven环境优化<ol>
<li>修改web.xml为最新的</li>
<li>将maven的结构搭建完整<ol>
<li>在main目录下添加java包和resources</li>
<li>在java包中创建class</li>
</ol>
</li>
</ol>
</li>
<li>编写一个Servlet程序<ol>
<li>编写一个普通类</li>
<li>实现Servlet接口，这里我们直接继承HttpServlet</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="comment">//由于get或者post只是请求实现的不同方式，可以相互调用，业务逻辑都一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//ServletOutputStream outputStream = resp.getOutputStream();</span></span><br><span class="line">        PrintWriter writer = resp.getWriter();<span class="comment">//Ctrl+Alt+v自动生成个对象    响应流</span></span><br><span class="line">        writer.print(<span class="string">"HelloServlet"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.doPost(req,resp);</span><br><span class="line">        <span class="comment">//doGet(req, resp);这样递归会导致内存溢出</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="5">
<li><p>编写Servlet的映射</p>
<p>为什么需要映射：我们写的是JAVA程序，但是我们需要通过浏览器访问，而浏览器需要连接web服务器，所以我们需要在web服务中注册我们写的Servlet，还需要给他一个浏览器可以访问的路径</p>
<p>在web.xml中</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--最新的web.xml--&gt;</span></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">web-app</span> <span class="attr">xmlns</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">version</span>=<span class="string">"4.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">metadata-complete</span>=<span class="string">"true"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">web-app</span>&gt;</span></span><br></pre></td></tr></table></figure>



</li>
</ol>
   <figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--    注册Servlet--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.HelloServlet<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--    servlet的请求路径（映射路径）--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>Hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/Hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ol start="6">
<li><p>配置Tomcat</p>
<p>注意：配置项目发布的路径就可以了</p>
</li>
<li><p>启动测试</p>
</li>
</ol>
<h3 id="6-3、Servlet原理"><a href="#6-3、Servlet原理" class="headerlink" title="6.3、Servlet原理"></a>6.3、Servlet原理</h3><p>Servlet是由Web服务器调用，web服务器在收到浏览器请求后，会</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201112165230005.png" alt="image-20201112165230005"></p>
<h3 id="6-4、Mapping问题"><a href="#6-4、Mapping问题" class="headerlink" title="6.4、Mapping问题"></a>6.4、Mapping问题</h3><ol>
<li>一个Servlet请求可以指定一个映射路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li><p>一个Servlet请求可以指定多个映射路径</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello2<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>一个Servlet请求可以指定通用映射路径</p>
</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/hello/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="4">
<li>默认请求路径</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ol start="5">
<li>指定一些后缀或者前缀等等</li>
</ol>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/*.doc<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="6-5、ServletContext"><a href="#6-5、ServletContext" class="headerlink" title="6.5、ServletContext"></a>6.5、ServletContext</h3><p>web容器在启动的时候，它会为每个web程序都创建一个ServletContext对象，他代表了当前的web应用</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201114124435157.png" alt="image-20201114124435157"></p>
<h4 id="1、共享数据"><a href="#1、共享数据" class="headerlink" title="1、共享数据"></a>1、共享数据</h4><p>我在这个Servlet中保存的数据，可以在另外一个servlet中拿到</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//用context.setAttribute将数据放到ServletContext中      </span></span><br><span class="line">		<span class="comment">//this.getServletConfig();  Servlet配置</span></span><br><span class="line">        <span class="comment">//this.getInitParameter();  初始化参数</span></span><br><span class="line">        <span class="comment">//this.getServletContext(); Servlet上下文</span></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line"></span><br><span class="line">        String username = <span class="string">"秦疆"</span>; <span class="comment">//数据</span></span><br><span class="line">        context.setAttribute(<span class="string">"username"</span>,username);<span class="comment">//将一个数据保存到ServletContext中，键（名字）为username，值为username</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过context.getAttribute拿到数据</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GetServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doGet(req, resp);</span><br><span class="line"></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String username =(String)context.getAttribute(<span class="string">"username"</span>);<span class="comment">//将context.getAttribute转为String类型</span></span><br><span class="line"></span><br><span class="line">        resp.setContentType(<span class="string">"text/html"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.getWriter().print(<span class="string">"名字"</span>+username);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.doPost(req, resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//配置web.xml文件</span></span><br><span class="line">&lt;servlet&gt;</span><br><span class="line">        &lt;servlet-name&gt;getc&lt;/servlet-name&gt;</span><br><span class="line">        &lt;servlet-<span class="class"><span class="keyword">class</span>&gt;<span class="title">com</span>.<span class="title">kuang</span>.<span class="title">servlet</span>.<span class="title">GetServlet</span>&lt;/<span class="title">servlet</span>-<span class="title">class</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">servlet</span>-<span class="title">name</span>&gt;<span class="title">getc</span>&lt;/<span class="title">servlet</span>-<span class="title">name</span>&gt;</span></span><br><span class="line"><span class="class">        &lt;<span class="title">url</span>-<span class="title">pattern</span>&gt;/<span class="title">getc</span>&lt;/<span class="title">url</span>-<span class="title">pattern</span>&gt;</span></span><br><span class="line"><span class="class">    &lt;/<span class="title">servlet</span>-<span class="title">mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>测试访问结果：</p>
<h4 id="2、获取初始化参数"><a href="#2、获取初始化参数" class="headerlink" title="2、获取初始化参数"></a>2、获取初始化参数</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--在web.xml中配置一些web应用的参数--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">context-param</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-name</span>&gt;</span>url<span class="tag">&lt;/<span class="name">param-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">param-value</span>&gt;</span>jdbc://localhost:3306/mybatis<span class="tag">&lt;/<span class="name">param-value</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">context-param</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        String url = context.getInitParameter(<span class="string">"url"</span>);</span><br><span class="line">        resp.getWriter().print(url);</span><br></pre></td></tr></table></figure>

<h4 id="3、请求转发"><a href="#3、请求转发" class="headerlink" title="3、请求转发"></a>3、请求转发</h4><p>请求转发</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201114124932600.png" alt="image-20201114124932600"></p>
<p>重定向</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201114125010745.png" alt="image-20201114125010745"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo04</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//super.doGet(req, resp);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        ServletContext context = <span class="keyword">this</span>.getServletContext();</span><br><span class="line">        System.out.println(<span class="string">"进入了ServletDemo04"</span>);</span><br><span class="line">        <span class="comment">//RequestDispatcher requestDispatcher = context.getRequestDispatcher("/gp");转发的请求路径</span></span><br><span class="line">        <span class="comment">//requestDispatcher.forward(req,resp);调用forward实现请求转发</span></span><br><span class="line">        context.getRequestDispatcher(<span class="string">"/gp"</span>).forward(req,resp);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sd4<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.ServletDemo04<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>sd4<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/sd4<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4、读取资源文件"><a href="#4、读取资源文件" class="headerlink" title="4、读取资源文件"></a>4、读取资源文件</h4><p>Properties</p>
<ul>
<li>在java目录下新建properties</li>
<li>在resources目录下新建properties</li>
</ul>
<p>发现：都被打包到了同一个路径下：classes，我们俗称    classpath（类路径）</p>
<p><strong>思路：</strong></p>
<p>需要一个文件流</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ServletDemo05</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//super.doGet(req, resp);</span></span><br><span class="line"></span><br><span class="line">        InputStream is = <span class="keyword">this</span>.getServletContext().getResourceAsStream(<span class="string">"/WEB-INF/classes/db.properties"</span>);</span><br><span class="line"></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        prop.load(is);</span><br><span class="line">        String user = prop.getProperty(<span class="string">"username"</span>);</span><br><span class="line">        String pwd = prop.getProperty(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        resp.getWriter().print(user + <span class="string">":"</span> + pwd);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="attr">username</span>=<span class="string">root</span></span><br><span class="line"><span class="attr">password</span>=<span class="string">123456</span></span><br></pre></td></tr></table></figure>

<p>访问测试即可ok</p>
<h3 id="6-6、HttpServletResponse"><a href="#6-6、HttpServletResponse" class="headerlink" title="6.6、HttpServletResponse"></a>6.6、HttpServletResponse</h3><p><strong>响应：</strong></p>
<p>​        web服务器接收到客户端的http请求，针对这个请求，分别创建一个代表请求的HttpServletRequest对象，代表响应的一个HttpServletResponse对象；</p>
<ul>
<li>如果要获取客户端请求过来的参数：找HttpServletrRequest。</li>
<li>如果要给客户端响应一些信息：找HttpServletResponse</li>
</ul>
<h4 id="1、简单分类"><a href="#1、简单分类" class="headerlink" title="1、简单分类"></a>1、简单分类</h4><p><strong>负责向浏览器发送数据的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">ServletOutputStream <span class="title">getOutputStream</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br><span class="line"><span class="function">PrintWriter <span class="title">getWrite</span><span class="params">()</span> <span class="keyword">throws</span> IOException</span>;</span><br></pre></td></tr></table></figure>

<p><strong>负责向浏览器发送响应头的方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setCharacterEncoding</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentLength</span><span class="params">(<span class="keyword">int</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentlengthLong</span><span class="params">(<span class="keyword">long</span> var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setContentType</span><span class="params">(String var1)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addDateHeader</span><span class="params">(String var1, <span class="keyword">long</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addHeader</span><span class="params">(String var1, String var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addIntHeader</span><span class="params">(String var1, <span class="keyword">int</span> var2)</span></span>;</span><br></pre></td></tr></table></figure>

<p><strong>响应状态码：</strong></p>
<p>200：请求响应成功</p>
<p>3XX：请求重定向</p>
<ul>
<li>重定向：你重新到我给你的新位置</li>
</ul>
<p>4XX：找不到资源   404</p>
<ul>
<li>资源不存在</li>
</ul>
<p>5XX：服务器代码错误    500          502：网关错误</p>
<h4 id="2、常见应用"><a href="#2、常见应用" class="headerlink" title="2、常见应用"></a>2、常见应用</h4><ol>
<li>向浏览器输出消息</li>
<li>下载文件<ol>
<li>要获取下载文件的路径</li>
<li>下载的文件名是啥</li>
<li>设置想办法让浏览器能够支持下载我们需要的东西</li>
<li>获取下载文件的输入流</li>
<li>创建缓冲区</li>
<li>获取OutputStream对象</li>
<li>将FileOutputStream流写入到buffer缓冲区</li>
<li>使用OutputStream将缓冲区的数据输出到客户端</li>
</ol>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FileServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//super.doGet(req, resp);</span></span><br><span class="line"><span class="comment">//        1. 要获取下载文件的路径</span></span><br><span class="line">        String realPath =<span class="string">"D:\\Develop\\javaweb-01-servlet\\response\\src\\main\\resources\\1.png"</span>;</span><br><span class="line">        System.out.println(<span class="string">"下载文件的路径: "</span>+realPath);</span><br><span class="line"><span class="comment">//        2. 下载的文件名是啥</span></span><br><span class="line">        String fileName = realPath.substring(realPath.lastIndexOf(<span class="string">"\\"</span>) + <span class="number">1</span>);</span><br><span class="line"><span class="comment">//        3. 设置想办法让浏览器能够支持("Content-Disposition")下载我们需要的东西,中文文件名URLEncoder.encode(fileName,"UTF-8")编码，否则会乱码</span></span><br><span class="line">        resp.setHeader(<span class="string">"Content-Disposition"</span>, <span class="string">"attachment;fileName="</span>+ URLEncoder.encode(fileName,<span class="string">"UTF-8"</span>));</span><br><span class="line"><span class="comment">//        4. 获取下载文件的输入流</span></span><br><span class="line">        FileInputStream in = <span class="keyword">new</span> FileInputStream(realPath);</span><br><span class="line"><span class="comment">//        5. 创建缓冲区</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//        6. 获取OutputStream对象</span></span><br><span class="line">        ServletOutputStream out = resp.getOutputStream();</span><br><span class="line"><span class="comment">//        7. 将FileOutputStream流写入到buffer缓冲区,使用OutputStream将缓冲区的数据输出到客户端</span></span><br><span class="line">        <span class="keyword">while</span>((len=in.read(buffer))&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            out.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//        8.关闭流</span></span><br><span class="line">        in.close();</span><br><span class="line">        out.close();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h4 id="3、验证码的功能"><a href="#3、验证码的功能" class="headerlink" title="3、验证码的功能"></a>3、验证码的功能</h4><ul>
<li>前端实现</li>
<li>后端实现，需要用到Java的图片类，生产一个图片</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">imageServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//super.doGet(req, resp);</span></span><br><span class="line">        <span class="comment">//如何让浏览器三秒自动刷新一次</span></span><br><span class="line">        resp.setHeader(<span class="string">"refresh"</span>,<span class="string">"3"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//在内存中创建一个图片</span></span><br><span class="line">        BufferedImage image = <span class="keyword">new</span> BufferedImage(<span class="number">80</span>,<span class="number">20</span>,BufferedImage.TYPE_INT_RGB);</span><br><span class="line">        <span class="comment">//得到图片</span></span><br><span class="line">        Graphics2D g = (Graphics2D) image.getGraphics();<span class="comment">//笔</span></span><br><span class="line">        <span class="comment">//设置图片的背景颜色</span></span><br><span class="line">        g.setColor(Color.white);</span><br><span class="line">        g.fillRect(<span class="number">0</span>,<span class="number">0</span>,<span class="number">80</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//给图片写数据</span></span><br><span class="line">        g.setColor(Color.BLUE);</span><br><span class="line">        g.setFont(<span class="keyword">new</span> Font(<span class="keyword">null</span>,Font.BOLD,<span class="number">20</span>));</span><br><span class="line">        g.drawString(makeNum(),<span class="number">0</span>,<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//告诉浏览器，这个请求用图片的方式打开</span></span><br><span class="line">        resp.setContentType(<span class="string">"image/jpg"</span>);</span><br><span class="line">        <span class="comment">//网站存在缓存，不让网站缓存</span></span><br><span class="line">        resp.setDateHeader(<span class="string">"expires"</span>,-<span class="number">1</span>);</span><br><span class="line">        resp.setHeader(<span class="string">"Cache-Control"</span>,<span class="string">"no-Cache"</span>);</span><br><span class="line">        resp.setHeader(<span class="string">"Pragma"</span>,<span class="string">"no-Cache"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//把图片写给浏览器</span></span><br><span class="line">        ImageIO.write(image,<span class="string">"jpg"</span>,resp.getOutputStream());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//生成随机数</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">makeNum</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        String num = random.nextInt(<span class="number">9999999</span>) + <span class="string">""</span>;</span><br><span class="line">        StringBuffer sb = <span class="keyword">new</span> StringBuffer();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span> ; i &lt; <span class="number">7</span>-num.length() ; i++)&#123;</span><br><span class="line">            sb.append(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        num = sb.toString() + num;</span><br><span class="line">        <span class="keyword">return</span> num;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>记得更改web.xml文件</p>
<h4 id="4、实现重定向"><a href="#4、实现重定向" class="headerlink" title="4、实现重定向"></a>4、实现重定向</h4><p>B一个web资源收到客户端A请求后，B他会通知A客户端去访问另一个web资源C，这个过程叫重定向。</p>
<p>常见场景：</p>
<ul>
<li><p>用户登录</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sendRedirect</span> <span class="params">(String var1)</span> <span class="keyword">throws</span> IOExcepion</span>;</span><br></pre></td></tr></table></figure>

</li>
</ul>
<p>测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedirectServlet</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//super.doGet(req, resp);</span></span><br><span class="line"><span class="comment">//两种方法重定向</span></span><br><span class="line">        <span class="comment">//第一种:</span></span><br><span class="line">        resp.setHeader(<span class="string">"Location"</span>,<span class="string">"/r/img"</span>);</span><br><span class="line">        resp.setStatus(<span class="number">302</span>);</span><br><span class="line">		<span class="comment">//第二种</span></span><br><span class="line">        resp.sendRedirect(<span class="string">"/r/img"</span>);</span><br></pre></td></tr></table></figure>

<p>面试题：请你聊聊重定向跟转发的区别？</p>
<p>相同点</p>
<ul>
<li>页面都会实现跳转</li>
</ul>
<p>不同点</p>
<ul>
<li>请求转发的时候，url不会产生变化</li>
<li>重定向的时候，url地址栏会发生变化</li>
</ul>
<p><strong>处理登陆请求：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RequestTest</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//处理请求</span></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(username + <span class="string">":"</span> + password);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//重定向的时候一定要注意，路径问题，否则404</span></span><br><span class="line">        resp.sendRedirect(<span class="string">"/r/success.jsp"</span>);</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--这里提交的路径，需要寻找到项目的路径--%</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">%--</span> %&#123;<span class="attr">pageContext.request.contextPath</span>&#125;代表当前的项目<span class="attr">--</span>%&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span><span class="attr">method</span>=<span class="string">"get"</span>&gt;</span></span><br><span class="line">    用户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;Success&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h3 id="6-7、HttpServletRequest"><a href="#6-7、HttpServletRequest" class="headerlink" title="6.7、HttpServletRequest"></a>6.7、HttpServletRequest</h3><p>HttpServletRequest代表客户端的请求，用户通过Http协议访问服务器，HTTP请求中的所有信息会被封装到HttpServletRequest，通过这HttpServletRequest的方法，获得客户端的所有信息 </p>
<h4 id="1-、获取前端传递的参数，并请求转发"><a href="#1-、获取前端传递的参数，并请求转发" class="headerlink" title="1 、获取前端传递的参数，并请求转发"></a>1 、获取前端传递的参数，并请求转发</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">getParameter(String s)<span class="comment">//返回字符串</span></span><br><span class="line">getparameterValues(String s[])<span class="comment">//返回数组</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginServlet</span>  <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//super.doGet(req, resp);</span></span><br><span class="line">        <span class="comment">//解决控制台乱码问题</span></span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        String username = req.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        String password = req.getParameter(<span class="string">"password"</span>);</span><br><span class="line">        String[] hobbys = req.getParameterValues(<span class="string">"hobbys"</span>);</span><br><span class="line">        System.out.println(<span class="string">"===================================="</span>);</span><br><span class="line">        System.out.println(username);</span><br><span class="line">        System.out.println(password);</span><br><span class="line">        System.out.println(Arrays.toString(hobbys));</span><br><span class="line">        System.out.println(<span class="string">"===================================="</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//这里的 / 代表当前的web应用</span></span><br><span class="line">        req.getRequestDispatcher(<span class="string">"/success.jsp"</span>).forward(req,resp);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;div style=<span class="string">"text-align: center"</span>&gt;</span><br><span class="line">&lt;%--    这里表单的意思是用post的方式提交表单，到login请求--%&gt;</span><br><span class="line">    &lt;form action=<span class="string">"$&#123;pageContext.request.contextPath&#125;/login"</span> method=<span class="string">"post"</span>&gt;</span><br><span class="line">        用户名:&lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span>&gt;&lt;br&gt;</span><br><span class="line">        密码:&lt;input type=<span class="string">"password"</span> name=<span class="string">"password"</span>&gt;&lt;br&gt;</span><br><span class="line"></span><br><span class="line">        爱好:</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobbys"</span> value=<span class="string">"女孩"</span>&gt;女孩</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobbys"</span> value=<span class="string">"代码"</span>&gt;代码</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobbys"</span> value=<span class="string">"唱歌"</span>&gt;唱歌</span><br><span class="line">        &lt;input type=<span class="string">"checkbox"</span> name=<span class="string">"hobbys"</span> value=<span class="string">"电影"</span>&gt;电影&lt;br&gt;</span><br><span class="line"></span><br><span class="line">        &lt;input type=<span class="string">"submit"</span>&gt;</span><br><span class="line">    &lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;登陆成功&lt;/h1&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<h2 id="7、Cookie、Session"><a href="#7、Cookie、Session" class="headerlink" title="7、Cookie、Session"></a>7、Cookie、Session</h2><h3 id="7-1、会话"><a href="#7-1、会话" class="headerlink" title="7.1、会话"></a>7.1、会话</h3><p><strong>会话：</strong>用户打开一个浏览器，点击了很多链接，访问了多个web资源，关闭浏览器，这个过程称之为会话</p>
<p><strong>有状态会话：</strong>一个同学来过教室，下次再来教室，我们会知道这个同学，曾经来过</p>
<p><strong>一个网站，怎么证明你来过？</strong></p>
<p>客户端                        服务端</p>
<ol>
<li>服务端给客户端一个信件，客户端下次访问时服务端带上信件就可以了；cookie</li>
<li>服务器登记你来过了，下次你来的时候我来匹配你；session</li>
</ol>
<h3 id="7-2、保存会话的两种技术"><a href="#7-2、保存会话的两种技术" class="headerlink" title="7.2、保存会话的两种技术"></a>7.2、保存会话的两种技术</h3><p><strong>cookie</strong></p>
<ul>
<li>客户端技术（响应，请求）</li>
</ul>
<p><strong>session</strong></p>
<ul>
<li>服务器技术，利用这个技术，可以保存用户的会话信息我们可以把信息或数据放在Session中</li>
</ul>
<p><strong>常见场景：</strong>网站登录之后，你下次不用再登陆了，第二次访问直接就上去了。</p>
<h3 id="7-3、Cookie"><a href="#7-3、Cookie" class="headerlink" title="7.3、Cookie"></a>7.3、Cookie</h3><ol>
<li>从请求中拿到cookie信息</li>
<li>服务器响应给客户端cookie</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Cookie[] cookies = req.getCookies();<span class="comment">//获取Cookie</span></span><br><span class="line">cookie.getName();<span class="comment">//获得cookie中的key</span></span><br><span class="line">cookie.getValue(); <span class="comment">//获得cookie中的vlaue</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastLoginTime"</span>, System.currentTimeMillis()+<span class="string">""</span>);<span class="comment">//新建一个cookie</span></span><br><span class="line">cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);<span class="comment">//设置cookie的有效期</span></span><br><span class="line">resp.addCookie(cookie);<span class="comment">//响应一个cookie给客户端</span></span><br></pre></td></tr></table></figure>

<p>cookie：一般会保存在用户目录下appdata文件下。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CookieDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        <span class="comment">//super.doGet(req, resp);</span></span><br><span class="line">       <span class="comment">//服务器，告诉你，你来的时候，把这个时间封装成一个信件，你下次带上，我就知道你来了</span></span><br><span class="line"></span><br><span class="line">       <span class="comment">//解决中文乱码问题</span></span><br><span class="line">       req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">       resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        PrintWriter out = resp.getWriter();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Cookie,服务器从客户端获取</span></span><br><span class="line">        Cookie[] cookies = req.getCookies();<span class="comment">//这里返回数组，说明Cookie可能存在多个</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Cookie是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (cookies!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">//如果存在怎么办</span></span><br><span class="line">            out.write(<span class="string">"你上次访问的时间是:"</span>);</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt; cookies.length; i++)&#123;</span><br><span class="line">                Cookie cookie = cookies[i];</span><br><span class="line">                <span class="comment">//获取cookies的名字</span></span><br><span class="line">                <span class="keyword">if</span> (cookie.getName().equals(<span class="string">"lastLoginTime"</span>))&#123;</span><br><span class="line">                    <span class="comment">//获取cookie中的值</span></span><br><span class="line">                    <span class="keyword">long</span> lastLoginTime = Long.parseLong(cookie.getValue());</span><br><span class="line">                    Date date = <span class="keyword">new</span> Date(lastLoginTime);</span><br><span class="line">                    out.write(date.toLocaleString());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            out.write(<span class="string">"这是您第一次访问本站"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//服务端给客户端响应一个cookie</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastLoginTime"</span>, System.currentTimeMillis()+<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//设置cookie的有效期为1天</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">24</span>*<span class="number">60</span>*<span class="number">60</span>);</span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">servlet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CookieDemo01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-class</span>&gt;</span>com.kuang.servlet.CookieDemo01<span class="tag">&lt;/<span class="name">servlet-class</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">servlet-mapping</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">servlet-name</span>&gt;</span>CookieDemo01<span class="tag">&lt;/<span class="name">servlet-name</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/c1<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p><strong>一个网站cookie是否存在上限</strong></p>
<ul>
<li>一个Cookie只能保存一个信息</li>
<li>一个web站点可以给浏览器发送多个cookie，最多存放20个cookie</li>
<li>Cookie大小有限制4KB</li>
<li>300个cookie浏览器上限</li>
</ul>
<p><strong>删除Cookie：</strong></p>
<ul>
<li>不设置有效期，关闭浏览器，自动失效</li>
<li>设置有效期为0</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建一个cookie，没名字必须跟要删除的名字保持一致</span></span><br><span class="line">Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"lastLoginTime"</span>, System.currentTimeMillis()+<span class="string">""</span>);</span><br><span class="line">        <span class="comment">//设置cookie的有效期为0，立马过期</span></span><br><span class="line">        cookie.setMaxAge(<span class="number">0</span>);</span><br><span class="line">        resp.addCookie(cookie);</span><br></pre></td></tr></table></figure>

<h3 id="7-4、Session（重点）"><a href="#7-4、Session（重点）" class="headerlink" title="7.4、Session（重点）"></a>7.4、Session（重点）</h3><p>什么是Session：</p>
<ul>
<li>服务器会给每一个用户(浏览器)创建一个Session对象</li>
<li>一个Session独占一个浏览器，只要浏览器没有关闭，这个Session就存在</li>
<li>用户登录之后，整个网站都可以访问（保存用户的信息，保存购物车的信息）</li>
</ul>
<p><strong>Session和cookie的区别：</strong></p>
<ul>
<li>Cookie是把用户的数据写给用户的浏览器，浏览器保存（可以保存多个）</li>
<li>Session把用户的数据写到独占Session中，在服务器端保存（保存重要的信息，减少服务器资源的浪费）</li>
<li>Session对象由服务器创建</li>
</ul>
<p><strong>使用场景：</strong></p>
<ul>
<li>保存一个登录用户的信息</li>
<li>购物车信息</li>
<li>在整个网站中经常会使用的数据，我们将它保存在Session中</li>
</ul>
<p><strong>使用Session：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.servlet;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.ServletException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SessionDemo01</span> <span class="keyword">extends</span> <span class="title">HttpServlet</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doGet</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//解决乱码问题</span></span><br><span class="line">        req.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">        resp.setContentType(<span class="string">"text/html;charset=utf-8"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到Session</span></span><br><span class="line">        HttpSession session = req.getSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给Session中存东西</span></span><br><span class="line">        session.setAttribute(<span class="string">"name"</span>,<span class="string">"秦疆"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取Session的ID</span></span><br><span class="line">        String sessionId = session.getId();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断Session是不是新创建</span></span><br><span class="line">        <span class="keyword">if</span>(session.isNew())&#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"session创建成功，ID:"</span>+sessionId);</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            resp.getWriter().write(<span class="string">"session已经创建，ID:"</span>+sessionId);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Session创建的时候做了什么事情</span></span><br><span class="line">        Cookie cookie = <span class="keyword">new</span> Cookie(<span class="string">"JSESSIONID"</span>,sessionId);</span><br><span class="line">        resp.addCookie(cookie);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">doPost</span><span class="params">(HttpServletRequest req, HttpServletResponse resp)</span> <span class="keyword">throws</span> ServletException, IOException </span>&#123;</span><br><span class="line">        doGet(req, resp);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>会话自动过期：web.xml配置</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--设置session默认的失效时间--&gt;</span><br><span class="line">&lt;session-config&gt;</span><br><span class="line">    &lt;--<span class="number">15</span>分钟后session自动失效，以分钟为单位--&gt;</span><br><span class="line">    &lt;session-timeout&gt;15&lt;/session-timeout&gt;</span><br><span class="line">&lt;/session-config&gt;</span><br></pre></td></tr></table></figure>

<h2 id="8、JSP"><a href="#8、JSP" class="headerlink" title="8、JSP"></a>8、JSP</h2><h3 id="8-1、什么是JSP"><a href="#8-1、什么是JSP" class="headerlink" title="8.1、什么是JSP"></a>8.1、什么是JSP</h3><p>java servlet Pages:Java服务器端页面，也和servlet一样，用于动态Web技术。</p>
<p>最大的特点：</p>
<ul>
<li>写JSP就像在写HTML</li>
<li>区别：<ul>
<li>HTML只给用户提供静态的数据</li>
<li>JSP页面可以嵌入JAVA代码，为用户提供动态数据</li>
</ul>
</li>
</ul>
<h3 id="8-2、JSP原理"><a href="#8-2、JSP原理" class="headerlink" title="8.2、JSP原理"></a>8.2、JSP原理</h3><p>思路：JSP到底是怎么执行的？</p>
<ul>
<li>代码层面没有任何问题</li>
<li>服务器内部工作<ul>
<li>tomcat中有一个work目录</li>
<li>IDEA中使用Tomcat的会在IDEA的tomcat中生产一个work目录</li>
<li>发现页面转换成java程序</li>
</ul>
</li>
</ul>
<p>浏览器向服务器发送请求，不管访问什么资源，其实都是在访问Servlet！</p>
<p>JSP继承HttpJspBase，HttpJspBase继承HttpServlet</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;!--在jsp中的html代码--&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h2&gt;Hello World!&lt;/h2&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">"&lt;html&gt;\n"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;body&gt;\n"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;h2&gt;Hello World!&lt;/h2&gt;\n"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;/body&gt;"</span>);</span><br><span class="line">out.write(<span class="string">"&lt;/html&gt;"</span>);</span><br></pre></td></tr></table></figure>

<p>JSP本质就是一个Servlet</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspInit</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//销毁</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspDEstory</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//JSPService</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">_jspService</span><span class="params">(.HttpServletRequest  request,HttpServletResponse response)</span></span></span><br></pre></td></tr></table></figure>

<ol>
<li><p>判断请求</p>
</li>
<li><p>内置一些对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">final</span> javax.servlet.jsp.PageContext.pageContext;<span class="comment">//页面上下文</span></span><br><span class="line">javax.servlet.http.HttpSession = <span class="keyword">null</span>;<span class="comment">//session</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletContext application;<span class="comment">//application</span></span><br><span class="line"><span class="keyword">final</span> javax.servlet.ServletConfig;<span class="comment">//config</span></span><br><span class="line">javax.servlet.jap.JspWrite out =<span class="keyword">null</span>;<span class="comment">//out</span></span><br><span class="line"><span class="keyword">final</span> java.lang.Object page = <span class="keyword">this</span>;<span class="comment">//page:当前页</span></span><br><span class="line">HttpServletRequest request;<span class="comment">//请求</span></span><br><span class="line">HttpServletResponse response<span class="comment">//响应</span></span><br></pre></td></tr></table></figure>
</li>
<li><p>输出页面前增加的代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">response.setContextType(<span class="string">"text/html"</span>);<span class="comment">//设置响应的页面类型</span></span><br><span class="line">pageContext = _jspxFactory.getPageContext(<span class="keyword">this</span>,request,response,<span class="keyword">null</span>,<span class="keyword">true</span>,<span class="number">8192</span>,<span class="keyword">true</span>);</span><br><span class="line">_jspx_page_context = pageContext;</span><br><span class="line">application = pageContext .getServletContext();</span><br><span class="line">config = pageContext.getServletConfig();</span><br><span class="line">session = pageContext.getSession();</span><br><span class="line">out = pageContext.getOut();</span><br><span class="line">_jspx_out = out;</span><br></pre></td></tr></table></figure>
</li>
<li><p>以上的这些对象我们可以直接使用</p>
</li>
</ol>
<p>在JSP页面中：</p>
<p>只要是JAVA代码就会原封不动的输出</p>
<p>如果是HTML代码，就会被转换为：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">out.write(<span class="string">"&lt;html&gt;\r\n"</span>);</span><br></pre></td></tr></table></figure>

<p>这样的格式输出到前端</p>
<h3 id="8-3、JSP基本语法"><a href="#8-3、JSP基本语法" class="headerlink" title="8.3、JSP基本语法"></a>8.3、JSP基本语法</h3><p><strong>JSP表达式</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%--JSP表达式</span><br><span class="line">    作用:z用来将程序的输出，输出到客户端</span><br><span class="line">        &lt;%=变量或者表达式%&gt;</span><br><span class="line">--%&gt;</span><br><span class="line">    &lt;%=<span class="keyword">new</span> java.util.Date()%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>jsp脚本片段</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">100</span>; i++)&#123;</span><br><span class="line">    sum+=<span class="number">1</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	out.println(<span class="string">"&lt;h1&gt;Sum="</span>+sum+<span class="string">"&lt;/h1&gt;"</span>);</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>在代码中嵌入html元素</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">5</span>; i++)&#123;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;Hello,World &lt;%=i%&gt;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">&#125;</span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p><strong>jsp声明</strong></p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%!</span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Loading servlet!"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> globalvar = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">kuang</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"进入了方法kuang！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">%&gt;</span><br></pre></td></tr></table></figure>

<p>JSP声明：会被编译到JSP生成java的类中！其他的，就会被生成到jspService方法中。</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%%&gt;</span><br><span class="line">&lt;%=%&gt;</span><br><span class="line">&lt;%!%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--注释--%&gt;</span><br></pre></td></tr></table></figure>

<p>JSP的注释，不会在客户端显示，HTML的会</p>
<h3 id="8-4、JSP指令"><a href="#8-4、JSP指令" class="headerlink" title="8.4、JSP指令"></a>8.4、JSP指令</h3><figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%<span class="meta">@page</span> args....%&gt;</span><br><span class="line">&lt;%<span class="meta">@include</span> file=<span class="string">""</span>%&gt;</span><br><span class="line"></span><br><span class="line">	&lt;%--<span class="meta">@include</span>会将两个页面合而为一--%&gt;</span><br><span class="line">	&lt;%<span class="meta">@include</span> file=<span class="string">"common/header.jsp"</span>%&gt;</span><br><span class="line">	&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">	&lt;%<span class="meta">@include</span> file=<span class="string">"common/footer.jsp"</span>%&gt;</span><br><span class="line"></span><br><span class="line">	&lt;%--jsp标签</span><br><span class="line">    jsp:include:拼接页面，本质是三个</span><br><span class="line">    --%&gt;</span><br><span class="line">	&lt;jsp:include page=<span class="string">"/common/header.jsp"</span>/&gt;</span><br><span class="line">	&lt;h1&gt;网页主体&lt;/h1&gt;</span><br><span class="line">	&lt;jsp:include page=<span class="string">"/common/footer.jsp"</span>/&gt;</span><br></pre></td></tr></table></figure>

<p><strong>错误页面</strong></p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">error-page</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">error-code</span>&gt;</span>404<span class="tag">&lt;/<span class="name">error-code</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">location</span>&gt;</span>/error/404.jsp<span class="tag">&lt;/<span class="name">location</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">error-page</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="8-5、9大内置对象"><a href="#8-5、9大内置对象" class="headerlink" title="8.5、9大内置对象"></a>8.5、9大内置对象</h3><ul>
<li>PageContext  存东西</li>
<li>Request  存东西</li>
<li>Response</li>
<li>Session  存东西</li>
<li>Application  [ServletContext]   存东西</li>
<li>config  [ServletConfig]</li>
<li>out</li>
<li>page</li>
<li>exception</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--内置对象--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">    pageContext.setAttribute(<span class="string">"name1"</span>,<span class="string">"秦疆1号"</span>);</span><br><span class="line">	<span class="comment">//保存的数据只在一个页面中有效</span></span><br><span class="line">    request.setAttribute(<span class="string">"name2"</span>,<span class="string">"秦疆2号"</span>);</span><br><span class="line">	<span class="comment">//保存的数据只在一次请求中有效，请求转发会携带这个数据</span></span><br><span class="line">    session.setAttribute(<span class="string">"name3"</span>,<span class="string">"秦疆3号"</span>);</span><br><span class="line">	<span class="comment">//保存的数据只在一次会话中有效</span></span><br><span class="line">    application.setAttribute(<span class="string">"name4"</span>,<span class="string">"秦疆4号"</span>);</span><br><span class="line">	<span class="comment">//保存的数据在服务器中有效</span></span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;%</span><br><span class="line">    <span class="comment">//从pageContext取出，我们通过寻找的方式来</span></span><br><span class="line">    <span class="comment">//从底层到高层（作用域）</span></span><br><span class="line">    String name1 = (String) pageContext.findAttribute(<span class="string">"name1"</span>);</span><br><span class="line">    String name2 = (String) pageContext.findAttribute(<span class="string">"name2"</span>);</span><br><span class="line">    String name3 = (String) pageContext.findAttribute(<span class="string">"name3"</span>);</span><br><span class="line">    String name4 = (String) pageContext.findAttribute(<span class="string">"name4"</span>);</span><br><span class="line">    String name5 = (String) pageContext.findAttribute(<span class="string">"name5"</span>);</span><br><span class="line"></span><br><span class="line">%&gt;</span><br><span class="line">&lt;%--使用EL表达式输出  $&#123;&#125;--%&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1&gt;取出的值为:&lt;/h1&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name1&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name2&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name3&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name4&#125;&lt;/h3&gt;</span><br><span class="line">&lt;h3&gt;$&#123;name5&#125;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>

<p>request : 客户端向服务器发送请求，产生的数据，用户看完就没用了，比如：新闻页面</p>
<p>session：客户向服务器发送请求，产生的数据，用户看完一会还有用，比如：购物车</p>
<p>application : 客户端向服务器发送请求，产生的数据，一个用户用完了，其他用户还可以用，比如：聊天数据</p>
<h3 id="8-6、JSP标签，JSTL，EL表达式"><a href="#8-6、JSP标签，JSTL，EL表达式" class="headerlink" title="8.6、JSP标签，JSTL，EL表达式"></a>8.6、JSP标签，JSTL，EL表达式</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>javax.servlet<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jstl<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- https://mvnrepository.com/artifact/taglibs/standard --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>taglibs<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>standard<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.1.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>EL表达式：</p>
<ul>
<li>获取数据</li>
<li>执行运算</li>
<li>获取web开发的常用对象</li>
</ul>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;!--jsp:forward  </span><br><span class="line">从一个JSP文件向另一个文件传递一个包含用户请求的request对象--&gt;</span><br></pre></td></tr></table></figure>

<p><strong>JSTL</strong></p>
<p>引入JSTL核心标签库</p>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201208122516078.png" alt="image-20201208122516078"></p>
<p><strong>JSTL标签库使用步骤</strong></p>
<ul>
<li>引入对应的taglib</li>
<li>使用其中的方法</li>
<li>在Tomcat也需要引入jstl的包，否则会报错：JSTL解析错误</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;&lt;%--必须加上，否则el表达式无法解析--%&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h4&gt;if 测试&lt;/h4&gt;</span><br><span class="line">&lt;%--</span><br><span class="line">EL表达式获取表单中的数据</span><br><span class="line">$&#123;param.参数名&#125;</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;hr&gt;</span><br><span class="line"></span><br><span class="line">&lt;form action=<span class="string">"coreif.jsp"</span> method=<span class="string">"get"</span>&gt;</span><br><span class="line">    &lt;input type=<span class="string">"text"</span> name=<span class="string">"username"</span> value=<span class="string">"$&#123;param.username&#125;"</span>/&gt;</span><br><span class="line">    &lt;input type=<span class="string">"submit"</span> value=<span class="string">"登录"</span>/&gt;</span><br><span class="line">&lt;/form&gt;</span><br><span class="line"></span><br><span class="line">&lt;%--</span><br><span class="line">判断如果提交的用户名是管理员，则登陆成功</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;c:<span class="keyword">if</span> test=<span class="string">"$&#123;param.username=='admin'&#125;"</span> <span class="keyword">var</span>=<span class="string">"iaAdmin"</span>&gt;</span><br><span class="line">    &lt;c:out value=<span class="string">"管理员欢迎您"</span>/&gt;</span><br><span class="line">&lt;/c:if&gt;</span><br><span class="line">&lt;c:out value=<span class="string">"$&#123;iaAdmin&#125;"</span>/&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>c:set     c:when</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%@ taglib prefix=<span class="string">"c"</span> uri=<span class="string">"http://java.sun.com/jsp/jstl/core"</span> %&gt;</span><br><span class="line">&lt;%@ page contentType=<span class="string">"text/html;charset=UTF-8"</span> language=<span class="string">"java"</span> %&gt;</span><br><span class="line">&lt;%@ page isELIgnored=<span class="string">"false"</span> %&gt;</span><br><span class="line"></span><br><span class="line">&lt;html&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;title&gt;Title&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;%--定义一个变量score，值为<span class="number">85</span>--%&gt;</span><br><span class="line">&lt;c:set <span class="keyword">var</span>=<span class="string">"score"</span> value=<span class="string">"95"</span>/&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;c:choose&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=90&#125;"</span>&gt;</span><br><span class="line">        你的成绩为优秀</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=80&#125;"</span>&gt;</span><br><span class="line">        你的成绩为一般</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">    &lt;c:when test=<span class="string">"$&#123;score&gt;=70&#125;"</span>&gt;</span><br><span class="line">        你的成绩为良好</span><br><span class="line">    &lt;/c:when&gt;</span><br><span class="line">&lt;/c:choose&gt;</span><br><span class="line"></span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>

<p><strong>forEach</strong></p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;%--</span><br><span class="line"><span class="keyword">var</span>   每一次遍历出来的对象</span><br><span class="line">items	要遍历的对象</span><br><span class="line">begin	哪里开始</span><br><span class="line">end		哪里结束</span><br><span class="line">step	步长</span><br><span class="line">--%&gt;</span><br><span class="line">&lt;%</span><br><span class="line">	ArrayLiat&lt;String&gt; people = <span class="keyword">new</span> ArrayLiat&lt;&gt;();</span><br><span class="line">	people.add(<span class="number">0</span>,<span class="string">"张三"</span>);</span><br><span class="line">	people.add(<span class="number">1</span>,<span class="string">"李四"</span>);</span><br><span class="line">	people.add(<span class="number">2</span>,<span class="string">"王五"</span>);</span><br><span class="line">	people.add(<span class="number">3</span>,<span class="string">"赵六"</span>);</span><br><span class="line">	request.setAttribute(<span class="string">"list"</span>,people);</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>= <span class="string">"people"</span> items=<span class="string">"$&#123;list&#125;"</span>&gt;</span><br><span class="line">    &lt;c:out value =<span class="string">"$&#123;people&#125;"</span>/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br><span class="line"></span><br><span class="line">&lt;hr&gt;</span><br><span class="line">&lt;c:forEach <span class="keyword">var</span>=<span class="string">"people"</span> items=<span class="string">"$&#123;list&#125;"</span> begin=<span class="string">"1"</span> end=<span class="string">"3"</span> step=<span class="string">"1"</span>&gt;</span><br><span class="line">    &lt;c:out value =<span class="string">"$&#123;people&#125;"</span>/&gt;</span><br><span class="line">&lt;/c:forEach&gt;</span><br></pre></td></tr></table></figure>

<h3 id="9、JavaBean"><a href="#9、JavaBean" class="headerlink" title="9、JavaBean"></a>9、JavaBean</h3><p>实体类</p>
<p>JavaBean有特定的写法：</p>
<ul>
<li>必须要有一个无参构造</li>
<li>属性必须私有化</li>
<li>必须有对应的get/set方法</li>
</ul>
<p><strong>一般用来和数据库的字段做映射    ORM</strong></p>
<p>ORM：对应关系映射</p>
<ul>
<li>表—-&gt;类</li>
<li>字段—–&gt;属性</li>
<li>行记录—-&gt;对象</li>
</ul>
<p><strong>people表</strong></p>
<table>
<thead>
<tr>
<th></th>
<th></th>
<th>age</th>
<th>address</th>
</tr>
</thead>
<tbody><tr>
<td>1</td>
<td>秦疆1号</td>
<td>3</td>
<td>西安</td>
</tr>
<tr>
<td>2</td>
<td>秦疆2号</td>
<td>18</td>
<td>西安</td>
</tr>
<tr>
<td>3</td>
<td>秦疆3号</td>
<td>100</td>
<td>西安</td>
</tr>
</tbody></table>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">People</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">new</span> people(<span class="number">1</span>,<span class="string">"秦疆1号"</span>,<span class="number">3</span>,<span class="string">"西安"</span>);</span><br><span class="line">    <span class="keyword">new</span> people(<span class="number">2</span>,<span class="string">"秦疆2号"</span>,<span class="number">18</span>,<span class="string">"西安"</span>);</span><br><span class="line">    <span class="keyword">new</span> people(<span class="number">3</span>,<span class="string">"秦疆3号"</span>,<span class="number">100</span>,<span class="string">"西安"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.kuang.pojo;</span><br><span class="line"><span class="comment">//实体类：我们一般都是和数据库中的表结构一一对应</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">People</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">People</span><span class="params">(<span class="keyword">int</span> id, String name, <span class="keyword">int</span> age, String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getAddress</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAddress</span><span class="params">(String address)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.address = address;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"People&#123;"</span> +</span><br><span class="line">                <span class="string">"id="</span> + id +</span><br><span class="line">                <span class="string">", name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", address='"</span> + address + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="9、MVC三层架构"><a href="#9、MVC三层架构" class="headerlink" title="9、MVC三层架构"></a>9、MVC三层架构</h2><p>什么是MVC：Model     view     Controller    模型，视图，控制器</p>
<h3 id="10-1、-早些年"><a href="#10-1、-早些年" class="headerlink" title="10.1、 早些年"></a>10.1、 早些年</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201218111615978.png" alt="image-20201218111615978"></p>
<p>用户直接访问控制层，控制层就可以直接操作数据库库</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">servlet --CRUD --数据库</span><br><span class="line">弊端：程序十分臃肿，不利于维护 <span class="comment">//jbdc写在servlet里</span></span><br><span class="line">servlet的代码中:处理请求，响应，试图跳转，处理JDBC，处理业务代码，处理逻辑代码</span><br></pre></td></tr></table></figure>

<h3 id="10-2、三层架构"><a href="#10-2、三层架构" class="headerlink" title="10.2、三层架构"></a>10.2、三层架构</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201218112654961.png" alt="image-20201218112654961"></p>
<p>Model：</p>
<ul>
<li>业务处理：业务逻辑（Servlet）</li>
<li>数据持久层：CRUD（Dao）</li>
</ul>
<p>View：</p>
<ul>
<li>展示数据</li>
<li>提供链接发起的Servlet请求</li>
</ul>
<p>Controller（Servlet）：</p>
<ul>
<li>接收用户的请求：（req：请求参数、Session信息….）</li>
<li>交给业务层处理对应的代码</li>
<li>控制视图的跳转</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">登录--&gt;接收用户的请求--&gt;处理用户的请求(获取用户登录的参数，username，pasword)--&gt;交给业务层处理登陆业务(判断用户名和密码是否正确:事务)--&gt;Dao层查询用户名和密码是否正确--&gt;数据库</span><br></pre></td></tr></table></figure>

<h2 id="11、Filter"><a href="#11、Filter" class="headerlink" title="11、Filter"></a>11、Filter</h2><p>Filter:过滤器，用来过滤网站的数据；</p>
<ul>
<li>处理中文乱码</li>
<li>登录验证</li>
</ul>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/11/07/JavaWeb/image-20201218114117171.png" alt="image-20201218114117171"></p>
<p>Filter开发步骤：</p>
<ul>
<li>导包</li>
<li>编写过滤器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> javax.servlet.*;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Filter</span> <span class="keyword">implements</span> <span class="title">javax</span>.<span class="title">servlet</span>.<span class="title">Filter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(FilterConfig filterConfig)</span> <span class="keyword">throws</span> ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//Chain：链</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    1.过滤中的所有代码，在过滤特定请求的时候都会执行</span></span><br><span class="line"><span class="comment">    2.必须要让过滤器继续执行</span></span><br><span class="line"><span class="comment">    chain.doGilter(request,response)</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest request, ServletResponse response, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">    request.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">"utf-8"</span>);</span><br><span class="line">    response.setContentType(<span class="string">"text/html;charset=UTF-8"</span>);</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">"Filter执行前..."</span>);</span><br><span class="line">    chain.doFilter(request,response);<span class="comment">//让我们的请求继续走，如果不写，程序到这里就被拦截停止</span></span><br><span class="line">    System.out.println(<span class="string">"Filter执行后..."</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">destroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Filter销毁"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>web.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">display-name</span>&gt;</span>Archetype Created Web Application<span class="tag">&lt;/<span class="name">display-name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-class</span>&gt;</span>com.kuang.pojo.Filter<span class="tag">&lt;/<span class="name">filter-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">filter-mapping</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">filter-name</span>&gt;</span>Filter<span class="tag">&lt;/<span class="name">filter-name</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--只要是servlet的任何请求，都会经过这个过滤器--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">url-pattern</span>&gt;</span>/servlet/*<span class="tag">&lt;/<span class="name">url-pattern</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">filter-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase-IO</title>
    <url>/Mr-lee-MQ.hithub.io/2020/09/20/Javase-IO/</url>
    <content><![CDATA[<h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O<a id="more"></a></h1><h2 id="IO概述"><a href="#IO概述" class="headerlink" title="IO概述"></a>IO概述</h2><p>Java中的I/O操作主要是指使用Java.io包下的内容，进行输入，输出操作。输入也叫做读取数据，输出也叫做写出数据。</p>
<ul>
<li>根据数据的流向分为:输入流和输出流<ul>
<li>输入流:把数据从其它设备上读取到内存中的流</li>
<li>输出流:把数据从内存中写到其它设备上的流。</li>
</ul>
</li>
<li>格局数据的类型分为:字节流和字符流。</li>
</ul>
<p><a href="https://www.wailian.work/image/QmMm4p" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200921_152057.png" alt="sp200921_152057.png"></a></p>
<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节输出流-OutputStream"><a href="#字节输出流-OutputStream" class="headerlink" title="字节输出流 OutputStream"></a>字节输出流 OutputStream</h3><p>OutputStream 抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。输出流接受输出字节并将这些字节发送到某个接收器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Java.io.OutputStream 抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	public void close();关闭此输出流并释放与此流相关联的任何系统资源。</span></span><br><span class="line"><span class="comment">	public void flush();刷新此输出流并强制任何缓冲的输出字节被写出。</span></span><br><span class="line"><span class="comment">	public void write(byte[] b);将b.length字节从指定的字节数组写入到此输出流。</span></span><br><span class="line"><span class="comment">	public void write(byte[] b, int off, int len);从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。</span></span><br><span class="line"><span class="comment">	public abstract void write(int b);将指定的字节输出流。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.io.FileOutputStream extends OutputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">FileOutputStream:文件字节输出流</span></span><br><span class="line"><span class="comment">作用:把内存中的数据写入到硬盘的文件中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	构造方法：</span></span><br><span class="line"><span class="comment">	FileOutputStream(String name)创建一个具有指定名称的文件中写入数据的输出文件流。</span></span><br><span class="line"><span class="comment">	FileOutputStream(File file)创建一个向指定File对象表示的文件中写入数据的文件输出流。</span></span><br><span class="line"><span class="comment">	参数：写入数据的目的</span></span><br><span class="line"><span class="comment">		String name:目的地是一个文件的路径。</span></span><br><span class="line"><span class="comment">		File file:目的地是一个文件</span></span><br><span class="line"><span class="comment">	构造方法的作用:</span></span><br><span class="line"><span class="comment">    	1.创建一个FileOutputStream对象</span></span><br><span class="line"><span class="comment">    	2.会根据构造方法中传递的文件/文件路径，创建一个空的文件。</span></span><br><span class="line"><span class="comment">    	3.会把FileOutputStream对象指向创建好的文件。</span></span><br><span class="line"><span class="comment">    	</span></span><br><span class="line"><span class="comment">	写入数据的原理：</span></span><br><span class="line"><span class="comment">		Java程序--&gt;JVM(java虚拟机)--&gt;OS(操作系统)--&gt;OS调用写数据的方法--&gt;把数据写入文件中</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		字节输出流的使用步骤(重点):</span></span><br><span class="line"><span class="comment">			1.创建一个FileOutputStream对象，构造方法中传递写入数据的目的地。</span></span><br><span class="line"><span class="comment">			2.调用FileOutputStream对象中的方法write，把数据写入到文件中。</span></span><br><span class="line"><span class="comment">			3.释放资源(流使用会占用一定的内存，使用完毕要把内存清空，提高程序的效率)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01OutputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"09.IOAndProperties\\a.txt"</span>);</span><br><span class="line">        <span class="comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中。</span></span><br><span class="line">        <span class="comment">//public abstract void write(int b);将指定的字节输出流。</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line">        fos.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>文件存储原理</strong></p>
<p><a href="https://www.wailian.work/image/QmMtHG" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200922_155941.png" alt="sp200922_155941.png"></a></p>
<h3 id="字节输出流写多个字节的方法"><a href="#字节输出流写多个字节的方法" class="headerlink" title="字节输出流写多个字节的方法"></a>字节输出流写多个字节的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一次写多个字节的方法:</span></span><br><span class="line"><span class="comment">	public void write(byte[] b):将b.length字节从指定的字节数组写入此输出流</span></span><br><span class="line"><span class="comment">	public void write(byte[], int off, int len):从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02OutputStream</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         <span class="comment">//创建FileOutputStream对象，构造方法</span></span><br><span class="line">         FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"09_IOAndProperties\\b.txt"</span>));</span><br><span class="line">         <span class="comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中。</span></span><br><span class="line">         <span class="comment">//在文件中显示100，写个字节</span></span><br><span class="line">         fos.write(<span class="number">49</span>);</span><br><span class="line">         fos.write(<span class="number">48</span>);</span><br><span class="line">         fos.write(<span class="number">48</span>);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         	public void write(byte[] b):将b.length字节从指定的字节数组写入此输出流。</span></span><br><span class="line"><span class="comment">         	一次写多个字节:</span></span><br><span class="line"><span class="comment">         		如果写的第一个字节是正数，那么显示的时候会查询ASCII码表。</span></span><br><span class="line"><span class="comment">         		如果写的第一个字母是负数，那第一个字节会和第二个字节，两个字节组成一个中文显示，查询系统默认码表(GBK)</span></span><br><span class="line"><span class="comment">         		</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="keyword">byte</span>[] bytes = &#123;-<span class="number">65</span>,-<span class="number">66</span>,-<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;<span class="comment">//[烤暘E]</span></span><br><span class="line">         fos.write(bytes);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         public void write(byte[], int off, int len):把字节数组的一部分写入文件中</span></span><br><span class="line"><span class="comment">         从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。</span></span><br><span class="line"><span class="comment">         int off:数组的开始索引</span></span><br><span class="line"><span class="comment">         int len:写几个字节</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         fos.write(<span class="keyword">byte</span>, <span class="number">1</span>, <span class="number">2</span>);<span class="comment">//BC</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         写入字符的方法：可以使用String类中的方法把字符串，转换为字节数组。</span></span><br><span class="line"><span class="comment">         byte[] getBytes()  把字符串转换为字节数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="keyword">byte</span>[] bytes2 = <span class="string">"你好"</span>.getBytes();</span><br><span class="line">         System.out.println(Arrays.toString(bytes2));<span class="comment">//[-28, -67, -96, -27, -91, -67]</span></span><br><span class="line">         fos.write(bytes2);</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="comment">//释放资源</span></span><br><span class="line">         fos.close();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h3><p>每次运行程序时，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">追加写/续写：使用两个参数的构造方法</span></span><br><span class="line"><span class="comment">	FileOutputStream(String name, boolean append)创建一个向具有指定  name  的文件中写入数据的输出文件流</span></span><br><span class="line"><span class="comment">	FileOutputStream(File file, boolean append)创建一个向指定File对象表示的文件中写入数据的文件输出流。</span></span><br><span class="line"><span class="comment">	参数：</span></span><br><span class="line"><span class="comment">		String name，File file:写入数据的目的地</span></span><br><span class="line"><span class="comment">		boolean append:追加写开关</span></span><br><span class="line"><span class="comment">			true:创建对象不会覆盖源文件，继续在文件的末尾追加写数据</span></span><br><span class="line"><span class="comment">			false:创建一个新文件，覆盖源文件</span></span><br><span class="line"><span class="comment">写换行：写换行符号</span></span><br><span class="line"><span class="comment">	windows:\r\n</span></span><br><span class="line"><span class="comment">	linux:/n</span></span><br><span class="line"><span class="comment">	mac:/r</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03OutputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      FileOutputStream fos = <span class="keyword">new</span> fileOutputStream(<span class="string">"09_IOAndProperties\\c.txt,true"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            fos.write(<span class="string">"你好"</span>.getBytes());</span><br><span class="line">            fos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><p>Java.io.InputStream抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。他定义了字节输入流的基本共性功能方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Java.io.InputStream:字节输入流</span></span><br><span class="line"><span class="comment">	此抽象类是表示字节输入流的所有类的超类。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	定义了所有子类共性的方法：</span></span><br><span class="line"><span class="comment">		int read()从输入流中读取数据的下一个字节。</span></span><br><span class="line"><span class="comment">		int read(byte[] b)从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</span></span><br><span class="line"><span class="comment">		void close()关闭此输入流并释放与该流关联的所有系统资源。</span></span><br><span class="line"><span class="comment">	Java.io.FileInputStream extends InputStream</span></span><br><span class="line"><span class="comment">	FileInputStream:文件字节输入流</span></span><br><span class="line"><span class="comment">	作用：把硬盘文件中的数据。读取到内存中使用</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	构造方法:</span></span><br><span class="line"><span class="comment">		FileInputStream(String name)</span></span><br><span class="line"><span class="comment">		FileInputStream(File file)</span></span><br><span class="line"><span class="comment">		参数：读取文件的数据源</span></span><br><span class="line"><span class="comment">			String name：文件的路径</span></span><br><span class="line"><span class="comment">			File file：文件</span></span><br><span class="line"><span class="comment">		构造方法的使用：</span></span><br><span class="line"><span class="comment">			1.会创建一个FileInputStream对象</span></span><br><span class="line"><span class="comment">			2.会把FileInputStream对象指定构造方法中要读取的文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h3><p>读取字节：read方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回-1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">读取数据的原理(硬盘--&gt;内存)</span></span><br><span class="line"><span class="comment">	java程序--&gt;JVM--&gt;OS--&gt;OS读取数据的方法--&gt;读取文件</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">字节输入流的使用步骤(重点)</span></span><br><span class="line"><span class="comment">	1.创建FileInputStream对象，构造方法中绑定要读取的数据源</span></span><br><span class="line"><span class="comment">	2.使用FileInputStream对象中的方法read，读取文件</span></span><br><span class="line"><span class="comment">	3.释放资源</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建FileInputStream对象，构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"09_IOAndProperties\\a.txt"</span>);</span><br><span class="line">        <span class="comment">//使用FileInputStream对象中的方法read，读取文件</span></span><br><span class="line">        <span class="comment">//int read()读取文件中的一个字节并返回，读取到文件的末尾返回-1。</span></span><br><span class="line">        <span class="keyword">int</span> len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//97  a</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//98  b</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//99  c</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//  -1</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//  -1</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        读取文件是一个重复的过程，所以可以用循环优化</span></span><br><span class="line"><span class="comment">        while循环结束条件，读取到-1的时候结束</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> len =<span class="number">0</span>;<span class="comment">//记录读取到的字节</span></span><br><span class="line">        <span class="keyword">while</span>((len = fis.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)len);<span class="comment">//abc</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>文件读取一个字节原理</strong></p>
<p><a href="https://www.wailian.work/image/QmMdKc" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200923_081602.png" alt="sp200923_081602.png"></a></p>
<h3 id="字节输入流一次读取多个字节"><a href="#字节输入流一次读取多个字节" class="headerlink" title="字节输入流一次读取多个字节"></a>字节输入流一次读取多个字节</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">字节输入流一次读取多个字节的方法:</span></span><br><span class="line"><span class="comment">	int read(byte[] b)从输入流中读取一定数量的字符，并将其存储在缓冲区数组b中。</span></span><br><span class="line"><span class="comment">明确两件事情：</span></span><br><span class="line"><span class="comment">	1.方法的参数byte[] 的作用?</span></span><br><span class="line"><span class="comment">	起到缓冲作用，存储每次读取到的多个字节</span></span><br><span class="line"><span class="comment">	数组的长度一般定义为1024(1KB)或者1024的整数倍</span></span><br><span class="line"><span class="comment">	2.方法的返回值int 是什么?</span></span><br><span class="line"><span class="comment">	每次读取的有效字节个数	</span></span><br><span class="line"><span class="comment">String类的构造方法</span></span><br><span class="line"><span class="comment">	String(byte[] bytes):把字节数组转换为字符串</span></span><br><span class="line"><span class="comment">	String(byte[] bytes, int offset, int length) 把字节数组的一部分转换为字符串 </span></span><br><span class="line"><span class="comment">		offset:数组的开始索引</span></span><br><span class="line"><span class="comment">		length:转换的字节个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建FileInputStream对象，构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"09_IOAndProperties\\b.txt"</span>);</span><br><span class="line">        <span class="comment">//使用FileInputStream对象的方法read读取文件</span></span><br><span class="line">        <span class="comment">//int read(byte[] b)从输入流中读取一定数量的字节，并将其存储在缓冲区数组  b 中。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> len = fis.read(bytes);</span><br><span class="line">        System.out.println(len);<span class="comment">//2</span></span><br><span class="line">        System.out.println(Array.toString(bytes));<span class="comment">//[65, 66]</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));<span class="comment">//AB</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read(bytes);</span><br><span class="line">        System.out.println(len);<span class="comment">//2</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));<span class="comment">//CD</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read(bytes);</span><br><span class="line">        System.out.println(len);<span class="comment">//1</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));<span class="comment">//ED</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read(bytes);</span><br><span class="line">        System.out.println(len);<span class="comment">//-1</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));<span class="comment">//ED</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        读取也是一个重复的过程，可以使用循环优化</span></span><br><span class="line"><span class="comment">        用while循环</span></span><br><span class="line"><span class="comment">        while循环结束的条件，读取到-1结束 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//存储读到的多个字节</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//记录每次读取的有效字节个数</span></span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//String(byte[] bytes, int offset, int length)把字节数组的一部分转换为字符串</span></span><br><span class="line">            offset:数组的开始索引</span><br><span class="line">            length:转换的字节个数</span><br><span class="line">         System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fid.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>文件读取多个字节原理</strong></p>
<p><a href="https://www.wailian.work/image/QmMHOf" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200923_085831.png" alt="sp200923_085831.png"></a></p>
<h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h3><p><a href="https://www.wailian.work/image/QmMni6" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200923_092941.png" alt="sp200923_092941.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">文件复制的练习：一读一写</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">明确：</span></span><br><span class="line"><span class="comment">	数据源：c\\1.jpg</span></span><br><span class="line"><span class="comment">	书救援的目的地: d\\1.jpg</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">文件复制的步骤：</span></span><br><span class="line"><span class="comment">	1.创建一个字节输入流对象，构造方法中绑定要读取的数据源</span></span><br><span class="line"><span class="comment">	2.创建一个字节输出流对象，构造方法中绑定要写入的目的地</span></span><br><span class="line"><span class="comment">	3.使用字节输入流对象中的方法read读取文件</span></span><br><span class="line"><span class="comment">	4.使用字节输出流中的方法write，把读取到的字节写入到目的地文件中</span></span><br><span class="line"><span class="comment">	5.释放资源</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01CopyFile</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个字节输入流对象，构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\1.jpg"</span>);</span><br><span class="line">        <span class="comment">//创建一个字节输出流对象，构造方法中绑定要写入的目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\1.jpg"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第一种方法：使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//使用字节输出流中的方法write，把读取到的字节写入到目的地文件中</span></span><br><span class="line">            fos.write(len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第二种方法：使用数组缓冲读取多个字节，写入多个字节</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//每次 读取的有效字节个数</span></span><br><span class="line">        <span class="keyword">while</span>(len = fis.read(bytes)!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//使用字节输出流中的方法write，把读取到的字节写入到目的地文件中</span></span><br><span class="line">            fos.write(bytes, <span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放资源(先关闭写的，后关闭取的)</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>当使用字节流读取文本文件时，可能会有一些问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能会占用多个字节存储。所以java提供了一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p>
<h3 id="字符输入流-Reader"><a href="#字符输入流-Reader" class="headerlink" title="字符输入流  [Reader]"></a>字符输入流  [Reader]</h3><p>java.io.Reader抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。他定义了字符输入流的基本共性功能方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.io.Reader:字符输入流，是字符输入流的超类，定义了一些共性的成员方法，是一个抽象类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">共性的成员方法：</span></span><br><span class="line"><span class="comment">	int read() 读取单个字符并返回。</span></span><br><span class="line"><span class="comment">	int read(char[] cbuf) 一次读取多个字符，将字符写入数组。</span></span><br><span class="line"><span class="comment">	void close() 关闭该流并释放与之关联的所有资源</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">java.io.FileReader extends InputStreamReader extends Reader</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">FileReader:文件字符输入流</span></span><br><span class="line"><span class="comment">作用:把硬盘文件中的数据以字符的方式读取到内存中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造方法:</span></span><br><span class="line"><span class="comment">	FileReader(String fileName)</span></span><br><span class="line"><span class="comment">	FileReader(File file)</span></span><br><span class="line"><span class="comment">	参数:读取文件的数据源</span></span><br><span class="line"><span class="comment">		String fileName:文件的路径</span></span><br><span class="line"><span class="comment">		File file:一个文件</span></span><br><span class="line"><span class="comment">	fileReader构造方法的作用:</span></span><br><span class="line"><span class="comment">		1.创建一个FileReader对象</span></span><br><span class="line"><span class="comment">		2.会把FileReader对象指向要读取的文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字符输入流的使用步骤:</span></span><br><span class="line"><span class="comment">	1.创建FileReader对象，构造方法中绑定要读取的数据源</span></span><br><span class="line"><span class="comment">	2.使用FileReader对象中的方法read读取文件</span></span><br><span class="line"><span class="comment">	3.释放资源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Reader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//1.创建FileReader对象，构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"09_IOAndProperties\\c.txt"</span>);</span><br><span class="line">        <span class="comment">//2.使用FileReader对象中的方法read读取文件</span></span><br><span class="line">        <span class="comment">//int read()读取单个字符并返回。</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int read(char[] cbuf)一次读取多个字符，将字符写入数组。</span></span><br><span class="line">        <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];<span class="comment">//存储读取到的多个字符</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//记录的是每次读取的有效字符个数</span></span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(cs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            String类的构造方法</span></span><br><span class="line"><span class="comment">            String(char[] value)把字符数组转换为字符串</span></span><br><span class="line"><span class="comment">            String(char[] value, int offset, int count)把字符数组的一部分转换为字符串</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cs, <span class="number">0</span>, len));</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符输出流-Writer"><a href="#字符输出流-Writer" class="headerlink" title="字符输出流 [Writer]"></a>字符输出流 [Writer]</h3><p>java.io.Write抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。他定义了字节输出流的基本共性功能方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.io.Writer:字符输出流，是所有字符输出流的最顶层的父类，是一个抽象类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">共性的成员方法:</span></span><br><span class="line"><span class="comment">	void write(int c)  写入单个字符</span></span><br><span class="line"><span class="comment">	void write(char[] cbuf)  写入字符数组</span></span><br><span class="line"><span class="comment">	abstract void write(char[] cbuf, int off, int len)  写入字符数组的一部分，off数组的开始索引，len写的字符个数。</span></span><br><span class="line"><span class="comment">	void write(String str)写入字符串。</span></span><br><span class="line"><span class="comment">	void write(String str, int off, int len)  写入字符串的某一部分，off字符串的开始索引，len写的字符个数。</span></span><br><span class="line"><span class="comment">	void flush()  刷新该流的缓冲。</span></span><br><span class="line"><span class="comment">	void close()  关闭此流，但不要先刷新它</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	java.io.FileWriter extends OutputStreamWrite extends Writer</span></span><br><span class="line"><span class="comment">	FileWrite:文件字符输出流</span></span><br><span class="line"><span class="comment">	作用:把内存中字符数据写到文件中</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	构造方法:</span></span><br><span class="line"><span class="comment">		FileWrite(File file)根据给定的 File 对象构造出一个FileWrite 对象。</span></span><br><span class="line"><span class="comment">		FileWrite(String fileName) 根据给定的文件名构造一个FileWrite对象。</span></span><br><span class="line"><span class="comment">		参数:写入数据的目的地</span></span><br><span class="line"><span class="comment">			String fileName:文件的路径</span></span><br><span class="line"><span class="comment">			File file:是一个文件</span></span><br><span class="line"><span class="comment">		构造方法的作用:</span></span><br><span class="line"><span class="comment">			1.会创建一个FileWrite对象。</span></span><br><span class="line"><span class="comment">			2.会根据构造方法中传递的文件/文件的路径，创建文件</span></span><br><span class="line"><span class="comment">			3.会把FileWrite对象指向创建好的文件</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	字符输出流的使用步骤:</span></span><br><span class="line"><span class="comment">		1.创建FileWriter对象，构造方法中绑定要写入数据的目的地</span></span><br><span class="line"><span class="comment">		2.使用FileWrite中的方法write，把数据写入到内存缓冲区中(字符转换为字节的过程)</span></span><br><span class="line"><span class="comment">		3.使用FileWriter中的方法flush，把内存缓冲区的数据，刷新到文件中。</span></span><br><span class="line"><span class="comment">		4.释放资源(会把内存缓冲区中的数据刷新到文件中)</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Writer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建FileWriter对象，构造方法中绑定要写入数据的目的地</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\d.txt"</span>);</span><br><span class="line">        <span class="comment">//使用FileWrite中的方法write，把数据写入到内存缓冲区中(字符转换为字节的过程)</span></span><br><span class="line">        <span class="comment">//void write(int c) 写入单个字符。</span></span><br><span class="line">        fw.write(<span class="number">97</span>);</span><br><span class="line">        <span class="comment">//3.使用FileWriter中的方法flush，把内存缓冲区的数据，刷新到文件中。</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        <span class="comment">//4.释放资源(会把内存缓冲区中的数据刷新到文件中)</span></span><br><span class="line">        fw.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关闭和刷新的区别"><a href="#关闭和刷新的区别" class="headerlink" title="关闭和刷新的区别"></a>关闭和刷新的区别</h3><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要flush方法了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flush和close方法的区别</span></span><br><span class="line"><span class="comment">	flush:刷新缓冲区，该对象可以继续使用</span></span><br><span class="line"><span class="comment">	close:先刷新缓冲区，然后再通知系统释放资源，流对象不能再使用了。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="字符输出流写数据的其他方法"><a href="#字符输出流写数据的其他方法" class="headerlink" title="字符输出流写数据的其他方法"></a>字符输出流写数据的其他方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span>写入字符数组</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>写入字符数组的某一部分，off数组开始索引，len写的字符个数。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span>写入字符串</span></span><br><span class="line"><span class="function">   <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>写入字符串的某一部分，off字符串的开始索引，len写的字符个数。</span></span><br></pre></td></tr></table></figure>

<h3 id="字符输出流的续写和换行"><a href="#字符输出流的续写和换行" class="headerlink" title="字符输出流的续写和换行"></a>字符输出流的续写和换行</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">续写和换行</span></span><br><span class="line"><span class="comment">续写,追加写:使用两个参数的构造方法</span></span><br><span class="line"><span class="comment">	FileWriter(String fileName, boolean append)</span></span><br><span class="line"><span class="comment">	FileWriter(File file, boolean append)</span></span><br><span class="line"><span class="comment">	参数:</span></span><br><span class="line"><span class="comment">		String fileName,file file:写入数据的目的地</span></span><br><span class="line"><span class="comment">		boolean append:续写开关 </span></span><br><span class="line"><span class="comment">			true:不会创建新的文件覆盖源文件，可以续写</span></span><br><span class="line"><span class="comment">			false:创建新的文件覆盖源文件</span></span><br><span class="line"><span class="comment">	换行:换行符号</span></span><br><span class="line"><span class="comment">		window:\r\n</span></span><br><span class="line"><span class="comment">		linux:/n</span></span><br><span class="line"><span class="comment">		mac:/r</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="IO异常的处理"><a href="#IO异常的处理" class="headerlink" title="IO异常的处理"></a>IO异常的处理</h2><p>在实际开发中，不能直接把异常抛出，应该使用try….catch….finally代码块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在1.7之前使用 try..catch..finally处理流中的异常</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">	try&#123;</span></span><br><span class="line"><span class="comment">		可能会产生异常的代码</span></span><br><span class="line"><span class="comment">	&#125;catch(异常类变量 变量名)&#123;</span></span><br><span class="line"><span class="comment">		异常的处理逻辑</span></span><br><span class="line"><span class="comment">	&#125;finally&#123;</span></span><br><span class="line"><span class="comment">		一定会执行的代码</span></span><br><span class="line"><span class="comment">		资源释放</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01TryCatch</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//提高变量fw的作用域，让finally可以使用</span></span><br><span class="line">        <span class="comment">//变量在定义的时候，可以没有值，但在使用的时候必须有值</span></span><br><span class="line">        <span class="comment">//fw = new FileWriter("09_IOAndProperties\\g.txt", true);执行失败，fw没有值，fw.close会报错</span></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//可能会产生异常的代码</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\g.txt"</span>,teue);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span> ;i++)&#123;</span><br><span class="line">                fw.write(<span class="string">"HelloWorld"</span>+i+<span class="string">"\r\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException)&#123;</span><br><span class="line">            <span class="comment">//异常的处理逻辑</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//一定会执行的代码</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//fw.close方法声明抛出了IOException异常对象。</span></span><br><span class="line">                fw.close(); </span><br><span class="line">            &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDK1.7的新特性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK7新特性</span></span><br><span class="line"><span class="comment">在try的后面可以增加一个()，在括号中可以定义流对象</span></span><br><span class="line"><span class="comment">那么这个流对象的作用域就在try中有效</span></span><br><span class="line"><span class="comment">try中的代码执行完毕，会自动把流对象释放，不用写finally</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">	try(定义流对象.....)&#123;</span></span><br><span class="line"><span class="comment">	可能会产生异常的代码</span></span><br><span class="line"><span class="comment">	&#125;catch(异常类变量 变量名)&#123;</span></span><br><span class="line"><span class="comment">		异常的处理逻辑</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>JDK9新特性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK9新特性</span></span><br><span class="line"><span class="comment">try的前面可以定义流对象</span></span><br><span class="line"><span class="comment">在try后面的()中可以直接引入流对象的名称(变量名)</span></span><br><span class="line"><span class="comment">在try代码执行完毕之后，流对象也可以释放掉，不用写finally</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">	A a = new A();</span></span><br><span class="line"><span class="comment">	B b = new B();</span></span><br><span class="line"><span class="comment">	try(a, b)&#123;</span></span><br><span class="line"><span class="comment">	可能会产生异常的代码</span></span><br><span class="line"><span class="comment">	&#125;catch(异常类的变量 变量名)&#123;</span></span><br><span class="line"><span class="comment">		异常的处理逻辑</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="属性集"><a href="#属性集" class="headerlink" title="属性集"></a>属性集</h2><h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><p>Properties类表示了一个持久的属性集。Properties可保存在流中或从流中加载。属性列表中每个键及其对应值都是一个字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.Properties集合 extends Hashtable&lt;k,v&gt; implement Map&lt;k,v&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Properties类表示了一个持久的属性集。Properties 可保存在流中或从流中加载。</span></span><br><span class="line"><span class="comment">Properties集合是一个唯一和IO流结合的集合</span></span><br><span class="line"><span class="comment">	可以使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</span></span><br><span class="line"><span class="comment">	可以使用Properties集合中的方法load，把硬盘中保存的文件(键值对)，读取到集合中使用。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	属性列表中每个键及其对应值都是一个字符串。</span></span><br><span class="line"><span class="comment">		Properties集合时一个双列集合，key和value默认都是字符串。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Properties</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用Properties集合存储数据。遍历取出Properties集合中的数据</span></span><br><span class="line"><span class="comment">    Properties集合是一个双列集合，key和value默认都是字符串</span></span><br><span class="line"><span class="comment">    Properties集合有一些操作字符串的特有方法</span></span><br><span class="line"><span class="comment">    	Object setPropersites(String key, String value)调用Hashtable的方法 put。</span></span><br><span class="line"><span class="comment">    	String getProperty(String key) 通过key找到value值，此方法相当于Map集合中的get(key)方法。</span></span><br><span class="line"><span class="comment">    	Set&lt;String&gt; stringPropertyNames() 返回此属性列表的键集，其中该键及其对应值是字符串，此方法相当于Map集合中的keySet方法</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;	</span><br><span class="line">        <span class="comment">//创建Properties集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//使用setProperty往集合中添加数据</span></span><br><span class="line">        prop.setProperty(<span class="string">"赵丽颖"</span>， <span class="string">"168"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"迪丽热巴"</span>， <span class="string">"165"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"古力娜扎"</span>， <span class="string">"160"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用stringPropertyNames把集合中的键取出,存储到一个Set集合中</span></span><br><span class="line">        Set&lt;String&gt; set = prop.stringPropertyName();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历Set集合，取出Properties集合的每一个键</span></span><br><span class="line">        <span class="keyword">for</span> (String key : set)&#123;</span><br><span class="line">            <span class="comment">//使用getProperty方法通过key获取value</span></span><br><span class="line">            string value = prop.getProperty(key);</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</span></span><br><span class="line"><span class="comment">	void store(OutputStream out, String comments)</span></span><br><span class="line"><span class="comment">	void store(Writer writer, String comments)</span></span><br><span class="line"><span class="comment">	参数:</span></span><br><span class="line"><span class="comment">		OutputStream out:字节输出流，不能写入中文</span></span><br><span class="line"><span class="comment">		Writer write:字符输出流，可以写中文</span></span><br><span class="line"><span class="comment">		String comments:注释，用来解释说明保存的文件是做什么的，不能使用中文，会产生乱码，默认是Unicode编码，一般使用""空字符串。</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		使用步骤:</span></span><br><span class="line"><span class="comment">			1.创建一个Properties集合对象，添加数据。</span></span><br><span class="line"><span class="comment">			2.创建字节输出流/字符输出流对象，构造方法中绑定要输出的目的地</span></span><br><span class="line"><span class="comment">			3.使用Properties集合中的方法store，把集合中的临时数据，持久化写入硬盘中存储。</span></span><br><span class="line"><span class="comment">			4.释放资源。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Properties</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show02();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Properties集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//使用setProperty往集合中添加数据</span></span><br><span class="line">        prop.setProperty(<span class="string">"赵丽颖"</span>， <span class="string">"168"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"迪丽热巴"</span>， <span class="string">"165"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"古力娜扎"</span>， <span class="string">"160"</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建字节输出流/字符输出流对象，构造方法中绑定要输出的目的地.</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\prop.txt"</span>);</span><br><span class="line">        <span class="comment">//使用Properties集合中的方法store,把集合中的临时数据，持久化写入硬盘中存储</span></span><br><span class="line">        prop.store(fw, <span class="string">"save data"</span>);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以使用Properties集合中的方法load，把硬盘中保存的文件(键值对)，读取到集合中使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase_常用类</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/28/Javase-%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    <content><![CDATA[<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类<a id="more"></a></h1><h2 id="Object类"><a href="#Object类" class="headerlink" title="Object类"></a>Object类</h2><h3 id="1-1概述"><a href="#1-1概述" class="headerlink" title="1.1概述"></a>1.1概述</h3><p>​        java.lang.Object 类是Java语言中的根类，即所有类的父类。它中描述的所有方法子类都可以使用。在对象实例化时，最终找到的父类就是Object。</p>
<p>如果一个类没有特别指明父类，那么<strong>默认则继承自Object类</strong></p>
<h3 id="ToString"><a href="#ToString" class="headerlink" title="ToString"></a>ToString</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	java.lang.Object类</span></span><br><span class="line"><span class="comment">	是类层结构的根类（最顶层）类，每个类都使用Object作为超（父）类。</span></span><br><span class="line"><span class="comment">	所有对象（包括数组）都实现这个类的方法。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ToString</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Person 类默认继承了Object类，所以可以使用Object类中的ToString方法</span></span><br><span class="line"><span class="comment">        String  toString()返回该对象的字符串表示。</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person (<span class="string">"张三"</span>，<span class="number">18</span>);</span><br><span class="line">        String s = p.toString ();</span><br><span class="line">        System.out.println(s);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//直接打印对象的名字，其实就是调用对象的toString方法           // p = p.toString();</span></span><br><span class="line">        System.out.println(p);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(String name ,<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	直接打印对象的地址值没有意义，需重写Object类的toString方法</span></span><br><span class="line"><span class="comment">    	直接打印对象的属性（name,age）</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">   <span class="comment">/* @override</span></span><br><span class="line"><span class="comment">    public String toString()&#123;</span></span><br><span class="line"><span class="comment">        return "Person &#123;name = "+name+",age = "+age+"&#125;";</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//     Alt + insert + toString快捷键</span></span><br><span class="line">    </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.anme = name;</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> String <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> Age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.anme = Age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>看一个类是否重写了toString 方法，直接打印这个类对应对象的名字即可，如果没有重写toString方法，那么打印的就是对象的地址值（默认），如果重写toString方法，那么就按照重写的方式打印。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Random r = <span class="keyword">new</span> Random();</span><br><span class="line">System.out.println(r);   地址值</span><br><span class="line"> </span><br><span class="line">Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">System.out.println(sc);   <span class="comment">//重写toString方法</span></span><br><span class="line">    </span><br><span class="line">ArrayList&lt;Inneger&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">list.add (<span class="number">1</span>);</span><br><span class="line">list.add (<span class="number">2</span>);</span><br><span class="line">System.out.println(list);<span class="comment">//[1,2]重写toString方法</span></span><br></pre></td></tr></table></figure>

<h3 id="Equals"><a href="#Equals" class="headerlink" title="Equals"></a>Equals</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Equals</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        	Person类继承了object类，所以可以用object类的equals方法</span></span><br><span class="line"><span class="comment">        	boolean equals(Object obj)</span></span><br><span class="line"><span class="comment">        	指示其他某个对象是否与此对象"相等"。</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        Object类 equals方法源码：</span></span><br><span class="line"><span class="comment">        	public boolean equals(Object obj)&#123;</span></span><br><span class="line"><span class="comment">        		return (this == obj);</span></span><br><span class="line"><span class="comment">        	&#125;</span></span><br><span class="line"><span class="comment">        	参数：</span></span><br><span class="line"><span class="comment">        		Object obj ：可以传递任意的对象</span></span><br><span class="line"><span class="comment">        	方法体：</span></span><br><span class="line"><span class="comment">        	== :比较运算符，返回的就是一个布尔值 true,false</span></span><br><span class="line"><span class="comment">        	基本数据类型：比较的是值</span></span><br><span class="line"><span class="comment">            引用数据类型：比较的是地址</span></span><br><span class="line"><span class="comment">          this：哪个对象调用的方法，方法中的this就是那个对象；p1调用的equals方法，所以this就是p1。</span></span><br><span class="line"><span class="comment">          obj：传递过来的参数p2。</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(name:<span class="string">"迪丽热巴"</span>，age: <span class="number">18</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(name:<span class="string">"古力娜扎"</span>，age: <span class="number">18</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">boolean</span> b = p1.equals(p2);</span><br><span class="line">        System.out.println(b);  <span class="comment">//false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="重写Object类的equals方法"><a href="#重写Object类的equals方法" class="headerlink" title="重写Object类的equals方法"></a>重写Object类的equals方法</h3><p>​    Object类的equals方法默认比较的是两个对象的地址值，没有意义。所以我们需要重写equals方法，比较两个对象的属性值（name,age）对象的属性值一样好，返回true；否则返回false</p>
<p>问题：</p>
<p>​    隐含一个多态</p>
<p>​    Object  obj = p2 =new Person (“古力娜扎”，18)；</p>
<p>​    多态弊端：无法使用子类特有的内容（属性，方法）</p>
<p>​    解决：可以使用向下转型（强转）把Object类型转换为Person。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@override</span> </span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span> <span class="params">(Object obj)</span></span>&#123;</span><br><span class="line">    <span class="comment">//增加一个判断，传递的参数obj是this本身，直接返回true</span></span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="keyword">this</span> )&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//增加一个判断，传递的参数obj是null，直接返回false</span></span><br><span class="line">    <span class="keyword">if</span>(obj == <span class="keyword">null</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	增加一个判断，是Person类型再转换，防止类型转换异常classCastException</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">        <span class="comment">//使用向下转型（强转）把Object类型转换为Person</span></span><br><span class="line">    Person p = (Person)obj;</span><br><span class="line">    <span class="comment">//比较两个对象的属性：一个是调用方法的是this（p1），一个是p（obj = p2）</span></span><br><span class="line">    <span class="keyword">this</span>.name.equals(p.name)&amp;&amp; <span class="keyword">this</span>.age == p.age;</span><br><span class="line">        <span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//不是Person类型直接返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p>快捷键：Alt + Insert + equals（） and hashCode()</p>
<h3 id="Objects类"><a href="#Objects类" class="headerlink" title="Objects类"></a>Objects类</h3><p>在JDK7添加了一个Object类，他提供一些方法来操作对象，他由一些静态的使用方法组成，这些方法是null-save（空指针安全）或null-tolerant（容忍空指针的），用于计算对象的hashcode，返回对象的字符串表示形式，比较两个对象。</p>
<ul>
<li>在比较两个对象时，Object类的equals方法容易抛出空指针异常，而Objects类中的equlas方法就优化了这个问题。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03objects</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//String s1 = "abc";</span></span><br><span class="line">        String s1 = <span class="keyword">null</span>;</span><br><span class="line">        String S2 = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="comment">//boolean b = s1.equals(s2); //NullPointException   null是不能调用方法的，会抛出空指针异常</span></span><br><span class="line">        <span class="comment">//System.out.println(b);</span></span><br><span class="line">        </span><br><span class="line">        Objects的equals源码</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        	public static boolean equals(Object a,Object b)&#123;</span></span><br><span class="line"><span class="comment">        	return (a==b)||(a!= null &amp;&amp; a.equals(b));</span></span><br><span class="line"><span class="comment">        	&#125;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        <span class="keyword">boolean</span> b2 = Object.equals(s1,s2);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Object类和Objects类总结"><a href="#Object类和Objects类总结" class="headerlink" title="Object类和Objects类总结"></a>Object类和Objects类总结</h3><ul>
<li><p>Object类介绍</p>
<ul>
<li>Object类是所有类的父类，一个类都会直接或间接的继承自该类</li>
<li>该类中提供了一些非常常用的方法。</li>
</ul>
</li>
<li><p>toString（）方法</p>
<ul>
<li>作用：打印对象的信息</li>
<li>重写前：打印的是包名类名@地址名</li>
<li>重写后：打印的是对象中的属性值</li>
</ul>
</li>
<li><p>equals </p>
<ul>
<li>作用：比较两个对象的</li>
<li>重写前：比较两个对象的地址值</li>
<li>重写后：比较两个对象的属性值</li>
</ul>
</li>
<li><p>Objects类</p>
<ul>
<li>equals（）方法<ul>
<li>比较两个对象是否相同，但是加了一些健壮性的判断。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="时间跟日期"><a href="#时间跟日期" class="headerlink" title="时间跟日期"></a>时间跟日期</h2><h3 id="Date类"><a href="#Date类" class="headerlink" title="Date类"></a>Date类</h3><p>java.yntl.Date 类，表示特定的瞬间，精确到毫秒。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//毫秒值的作用：可以对时间和日期进行计算。</span></span><br><span class="line"><span class="comment">//将日期转换为毫秒，计算后，再将毫秒转换为日期</span></span><br><span class="line"><span class="comment">//1000毫秒 = 1秒</span></span><br><span class="line"><span class="comment">//时间原点：1970年1月1日00.00.00</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoDate</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());</span><br><span class="line">        <span class="comment">//获取当前系统时间到时间原点经历了多少毫秒。</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Date</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        demo01();</span><br><span class="line">        demo02();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    Demo01:</span></span><br><span class="line"><span class="comment">    Date类的空参数构造方法：</span></span><br><span class="line"><span class="comment">    	Date() 获取的就是当前系统的日期和时间</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Demo02:</span></span><br><span class="line"><span class="comment">    Date类的带参数构造方法：</span></span><br><span class="line"><span class="comment">    	Date(long date):传递毫秒值，把毫秒转换为Date日期</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    Demo03:</span></span><br><span class="line"><span class="comment">    Date类的成员方法：</span></span><br><span class="line"><span class="comment">    long getTime()  把日期转换为毫秒 相当于System.currentTimeMillis()</span></span><br><span class="line"><span class="comment">    	返回自1970年1月1日00：00：00 GMT 以来此Date对象表示的毫秒数。</span></span><br><span class="line"><span class="comment">    	</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        <span class="comment">//Sun Aug 08 15:25:00 CST 2088</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Date d1 = <span class="keyword">new</span> Date(<span class="number">0L</span>);</span><br><span class="line">        System.out.println(d1);</span><br><span class="line">        <span class="comment">//Thu Jan 01 08:00:00 CST 1970</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        <span class="keyword">long</span> time = date.getTime();</span><br><span class="line">        System.out.println(time);<span class="comment">//3556589625</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="DateFormat类"><a href="#DateFormat类" class="headerlink" title="DateFormat类"></a>DateFormat类</h3><p>​        java.text.DateFormat 是日期/时间格式化子类的抽象类，我们通过这个类可以帮我们完成日期和文本之间的转换，也就是Date对象和String 对象之间进行来回转换。</p>
<ul>
<li>格式化：按照指定的格式，从Date对象转换为String对象</li>
<li>解析：按照制定的格式，从String对象转换为Date对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	java.text.DateFormat:是时间日期格式化子类的抽象类</span></span><br><span class="line"><span class="comment">	作用：格式化    解析  </span></span><br><span class="line"><span class="comment">	成员方法：</span></span><br><span class="line"><span class="comment">		String format(Date date) 按照指定的模式，把Date日期，格式化为符合模式的字符串。</span></span><br><span class="line"><span class="comment">		Date parse(String source)把符合模式的字符串，解析为Date日期。</span></span><br><span class="line"><span class="comment">	DateFormat类是一个抽象类，无法直接创建对象使用，可以使用DateFormat的子类</span></span><br><span class="line"><span class="comment">	java.text.SimpleDateFormat extends DateFormat</span></span><br><span class="line"><span class="comment">    构造方法：</span></span><br><span class="line"><span class="comment">    	SimpleDateFormat(String pattern)用给定的模式和默认语言环境的日期格式符号构造 SimpleDateFormat</span></span><br><span class="line"><span class="comment">    	参数：</span></span><br><span class="line"><span class="comment">    		String pattern:传递指定的模式</span></span><br><span class="line"><span class="comment">    	模式：区分大小写。</span></span><br><span class="line"><span class="comment">    	Y	年</span></span><br><span class="line"><span class="comment">    	M	月</span></span><br><span class="line"><span class="comment">    	d	日</span></span><br><span class="line"><span class="comment">    	H	时</span></span><br><span class="line"><span class="comment">    	m	分</span></span><br><span class="line"><span class="comment">    	s	秒</span></span><br><span class="line"><span class="comment">    写对应的格式，会把模式替换为对应的日期和时间</span></span><br><span class="line"><span class="comment">    "YYYY-MM-dd HH:mm:ss"</span></span><br><span class="line"><span class="comment">    "YYYY年MM月dd日 HH时mm分ss秒"</span></span><br><span class="line"><span class="comment">  注意：模式中的字母不能更改，但是连接符可以改变</span></span><br><span class="line"><span class="comment">    	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01DateFormat</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        demo01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    demo01：</span></span><br><span class="line"><span class="comment">    使用DateFormat类中的format，把日期格式化为文本</span></span><br><span class="line"><span class="comment">    String format(Date date)  按照指定的模式，把Date日期，格式化为符合模式的字符串</span></span><br><span class="line"><span class="comment">    使用步骤：</span></span><br><span class="line"><span class="comment">    	1.创建SimpDateFormat对象，构造方法中传递指定的模式</span></span><br><span class="line"><span class="comment">    	2.调用SimpDateFormat对象中的方法format，按照构造方法中指定的模式，把Date日期格式化为符合模式的字符串（文本）</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    demo02：</span></span><br><span class="line"><span class="comment">    使用DateFOrmat类中的方法，把文本解析为日期</span></span><br><span class="line"><span class="comment">    Date parse(String source)把符合模式的字符串解析为日期</span></span><br><span class="line"><span class="comment">    使用步骤：</span></span><br><span class="line"><span class="comment">    	1.创建SimpleDateFormat对象，构造方法中传递指定的模式</span></span><br><span class="line"><span class="comment">    	2.调用SimpleDateFormat对象中的方法parse，把符合构造方法中模式的字符串，解析为Date日期。</span></span><br><span class="line"><span class="comment">    注意：</span></span><br><span class="line"><span class="comment">    	parse方法声明了一个异常（ParseException）解析异常</span></span><br><span class="line"><span class="comment">    	如果字符串和构造方法中的模式不一样，那么程序就会抛出此异常。</span></span><br><span class="line"><span class="comment">    	要么throws继续声明抛出异常，要么try   catch自己处理这个异常。</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">     <span class="comment">//1.创建SimpDateFormat对象，构造方法中传递指定的模式</span></span><br><span class="line">        SimpDateFormat sdf = <span class="keyword">new</span> SimpDateFormat(YYYY年MM月dd日 HH时mm分ss秒);</span><br><span class="line">     <span class="comment">//2.调用SimpDateFormat对象中的方法format，按照构造方法中指定的模式，把Date日期格式化为符合模式的字符串（文本）</span></span><br><span class="line">        Date date = <span class="keyword">new</span> Date();</span><br><span class="line">        String text = sdf.format(date);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        <span class="comment">//Sun Aug 08 17:00:34 CST 2088</span></span><br><span class="line">        System.out.println(text);</span><br><span class="line">        <span class="comment">//2088年08月08日17时00分10秒       </span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建SimpDateFormat对象，构造方法中传递指定的模式</span></span><br><span class="line">        SimpDateFormat sdf = <span class="keyword">new</span> SimpDateFormat(YYYY年MM月dd日 HH时mm分ss秒);</span><br><span class="line">        <span class="comment">//2.调用SimpleDateFormat对象中的方法parse，把符合构造方法中模式的字符串，解析为Date日期。</span></span><br><span class="line">        Date date = sdf.parse(<span class="number">2088</span>年<span class="number">08</span>月<span class="number">08</span>日<span class="number">17</span>时<span class="number">00</span>分<span class="number">10</span>秒);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h3><p>使用日期和时间相关的API，计算出一个人已经出生了多少天</p>
<p>思路：</p>
<ul>
<li>获取当前时间对应的毫秒值</li>
<li>获取自己出生日期对应的毫秒值</li>
<li>两个时间相见（当前日期-出生日期）</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	分析：</span></span><br><span class="line"><span class="comment">	1.使用Scanner类中的方法next，获取出生值</span></span><br><span class="line"><span class="comment">	2.使用DateFormat中的方法parse，把字符串的出生日期解析为Date格式</span></span><br><span class="line"><span class="comment">	3.把Date格式的出生日期转换为毫秒值</span></span><br><span class="line"><span class="comment">	4.获取当前的日期，转换为毫秒值</span></span><br><span class="line"><span class="comment">	5.使用当前日期的毫秒值-出生日期的毫秒值</span></span><br><span class="line"><span class="comment">	6.把毫秒值的差值转换为天(s/1000/60/60/24)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="comment">//1.使用Scanner类中的方法next，获取出生值</span></span><br><span class="line">     Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">     System.out.println(<span class="string">"请输入您的出生日期，格式为yyyy-MM-dd"</span>);</span><br><span class="line">     String birthdayDateString = sc.next();</span><br><span class="line">     <span class="comment">//2.使用DateFormat中的方法parse，把字符串的出生日期解析为Date格式</span></span><br><span class="line">        SimpleDateFormat sdf = <span class="keyword">new</span> SimpleDateFormat(yyyy-MM-dd);</span><br><span class="line">        Date birthdayDate = sdf.parse(birthdayDateString);</span><br><span class="line">     <span class="comment">//3.把Date格式的出生日期转换为毫秒值  </span></span><br><span class="line">        <span class="keyword">long</span> Date birthdayDate = birthdayDate.getTime();</span><br><span class="line">      <span class="comment">//4.获取当前的日期，转换为毫秒值</span></span><br><span class="line">      <span class="keyword">long</span> todayTime = <span class="keyword">new</span> Date().getTime();</span><br><span class="line">      <span class="comment">//5.使用当前日期的毫秒值-出生日期的毫秒值</span></span><br><span class="line">      <span class="keyword">long</span> time = todayTime-birthdayDateTime;</span><br><span class="line">      <span class="comment">//6.把毫秒值的差值转换为天(s/1000/60/60/24)</span></span><br><span class="line">      System.out.println(time/<span class="number">1000</span>/<span class="number">60</span>/<span class="number">60</span>/<span class="number">24</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Calendar类"><a href="#Calendar类" class="headerlink" title="Calendar类"></a>Calendar类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	java.util.Calendar类：日历类</span></span><br><span class="line"><span class="comment">	Calendar类是一个抽象类，里边提供了很多操作日历的方法(YEAR MOUTH,DAY_OF_MOUTH,HOUR)</span></span><br><span class="line"><span class="comment">	Calendar类无法直接创建对象使用，里边有个静态方法叫getInstance(),该方法返回了Calendar类的子类对象。</span></span><br><span class="line"><span class="comment">	static Calendar getInstance() 使用默认时区和语言环境获得一个日历。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Calendar</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Calendar c = Calendar.getInstance();<span class="comment">//多态</span></span><br><span class="line">        System.out.println(c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>常用方法</strong></p>
<ul>
<li>public int get (int field):    返回给定日历字段的值</li>
<li>public void set (int field,int value): 将给定的日历字段设置为定值。</li>
<li>public abstract void add(int field,int amount): 根据日历的规则，为给定的日历字段添加或减去指定的时间量。</li>
<li>public Date getTime():返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。  </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Calendar类的成员方法：</span></span><br><span class="line"><span class="comment">		public int get (int field):	返回给定日历字段的值</span></span><br><span class="line"><span class="comment">		public void set (int field,int value): 将给定的日历字段设置为定值。</span></span><br><span class="line"><span class="comment">		public abstract void add(int field,int amount): 根据日历的规则，为给定的日历字段添加或减去指定的时间量。</span></span><br><span class="line"><span class="comment">		public Date getTime():返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。  </span></span><br><span class="line"><span class="comment">	成员方法的参数：</span></span><br><span class="line"><span class="comment">		int field :日历类的字段，可以使用Calendar类的静态变量获取。</span></span><br><span class="line"><span class="comment">		 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Calendar</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        demo01();</span><br><span class="line">        demo02();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	Demo01:</span></span><br><span class="line"><span class="comment">    	public int get(int field):返回给定日历字段的值</span></span><br><span class="line"><span class="comment">    	参数：传递指定的日历字段（YEAR MOUTH...）</span></span><br><span class="line"><span class="comment">    	返回值：日历字段代表具体的值</span></span><br><span class="line"><span class="comment">    	</span></span><br><span class="line"><span class="comment">    	</span></span><br><span class="line"><span class="comment">    	Demo02:</span></span><br><span class="line"><span class="comment">    	public void set (int field,int value): 将给定的日历字段设置为定值。</span></span><br><span class="line"><span class="comment">    	参数：</span></span><br><span class="line"><span class="comment">    		int field:传递指定的日历字段(YEAR,MOUTH)</span></span><br><span class="line"><span class="comment">    		int value:传递的字段设置的具体值</span></span><br><span class="line"><span class="comment">    		</span></span><br><span class="line"><span class="comment">    	Demo03:</span></span><br><span class="line"><span class="comment">    	public abstract void add(int field,int amount): 根据日历的规则，为给定的日历字段添加或减去指定的时间量。</span></span><br><span class="line"><span class="comment">    	参数：</span></span><br><span class="line"><span class="comment">    		int field:传递指定的日历字段(YEAR,MOUTH)</span></span><br><span class="line"><span class="comment">    		int amount:增加/减少的值</span></span><br><span class="line"><span class="comment">    			正数：增加</span></span><br><span class="line"><span class="comment">    			负数：减少</span></span><br><span class="line"><span class="comment">    			</span></span><br><span class="line"><span class="comment">    	Demo04:</span></span><br><span class="line"><span class="comment">    		public Date getTime():返回一个表示此Calendar时间值（从历元到现在的毫秒偏移量）的Date对象。</span></span><br><span class="line"><span class="comment">    		日历对象转换为日期对象</span></span><br><span class="line"><span class="comment">    	</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用getInstance方法获取Calendar对象</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(year);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> mouth = c.get(Calendar.MOUTH);</span><br><span class="line">        Syatem.out.println(mouth+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        2088</span></span><br><span class="line"><span class="comment">        8</span></span><br><span class="line"><span class="comment">        8</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用getInstance方法获取Calendar对象</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置年为9999</span></span><br><span class="line">        c.set(Calendar.YEAR,<span class="number">9999</span>);</span><br><span class="line">        <span class="comment">//设置月为9</span></span><br><span class="line">        c.set(Calendar.MONTH,<span class="number">9</span>);</span><br><span class="line">        <span class="comment">//同时设置</span></span><br><span class="line">        c.set(<span class="number">8888</span>,<span class="number">8</span>,<span class="number">8</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(year);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> mouth = c.get(Calendar.MOUTH);</span><br><span class="line">        Syatem.out.println(mouth+<span class="number">1</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> date = c.get(Calendar.DATE);</span><br><span class="line">        System.out.println(date);</span><br><span class="line">          </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo03</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用getInstance方法获取Calendar对象</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//年增加两年</span></span><br><span class="line">        c.add(Calendar.YEAR,<span class="number">2</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> year = c.get(Calendar.YEAR);</span><br><span class="line">        System.out.println(year);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo04</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用getInstance方法获取Calendar对象</span></span><br><span class="line">        Calendar c = Calendar.getInstance();</span><br><span class="line">        Date date = c.getTime();</span><br><span class="line">        System.out.println(date);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="日期相关类"><a href="#日期相关类" class="headerlink" title="日期相关类"></a>日期相关类</h3><ul>
<li><strong>Date类</strong><ul>
<li>构造方法<ul>
<li>Date（）:   根据当前系统时间创建日期对象</li>
<li>Date（long time）:根据传入的毫秒值时间创建日期对象。</li>
</ul>
</li>
<li>成员方法<ul>
<li>long getTime（）:获取当前日期对象的毫秒值时间</li>
<li>String toLocaleString（）:根据本地格式转换日期对象</li>
</ul>
</li>
</ul>
</li>
<li><strong>DateFormat类或SimpleDateFormat类</strong><ul>
<li>构造方法<ul>
<li>SImpleDateFormat(String s):根据指定模板创建日期格式化对象。</li>
</ul>
</li>
<li>成员方法<ul>
<li>String format （Date d）:根据指定格式格式化日期对象</li>
<li>Date parse (String  s )：根据指定格式解析字符串。</li>
</ul>
</li>
</ul>
</li>
<li><strong>Calendar</strong><ul>
<li>创建对象方式</li>
</ul>
</li>
</ul>
<h2 id="System类"><a href="#System类" class="headerlink" title="System类"></a>System类</h2><p>​        java.lang.System类中提供了大量的静态方法，可以获取与系统相关信息或系统及操作，在System类的API文档中。</p>
<ul>
<li>public static long currentTimeMills（）：返回以毫米为单位的当前时间。</li>
<li>public static void arraycopy（Object src ,int srcPos,Object dest,int destPos,int length）:将数组中指定的数据拷贝到另一个数组中。</li>
</ul>
<p><strong>public static long currentTimeMills（）</strong></p>
<p>验证for循环打印数字1~9999所需要的时间（毫秒）</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SystemTest</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">long</span> start = System.currentTimeMillis();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;<span class="number">10000</span>; i++)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">long</span> end = System.currentTimeMillis();</span><br><span class="line">        System.out.println(<span class="string">"共耗时毫秒："</span> + (end - start));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>public static void arraycopy（Object src ,int srcPos,Object dest,int destPos,int length）</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demmo01System</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        demo02();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    	public ststic void arraycopy(Object src,int srcPos,Object dest,int destPos,int length);</span></span><br><span class="line"><span class="comment">    	将数组中指定的数据拷贝到另一个数组中。</span></span><br><span class="line"><span class="comment">    	参数：</span></span><br><span class="line"><span class="comment">    		src  源数组</span></span><br><span class="line"><span class="comment">    		srcPos  源数组中的起始位置</span></span><br><span class="line"><span class="comment">    		dest  目标数组</span></span><br><span class="line"><span class="comment">    		destPos  目标数据中的起始位置</span></span><br><span class="line"><span class="comment">    		length  要复制的数组元素的数量   </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">练习：</span></span><br><span class="line"><span class="comment">	将src数组的前三个元素，复制到dest数组的前三个位置上</span></span><br><span class="line"><span class="comment">	复制元素前：src数组元素[1,2,3,4,5],dest数组元素[6,7,8,9,10]</span></span><br><span class="line"><span class="comment">	复制元素后：src数组元素[1,2,3,4,5]，dest数组元素[1,2,3,9,10]</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="comment">//定义源数组</span></span><br><span class="line">    <span class="keyword">int</span> [] src = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//定义目标数组</span></span><br><span class="line">    <span class="keyword">int</span> [] dest = &#123;<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">10</span>&#125;;</span><br><span class="line">     System.out.println(<span class="string">"复制前:"</span>+ Arrays.toString(dest));</span><br><span class="line">    <span class="comment">//使用System类的方法arrayscopy将src数组中前三个元素，复制到dest数组的前三个位置上</span></span><br><span class="line">    System.arraycopy(src,<span class="number">0</span>,dest,<span class="number">0</span>,<span class="number">3</span>);</span><br><span class="line">    System.out.println(<span class="string">"复制后"</span>+Arrays.tostring(dest));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="StringBuilder类"><a href="#StringBuilder类" class="headerlink" title="StringBuilder类"></a>StringBuilder类</h2><h3 id="字符串拼接问题"><a href="#字符串拼接问题" class="headerlink" title="字符串拼接问题"></a>字符串拼接问题</h3><p>由于String类的对象内容不可改变时，所以每当进行字符串拼接时，总会在内存中创建一个新的对象。例如：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s = <span class="string">"Hello"</span>;</span><br><span class="line">        s +=<span class="string">"World"</span>;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在API中对String类有这样的描述：<strong>字符串是常量(被final修饰的数组)</strong>，他们的值在创建后不可能被更改。</p>
<p>根据这句话分析我们的代码，其实总共产生了三个字符串，即“hello”,”World”,”hello World”。根据变量s首先指向Hello对象，最终指向拼接出来的新字符串对象，即HelloWorld。</p>
<p><strong>String类和StringBuilder类的区别</strong></p>
<p>String类</p>
<ul>
<li>字符串是常量，他们的值在创建之后不能修改</li>
<li>字符串的底层是一个被final修饰的数组，不能改变，是一个常量</li>
</ul>
<blockquote>
<p>private final byte [] value</p>
</blockquote>
<ul>
<li>进行字符串的相加，内存就会多出两个字符串，占用空间多，效率低下</li>
</ul>
<p>StringBuilder类</p>
<ul>
<li>字符串缓冲区，可以提高字符串的操作效率</li>
<li>底层也是一个数组，但是没有被final修饰，可以改变长度。</li>
</ul>
<blockquote>
<p>byte[] value = new byte[16];</p>
</blockquote>
<ul>
<li>StringBuilder在内存中，始终是一个数组，占用空间少，效率高，如果超出了StringBuilder的容量，会自动扩容。</li>
</ul>
<h3 id="构造方法"><a href="#构造方法" class="headerlink" title="构造方法"></a>构造方法</h3><ul>
<li>public  StringBuilder():构造一个空的StringBuilder容器。</li>
<li>public  StringBuilder(String str):构造一个StringBuilder容器，并将字符串添加进去。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringBuilderDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        StringBuilder sb1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(sb1);  <span class="comment">//空白</span></span><br><span class="line">        <span class="comment">//使用带参构造</span></span><br><span class="line">        StringBuilder sb2 = <span class="keyword">new</span> StringBuilder(<span class="string">"itcast"</span>);</span><br><span class="line">        System.out.println(sb2);</span><br><span class="line">        <span class="comment">//itcast</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	java.lang.StringBuilder类：字符缓冲区，可以而提高字符串的效率。</span></span><br><span class="line"><span class="comment">	构造方法：</span></span><br><span class="line"><span class="comment">	public  StringBuilder():构造一个空的StringBuilder容器。</span></span><br><span class="line"><span class="comment">	public  StringBuilder(String str):构造一个StringBuilder容器，并将字符串添加进去。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01StringBuilder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       StringBUilder bu1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(<span class="string">"bu1:"</span>+bu1);<span class="comment">//bu1:  </span></span><br><span class="line">        </span><br><span class="line">        StringBuilder bu2 = <span class="keyword">new</span> StringBuilder(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(<span class="string">"bu2:"</span>+bu2);<span class="comment">//bu2:abc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a>常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> StringBuilder <span class="title">append</span><span class="params">(...)</span>:添加任意类型数据的字符串形式，并返回当前对象本身。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">    </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span>:将当前StringBuilder对象转换为String对象。</span></span><br></pre></td></tr></table></figure>

<p><strong>append方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	StringBuilder类的成员方法</span></span><br><span class="line"><span class="comment">	public StringBuilder append(...):添加任意类型数据的字符串形式，并返回当前对象本身。</span></span><br><span class="line"><span class="comment">	参数：</span></span><br><span class="line"><span class="comment">		可以是任意的数据类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StringBuilder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建StringBuilder对象</span></span><br><span class="line">         StringBuilder bu1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//使用append方法，往StringBuilder方法中添加数据。</span></span><br><span class="line">        StringBuilder bu2 = bu1.append(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(bu1);<span class="comment">//abc</span></span><br><span class="line">        System.out.println(bu2);<span class="comment">//abc</span></span><br><span class="line">        <span class="comment">//地址相同，是同一个对象。</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用append方法无需接受返回值。</span></span><br><span class="line">        bu1.append(<span class="string">"abc"</span>);</span><br><span class="line">        bu1.append(<span class="string">"1"</span>);</span><br><span class="line">        bu1.append(<span class="keyword">true</span>);</span><br><span class="line">        bu1.append(<span class="number">8.8</span>);</span><br><span class="line">        bu1.append(<span class="string">'中'</span>)；</span><br><span class="line">        System.out.println(bu1);<span class="comment">//abc1ture8.8中</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">       链式方程：方法的返回值是一个对象，可以根据对象继续调用方法。 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        		      bu1.append(<span class="string">"abc"</span>).append(<span class="number">1</span>).append(<span class="keyword">true</span>).append(<span class="number">8.5</span>).append(<span class="string">'中'</span>);</span><br><span class="line">        System.out.println(bu1);<span class="comment">//abc1ture8.8中</span></span><br><span class="line">            </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>toString方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">StringBuilder和String可以互相转换：</span></span><br><span class="line"><span class="comment">String--&gt;StringBuilder:</span></span><br><span class="line"><span class="comment">	可以使用StringBuilder的构造方法</span></span><br><span class="line"><span class="comment">		StringBuilder(String str)构造一个字符串生成器，并初始化为指定的字符串内容。</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">StringBuilder--&gt;String:</span></span><br><span class="line"><span class="comment">可以使用StringBuilder中的toString方法</span></span><br><span class="line"><span class="comment">	public String toString():将当前StringBuilder对象转换为String对象。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StringBuilder</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//String--&gt;StringBuilder</span></span><br><span class="line">        String str = <span class="string">"Hello"</span>;</span><br><span class="line">        System.out.println(<span class="string">"str: "</span>+str);</span><br><span class="line">        StringBuilder bu = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">        <span class="comment">//往StringBuilder中添加数据</span></span><br><span class="line">        bu.append(<span class="string">"World"</span>);</span><br><span class="line">        System.out.println(<span class="string">"bu:"</span>+bu);</span><br><span class="line">    	</span><br><span class="line">        <span class="comment">//StringBuilder--&gt;String</span></span><br><span class="line">        String s = bu.toString();</span><br><span class="line">        System.out.println(<span class="string">"s:"</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>基本数据类型的数据，使用起来非常方便，但是没有对应的方法来操作这些数据，所以我们可以使用一个类，把基本类型的数据包装起来，这个叫包装类，在包装类中可以定义一些方法，用来操作基本类型的数据。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">byte</span>    	Byte</span><br><span class="line"><span class="keyword">short</span>		Short</span><br><span class="line"><span class="keyword">int</span>			Integer</span><br><span class="line"><span class="keyword">long</span>		Long</span><br><span class="line"><span class="keyword">float</span>		Float</span><br><span class="line"><span class="keyword">double</span>		Double</span><br><span class="line"><span class="keyword">char</span>		Character</span><br><span class="line"><span class="keyword">boolean</span>		Boolean</span><br></pre></td></tr></table></figure>

<h3 id="装箱与拆箱"><a href="#装箱与拆箱" class="headerlink" title="装箱与拆箱"></a>装箱与拆箱</h3><p>基本类型与对应的包装类对象之间，来回转换的过程称为“装箱”与“拆箱”。</p>
<ul>
<li>装箱：从基本类型转换为包装类对象</li>
<li>拆箱：从包装类对象转换为对应的基本类型。</li>
</ul>
<p>基本数值—&gt;包装对象</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer i = <span class="keyword">new</span> Integer(<span class="number">4</span>);<span class="comment">//使用构造函数函数</span></span><br><span class="line">Integer iii = Integer.valueOf(<span class="number">4</span>);<span class="comment">//使用包装类中的valueOf方法</span></span><br></pre></td></tr></table></figure>

<p>包装对象—&gt;基本数值</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> num = i.intValue();</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	装箱：把基本类型的数据，包装到包装类中(基本类型的数据--&gt;保包装类)</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	构造方法：</span></span><br><span class="line"><span class="comment">		Integer(int value) 构造一个新分配的Integer对象，它表示指定的 int值</span></span><br><span class="line"><span class="comment">		Integer(String s) 构造一个新分配的Integer对象，他表示String参数所指示的int值。</span></span><br><span class="line"><span class="comment">		传递的字符串，必须是基本类型的字符串，否则会抛出异常"100"正确"a"抛异常。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	静态方法：</span></span><br><span class="line"><span class="comment">		static Integer valueOf(int i)返回一个表示指定的int值的Integer实例。</span></span><br><span class="line"><span class="comment">		static Integer valueOf(String s)返回保存指定的String的值得Integer对象。</span></span><br><span class="line"><span class="comment">	拆箱：在包装类中取出基本类型的数据(包装类--&gt;基本类型的数据)</span></span><br><span class="line"><span class="comment">	成员方法：</span></span><br><span class="line"><span class="comment">		int intValue()以int类型返回该Integer的值。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Integer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//装箱</span></span><br><span class="line">        Integer in1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);</span><br><span class="line">        System.out.println(in1);<span class="comment">//重写了toString方法</span></span><br><span class="line">        </span><br><span class="line">        Integer in2 = <span class="keyword">new</span> Integer(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(in2);<span class="comment">//1</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">        Integer in3 = Inegter.valueOf(<span class="number">1</span>);</span><br><span class="line">        System.out.println(in3);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Integer in4 = Integer.valueOf("a");</span></span><br><span class="line">        <span class="comment">//NumberFormatException数字格式化异常</span></span><br><span class="line">        Inegter in4 = Inegter.valueOf(<span class="string">"1"</span>);</span><br><span class="line">        System.out..println(in4);</span><br><span class="line">        </span><br><span class="line">    <span class="comment">//拆箱</span></span><br><span class="line">        <span class="keyword">int</span> i = in1.intValue();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自动装箱和拆箱"><a href="#自动装箱和拆箱" class="headerlink" title="自动装箱和拆箱"></a>自动装箱和拆箱</h3><p>基本类型的数据和包装类之间可以自动的相互转换</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Integer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        	自动装箱：直接把int类型的整数赋值给包装类</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        Integer in = <span class="number">1</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        自动拆箱：in是包装类，无法直接参与运算，可以自动转换为基本类型的数据，在参与计算。</span></span><br><span class="line"><span class="comment">        in + 2;就相当于in.intValue() + 3 = 3;</span></span><br><span class="line"><span class="comment">        in = in + 2;就相当于 in = new Integer(3);自动装箱</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        in = in + <span class="number">2</span> ;</span><br><span class="line">        System.out.println(in);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//ArrayLIst集合无法直接存储整数，可以存储包装类</span></span><br><span class="line">        Arraylist&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        list.add(<span class="number">1</span>);<span class="comment">//自动装箱  list.add(new Integer(1));</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> a = list..get(<span class="number">0</span>);<span class="comment">//自动装箱list.get(0).intValue();</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="基本类型和字符串之间的转换"><a href="#基本类型和字符串之间的转换" class="headerlink" title="基本类型和字符串之间的转换"></a>基本类型和字符串之间的转换</h3><p><strong>基本类型转换为String</strong></p>
<p>基本类型转换String总共有三种方式</p>
<ul>
<li>基本类型直接与“”相连即可。如：34+“”</li>
<li>使用包装类中的静态方法</li>
</ul>
<p>static String toString(int  i)返回一个表示指定整数的String对象</p>
<ul>
<li>使用String类中的静态方法</li>
</ul>
<p>static  String  valueOf(int  i)返回int参数的字符串表示形式</p>
<p><strong>String转换为对应的基本类型</strong></p>
<p>除了Character类之外，其他所有包装类都具有parseXXX静态方法可以将字符串参数转换为对应的基本类型</p>
<ul>
<li>public   static    byte    parseByte(String s):将字符串参数转换为对应的byte基本类型</li>
<li>public   static    short    parseShort(String s):将字符串参数转换为对应的short基本类型</li>
<li>public   static    int    parseInt(String s):将字符串参数转换为对应的int基本类型</li>
<li>public   static    long    parseLong(String s):将字符串参数转换为对应的long基本类型</li>
<li>public   static    float    parseFloat(String s):将字符串参数转换为对应的float基本类型</li>
<li>public   static    double    parseDouble(String s):将字符串参数转换为对应的double基本类型</li>
<li>public   static    boolean    parseBoolean(String s):将字符串参数转换为对应的boolean基本类型</li>
</ul>
<p><strong>代码使用：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	基本类型--&gt;字符串</span></span><br><span class="line"><span class="comment">	三种方法</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Integer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        String s1 = <span class="number">100</span> + <span class="string">""</span>;</span><br><span class="line">        System.out.println(s1 + <span class="number">200</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        String s2 = Integer.toString(<span class="number">100</span>);</span><br><span class="line">        System.out.println(s2 + <span class="number">200</span>);</span><br><span class="line">        </span><br><span class="line">        String s3 = String.valueOf(<span class="number">100</span>);</span><br><span class="line">        System.out.println(s3 + <span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">字符串--&gt;基本类型</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Integer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> i = Integer.parseInt(<span class="string">"100"</span>);</span><br><span class="line">        System.out.println(i+<span class="number">200</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase_异常</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/27/Javase-%E5%BC%82%E5%B8%B8/</url>
    <content><![CDATA[<h1 id="异常机制"><a href="#异常机制" class="headerlink" title="异常机制"></a>异常机制<a id="more"></a></h1><h2 id="什么是异常"><a href="#什么是异常" class="headerlink" title="什么是异常"></a>什么是异常</h2><ul>
<li>实际工作中，遇到的情况不可能是非常完美的。比如：你写的某个模块，用户输入不一定符合你的要求，你的程序要打开某个软件，这个文件可能不存在或者文件格式不对，你要读取数据库的数据，数据可能是空的等。我们的程序再跑着，内存或硬盘可能满了。等等。</li>
<li>软件程序运行过程中，非常可能遇到刚刚提到的这些异常问题，我们叫<strong>异常</strong>，英文是<strong>Exception</strong>，意思是例外。这些，例外情况，或者叫异常，怎么让我们写的程序做出合理的处理。而不至于程序崩溃。</li>
<li>异常指程序运行中出现的不期而至的各种情况，如：文件找不到，网络连接失败，非法参数等。</li>
<li>异常发生在程序运行期间，他影响了正常的程序执行流程。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//死循环，错误</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Demo01().a();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">a</span><span class="params">()</span></span>&#123;</span><br><span class="line">        b();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">b</span><span class="params">()</span></span>&#123;</span><br><span class="line">        a();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Demo01</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="number">11</span>/<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="简单分类"><a href="#简单分类" class="headerlink" title="简单分类"></a>简单分类</h2><ul>
<li>要理解Java异常处理是如何工作的，你需要掌握以下<strong>三种类型的异常</strong>：<ul>
<li><strong>检查型异常</strong>：最具的代表性异常就是用户错误或问题引起的异常，这是程序员无法预见的。例如要打开一个不存在的文件，一个异常就发生了，这些异常在编译时不能被简单地忽略。</li>
<li><strong>运行时异常</strong>：运行时异常是可能被程序员避免的异常。与检查性异常相反，运行时异常可以在编译时被忽略。</li>
<li><strong>错误</strong>：错误不是异常，而是脱离程序员控制的问题。错误在代码中通常被忽略。例如,当栈溢出时，一个错误就发生了，他们在编译也检查不到的</li>
</ul>
</li>
</ul>
<h2 id="异常体系结构"><a href="#异常体系结构" class="headerlink" title="异常体系结构"></a>异常体系结构</h2><ul>
<li>Java把异常当做对象来处理，并定义一个基类java.lang.Throwable作为所有异常的超类。</li>
<li>在Java API中已经定义了许多异常类，这些异常类分为两大类，<strong>错误Error</strong>和<strong>异常Exception</strong></li>
</ul>
<p><a href="https://www.wailian.work/image/QmvyJG" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/12/sp200827_200438.png" alt="sp200827_200438.png"></a></p>
<h3 id="Error"><a href="#Error" class="headerlink" title="Error"></a>Error</h3><ul>
<li>Error类对象由Java虚拟机生成并抛出，大多数错误与代码编写者所执行的操作无关。</li>
<li>Java虚拟机运行错误（Virtual MachineError），当JVM不再有继续执行操作所需的内存资源时，将出现OutOfMemoryError。这些异常发生时，Java虚拟机（JVM）一般会选择线程终止。</li>
<li>还有发生在虚拟机试图执行应用时，如类定义错误（NoClassDefFoundError），链接错误（LinkageError）.这些错误是不可查的，因为他们在应用程序的控制和处理能力之外，而且绝大多数使程序运行时不允许出现的状况。</li>
</ul>
<h3 id="Exception"><a href="#Exception" class="headerlink" title="Exception"></a>Exception</h3><ul>
<li>在Exception分支中有一个重要的子类RuntimeException（运行时异常）<ul>
<li>ArraylndexOutOfBoundsException(数组下标越界)</li>
<li>NullPointerExcep（空指针异常）</li>
<li>ArithmeticException(算数异常)</li>
<li>MissingResourceException(丢失资源)</li>
<li>ClassNotFoundException（找不到类）等异常，这些异常是不检查异常，程序中可以选择捕获处理，也可以不处理。</li>
</ul>
</li>
<li>这些异常一般是由程序逻辑错误引起的，程序应该从逻辑角度尽可能避免这类异常的发生。</li>
<li><strong>Error和Exception的区别</strong>：Error通常是灾难性的致命的错误，是程序无法控制和处理的，当出现这些异常时，Java虚拟机（JVM）一般会选择终止线程；Exception通常情况下是可以被程序处理的，并且在程序中应该尽可能地去处理这些异常。</li>
</ul>
<h2 id="异常处理机制"><a href="#异常处理机制" class="headerlink" title="异常处理机制"></a>异常处理机制</h2><ul>
<li>抛出异常</li>
<li>捕获异常</li>
<li>异常处理的五个关键字:try ,catch,finally,throw,throws</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">       <span class="keyword">int</span> b = <span class="number">0</span>;	</span><br><span class="line">       </span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="comment">//try监控区域</span></span><br><span class="line">           System.out.println(a/b);</span><br><span class="line">       &#125;<span class="keyword">catch</span> &#123;ArithmeticException e&#125;&#123;<span class="comment">//catch  想要捕获的异常类型</span></span><br><span class="line">       		System.out.println(<span class="string">"程序出现异常，变量b不能为0"</span>);</span><br><span class="line">       &#125;<span class="keyword">finally</span> &#123;<span class="comment">//处理善后工作</span></span><br><span class="line">       	System.out.println(<span class="string">"finally"</span>);</span><br><span class="line">       &#125;</span><br><span class="line">       </span><br><span class="line">       <span class="comment">//finally可以不用，无论有没有异常都会执行</span></span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>可以连续捕获异常，但范围要逐渐变大。捕获到异常后，后面的不再执行。</li>
<li>快捷键   Ctrl   Alt  +  T</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b = <span class="number">0</span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> <span class="keyword">throws</span> ArithemticExceotion</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(b == <span class="number">0</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> ArithmeticException();</span><br><span class="line">            <span class="comment">//主动抛出异常，一般在方法中使用  </span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><ul>
<li>使用Java内置的异常类可以描述在编程时出现的大部分异常情况。除此之外，用户还可以自定义异常，用户自定义异常类，只需继承<strong>Exception</strong>类即可</li>
<li>使用自定义异常类步骤<ul>
<li>创建自定义异常类</li>
<li>在方法中通过 throw关键字抛出异常对象</li>
<li>如果在当前抛出异常的方法中处理异常，可以使用try-catch语句捕获并处理；否则在方法的声明处可通过throws关键字指明要抛出给方法调用者的异常，继续进行下一步操作。</li>
<li>在出现异常方法的调查者中捕获并处理异常。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义异常</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyException</span> <span class="keyword">extends</span> <span class="title">Exception</span></span>&#123;</span><br><span class="line">    <span class="comment">//传递数字&gt;10;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> detail;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyException</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.detail = a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//toString:异常的打印信息</span></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"MyException&#123;"</span> + <span class="string">"detail="</span> + detail +</span><br><span class="line">    <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="comment">//可能会存在的异常的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span> <span class="params">(<span class="keyword">int</span> a)</span> <span class="keyword">throws</span> MyException</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"传递的参数为："</span> + a);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span>(a&gt;<span class="number">10</span>)&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> MyException(a);<span class="comment">//抛出</span></span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"ok"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            test(a);</span><br><span class="line">        &#125; <span class="keyword">catch</span>(MyException e)&#123;</span><br><span class="line">            System.out.println(<span class="string">"MyException=&gt;"</span>+e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="实际应用中的经验总结"><a href="#实际应用中的经验总结" class="headerlink" title="实际应用中的经验总结"></a>实际应用中的经验总结</h3><ul>
<li>处理运行时异常时，采用逻辑去合理规避同时辅助try-catch处理</li>
<li>在多重catch块后面，可以加一个catch（Exception）来处理可能会被遗漏的异常</li>
<li>对于不确定的代码，也可以加try-catch，处理潜在的异常</li>
<li>尽量去处理异常，切忌只是简单的调用printStackTrace（）去打印输出。</li>
<li>具体如何处理异常，要根据不同业务需求和异常类型去决定‘</li>
<li>尽量添加finally语句块去释放占用的资源。</li>
</ul>
]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase_数组</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/21/Javase-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组<a id="more"></a></h1><h2 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h2><ul>
<li>数组是相同类型数据的有序集合</li>
<li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成</li>
<li>每一个数据称做一个数组元素，每个数组元素可以通过一个下标来访问他们。</li>
</ul>
<h2 id="数组的声明和创建"><a href="#数组的声明和创建" class="headerlink" title="数组的声明和创建"></a>数组的声明和创建</h2><ul>
<li>首先必须声明数组变量，才能在程序中使用数组，下面是声明数组变量的语法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar    <span class="comment">//首选的方法</span></span><br><span class="line">    或</span><br><span class="line">dataType arrayRefVar[]		<span class="comment">//效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Java语言使用new操作符来创建数组，语法如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure>

<ul>
<li>数组的元素是通过索引访问的，数组索引从0开始。</li>
<li>获取数组长度   arrays.lengh</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo01</span></span>&#123;</span><br><span class="line">    <span class="comment">//变量的类型   变量的名字  =  变量的值</span></span><br><span class="line">    <span class="comment">//数组类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums;	<span class="comment">//定义两种都可</span></span><br><span class="line">        <span class="keyword">int</span> nums2[];</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];	<span class="comment">//这里可以存放10个int类型的数字</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//给数组元素赋值</span></span><br><span class="line">        num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        num[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        num[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        num[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">        num[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        num[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">        num[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">        num[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        num[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">        num[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//计算所有元素的和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.length ;i++)&#123;</span><br><span class="line">            sum = sum + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"总和为："</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三种初始化及内存分析"><a href="#三种初始化及内存分析" class="headerlink" title="三种初始化及内存分析"></a>三种初始化及内存分析</h2><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><ul>
<li>堆<ul>
<li>存放new的对象和数组</li>
<li>可以被所有线程共享，不会存放别的对象引用</li>
</ul>
</li>
<li>栈<ul>
<li>存放基础变量类型（会包含这个基础类型的具体数值）</li>
<li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li>
</ul>
</li>
<li>方法区<ul>
<li>可以被所有线程共享</li>
<li>包含了所有的class和static变量</li>
</ul>
</li>
</ul>
<h3 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h3><ul>
<li>静态初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> Man(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> Man(<span class="number">2</span>,<span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>动态初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>数组的默认初始化<ul>
<li>数组是引用类型，它的元素相当于类的实例变量，因此 数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li>
</ul>
</li>
</ul>
<h2 id="下标越界及小结"><a href="#下标越界及小结" class="headerlink" title="下标越界及小结"></a>下标越界及小结</h2><h3 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h3><ul>
<li>其长度是固定的。数组一旦被创建，它的大小就是不可以改变的。</li>
<li>其元素必须是相同类型，不允许出现混合类型</li>
<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li>
<li>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong>。</li>
</ul>
<h3 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h3><ul>
<li>下标的合法区间：[0，length-1]，如果越界就会报错</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> [] a =<span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>];</span><br><span class="line">    System.out.println(a[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ArrayindexOutOfBoundException:数组下标越界异常</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>数组是相同数据类型（数据类型可以为任意类型）的有序集合</li>
<li>数组也是对象。数组元素相当于对象的成员变量</li>
<li>数组长度是确定的，不可变的。如果越界，则报ArrayindexOutOfBounds</li>
</ul>
<h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> array[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//打印全部的数组元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; array.length ; i++ )&#123;</span><br><span class="line">        System.out.println(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"=============="</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算所有元素的和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">        sum +=array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">    System.out.println(<span class="string">"=============="</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查找最大元素</span></span><br><span class="line">    <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; array.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i]&gt;max)&#123;</span><br><span class="line">            max = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"max="</span>+max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> array[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> array : array)&#123;</span><br><span class="line">     	System.out.println(array[i]);   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="反转数组"><a href="#反转数组" class="headerlink" title="反转数组"></a>反转数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] reverse(<span class="keyword">int</span> [] arrays)&#123;</span><br><span class="line">    <span class="keyword">int</span> [] result = <span class="keyword">new</span> <span class="keyword">int</span> [array.length];</span><br><span class="line">    <span class="comment">//反转的操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j = result.length-<span class="number">1</span>;i&lt; array.length;i++,j--)&#123;</span><br><span class="line">        result[j] = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>多维数组可以看成数组的数组，比如二维数组就是个特殊的一维数组，其每一个元素都是一个一维数组。</p>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;j &lt;array[i].length;j++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;array[i].length;j++)&#123;</span><br><span class="line">        System.out.println(array[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><ul>
<li>数组的工具类java.util.Arrays</li>
<li>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作。</li>
<li>查看JDK帮助文档</li>
<li>Array类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而不用适用对象来调用。</li>
</ul>
<h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><ul>
<li>给数组赋值：通过fill方法</li>
<li>对数组排序：通过sort方法，按升序。</li>
<li>比较数组：通过equals方法比较数组中元素值是否相等。</li>
<li>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找操作。</li>
</ul>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>两层循环，外层冒泡轮数，里层依次比较，时间复杂度为O(n2)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> cclass ArrayDemo&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//冒泡排序</span></span><br><span class="line">    <span class="comment">//1.比较数组中，相邻的元素，如果第一个数比第二个数大，我们就交换它们的位置</span></span><br><span class="line">    <span class="comment">//2.每一次比较，都会产生一个最大，或者最小的数字</span></span><br><span class="line">    <span class="comment">//3.下一轮则可以减少一次排序</span></span><br><span class="line">    <span class="comment">//4.依次循环直到结束。</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> [] array)</span></span>&#123;</span><br><span class="line">        <span class="comment">//外层循环，判断我们这个要走多少次；</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;array.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//通过flag标志位减少没有意义的比较</span></span><br><span class="line">            <span class="comment">//内层循环，比较判断两个数，如果第一个数比第二个数大，则交换位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;array.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line">                <span class="comment">//第一个数和第二个数比较</span></span><br><span class="line">                <span class="keyword">if</span>(array[j+<span class="number">1</span>]&gt;array[j])&#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//如果第一个数大于第二个数，交换位置</span></span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>数据结构</p>
<p>为了解决二维数组中的很多值是默认值为0，因此记录了很多没有意义的数据。</p>
<p>解决办法：稀疏数组。</p>
<h3 id="稀疏数组介绍"><a href="#稀疏数组介绍" class="headerlink" title="稀疏数组介绍"></a>稀疏数组介绍</h3><ul>
<li>当一个数组中大部分元素为0，或者为同一个值的数组时，可以用稀疏数组来保存该数组。</li>
<li>稀疏数组的处理方式是：<ul>
<li>记录数组一共有几行几列，有多少个不同值</li>
<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>
</ul>
</li>
<li>如下图所示：左边为原始数组，右边为稀疏数组</li>
</ul>
<p><a href="https://www.wailian.work/image/Qmv35p" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/12/sp200822_222512.png" alt="sp200822_222512.png"></a></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个二维数组 11*11    0：没有棋子  1：黑棋  2：白棋</span></span><br><span class="line">        <span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//输出原始的数组</span></span><br><span class="line">        System.out.println(<span class="string">"输出原始的数组"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> [] ints :array1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> anInt :ints)&#123;</span><br><span class="line">                System.out.println(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转换为稀疏数组保存</span></span><br><span class="line">        <span class="comment">//获取有效值的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">11</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;<span class="number">11</span>; j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                  sum++;</span><br><span class="line">              &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"有效值的个数:"</span>+sum);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.创建一个稀疏数组的数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历二维数组，将非零的值存放到稀疏数组。</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array1.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j&lt;array1.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">"稀疏数组"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array2.length;i++)&#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>]+<span class="string">"\t"</span>+array2[i][<span class="number">1</span>]+<span class="string">"\t"</span>+array2[i][<span class="number">2</span>]+<span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"还原"</span>)；</span><br><span class="line">            <span class="comment">//1.读取稀疏数组</span></span><br><span class="line">            <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span> [array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//2.给其中的元素还原它的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array2.length;i++)&#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.打印</span></span><br><span class="line">        System.out.println(<span class="string">"输出还原的数组"</span>)；</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> [] ints:array1)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> anInt: ints)&#123;</span><br><span class="line">                    System.out.println(anInt+<span class="string">"\t"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase_方法</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/20/Javase-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法<a id="more"></a></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println()</span><br><span class="line">    </span><br><span class="line">    System   系统类</span><br><span class="line">    out      对象</span><br><span class="line">    println  方法</span><br></pre></td></tr></table></figure>

<p>方法即是功能块。一个方法完成一个功能，有利于后期的拓展。</p>
<p>命名规则：首字母小写，后用驼峰命名法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> sum = add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">     System.<span class="function">out <span class="title">println</span><span class="params">(sum)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//add就是方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法包含一个方法头和一个方法体。</p>
<ul>
<li>修饰符：定义该方法的访问类型</li>
<li>返回值类型：方法可能会返回值</li>
<li>方法名：方法的实际名称。方法名和参数表共同构成方法签名。</li>
<li>参数类型：方法被调用时，传递值给参数。<ul>
<li>形式参数：在方法被调用时用于接收外界输入的数据</li>
<li>实参：调用方法时实际传给方法的数据</li>
</ul>
</li>
<li>方法体：包含具体的语句，定义该方法的功能。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名（参数类型 参数名）&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p>
<p>方法重载的规则：</p>
<ul>
<li>方法名称必须相同</li>
<li>参数列表必须不同</li>
<li>方法的返回值类型可以相同也可以不同</li>
<li>仅仅返回类型不同不足以成为方法的重载。</li>
</ul>
<p>实现理论：</p>
<p>方法名相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 进行了一次攻击 ，但是不确定打中谁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero h1)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"对"</span> + h1.name + <span class="string">"进行了一次攻击 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero h1, Hero h2)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"同时对"</span> + h1.name + <span class="string">"和"</span> + h2.name + <span class="string">"进行了攻击 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero bh = <span class="keyword">new</span> ADHero();</span><br><span class="line">        bh.name = <span class="string">"赏金猎人"</span>;</span><br><span class="line"> </span><br><span class="line">        Hero h1 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h1.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        Hero h2 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h2.name = <span class="string">"提莫"</span>;</span><br><span class="line"> </span><br><span class="line">        bh.attack(h1);</span><br><span class="line">        bh.attack(h1, h2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>一个方法中只能指定一个可变参数，他必须是方法的最后一个参数，任何普通的参数必须在他之前声明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入若干个double类型数据，比较大小后输出最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">       printMax(...number:<span class="number">34</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">56.5</span>);</span><br><span class="line">       printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line">   &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"No argument passed"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> result = number[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt; number.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number[i]&gt;result)&#123;</span><br><span class="line">                result = number[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"The max value is "</span> + result)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归就是A方法调用A方法，即自己调用自己。</p>
<p>递归结构包括两部分</p>
<ul>
<li>递归头：什么时候不调用自身方法。如果没有头，将进入死循环</li>
<li>递归体：什么时候需要调用自身方法。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阶乘的算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arge)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n*f(n:n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase-集合</title>
    <url>/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合<a id="more"></a></h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><strong>栈</strong></p>
<ul>
<li><strong>栈：stack</strong>，又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除工作，不允许在其他任何位置进行添加，查找，删除等操作</li>
</ul>
<p>简单来说：采用该结构的集合，对元素的存取有如下的特点</p>
<ul>
<li>先进后出（即，存进去的元素，要在他后面的元素依次取出之后，才能取出该元素）。例如，子弹压入弹夹，先压进去的子弹在下面，后压进去的子弹在上面，开枪时，先弹出上面的子弹，才能弹出下面的子弹。</li>
<li>栈的入口，出口都是在栈的顶端位置</li>
</ul>
<p><a href="https://www.wailian.work/image/QmMI4o" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200909_102757.png" alt="sp200909_102757.png"></a></p>
<p><strong>队列</strong></p>
<ul>
<li><strong>队列：queue</strong>，简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li>
</ul>
<p>简单的说，采用该结构的集合，对元素的存取有如下特点：</p>
<ul>
<li><strong>先进先出</strong>，（即存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如：小火车过山洞，车头先进去，车尾后出来。</li>
<li>队列的入口，出口各占一侧，例如，下图中的左侧为入口，右侧为出口。</li>
</ul>
<p><strong>数组</strong></p>
<ul>
<li><strong>数组：Array</strong>，是有序的元素数列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号可以快速找到租房子的人。</li>
</ul>
<p>简单来说，采用该结构的集合，对元素的存取有如下的特点：</p>
<ul>
<li><strong>查找元素快</strong>：通过索引，可以快速访问指定位置的元素</li>
<li><strong>增删元素慢</strong>：指定索引位置增加元素：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。</li>
</ul>
<p><a href="https://www.wailian.work/image/QmM9MN" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200909_105827.png" alt="sp200909_105827.png"></a></p>
<p><strong>链表</strong></p>
<ul>
<li><strong>链表：linked list</strong>，由一系列节点node（链表中每一个元素称为结点）组成，结点可以在运动时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有<strong>单向链表和双向链表</strong>。此处说的是单向链表。</li>
</ul>
<p>简单来说，采用该结构的集合，对元素的存取有如下特点：</p>
<p><strong>单向链表</strong>：链表中只有一条链子，不能保证元素的顺序（存储元素和取出元素的顺序可能不一致）</p>
<p><strong>双向链表</strong>：链表中有两条链子，有一条链子是专门记录元素的顺序，是一个有序集合。</p>
<ul>
<li>多个结点之间，通过地址进行连接。例如：多个人手拉手，每个人使用自己的右手拉住下一个人的左手，依次类推，这样多个人就连在一起了。</li>
<li>查找元素慢：想查找某个元素，需要通过连接的结点，依次向后查找指定元素。</li>
<li>增删元素快：只需要修改连接下个元素的地址即可。</li>
</ul>
<p><strong>红黑树</strong></p>
<ul>
<li><strong>二叉树：binary tree</strong>,是每个结点不超过2的有序树。</li>
</ul>
<p>简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点都最多只能有两个子结点。</p>
<p><strong>二叉树</strong>是每个节点最多有两个子树的树结构，顶点的叫根结点，两边被称作“左子树”和“右子树”。</p>
<p><strong>红黑树</strong>本身就是一个二叉查找树，将节点插入后，该树仍然是一颗二叉查找树，也就意味着树的键值仍然是有序的。</p>
<ul>
<li><p><strong>特点：</strong>趋近于平衡树，<strong>查询的速度非常快</strong>，查询叶子节点最大次数和最小次数不能超过2倍。</p>
</li>
<li><p><strong>约束：</strong></p>
<ul>
<li>节点可以是红色的或者是黑色的</li>
<li>根节点是黑色的</li>
<li>叶子节点（空节点）是黑色的</li>
<li>每个红色的节点的子节点是黑色的</li>
<li>任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同。</li>
</ul>
</li>
<li><p><strong>排序树/查找树</strong></p>
</li>
</ul>
<p>在二叉树的基础上，元素是有大小顺序的，左子树小，右子树大。</p>
<ul>
<li><strong>平衡树</strong></li>
</ul>
<p>左子树和右子树数量相等。</p>
<p><a href="https://www.wailian.work/image/QmMOOR" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200909_152303.png" alt="sp200909_152303.png"></a></p>
<h2 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h2><h3 id="ArrayList集合概述和基本使用"><a href="#ArrayList集合概述和基本使用" class="headerlink" title="ArrayList集合概述和基本使用"></a>ArrayList集合概述和基本使用</h3><p>java.util.ArrayList是大小可变的数组的实现，存储在内的数据称为元素，此类提供一些方法来操作内部存储的元素，ArrayList中可不断添加元素，其大小也自动增长。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组的长度不可以发生改变。</span></span><br><span class="line"><span class="comment">但是ArrayList集合的长度是可以随意变化的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对于ArrayList来说，由一个尖括号&lt;E&gt;代表泛型。</span></span><br><span class="line"><span class="comment">泛型：也就是装在集合当中的所有元素，全都是统一的什么类型。</span></span><br><span class="line"><span class="comment">注意：泛型只能是引用类型，不能是基本类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">	对于ArrayList集合来说，直接打印得到的不是地址值，而是内容。如果内容为空，得到的是空的中括号。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ArrayList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建了一个ArrayList集合，集合的名称是list，里面装的全都是String字符串类型的数据。</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);<span class="comment">//[]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//向集合中添加数据，需要用到add方法。</span></span><br><span class="line">        list.add(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        list.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[赵丽颖, 迪丽热巴]</span></span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArrayLiat集合常用方法及遍历"><a href="#ArrayLiat集合常用方法及遍历" class="headerlink" title="ArrayLiat集合常用方法及遍历"></a>ArrayLiat集合常用方法及遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ArrayList当中的常用方法：</span></span><br><span class="line"><span class="comment">	public boolean add(E e);向集合中添加元素，参数类型和泛型一致</span></span><br><span class="line"><span class="comment">	public E get(int index);从集合中获取元素，参数是索引编号，返回值就是对应位置的元素。</span></span><br><span class="line"><span class="comment">	public E remove(int index);从集合中删除元素，参数是索引编号，返回值就是被删掉的元素。</span></span><br><span class="line"><span class="comment">	public int size();获取集合的尺寸长度，返回值是集合中包含的元素个数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03ArrayListMethod</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);<span class="comment">//[]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//向集合中添加元素：add</span></span><br><span class="line">        <span class="keyword">boolean</span> success = list.add(<span class="string">"柳岩"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//柳岩</span></span><br><span class="line">        System.out.println(<span class="string">"添加的动作是否成功："</span>+ success);<span class="comment">//true</span></span><br><span class="line">        list.add(<span class="string">"高圆圆"</span>);</span><br><span class="line">        list.add(<span class="string">"赵又廷"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[柳岩， 高圆圆， 赵又廷]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从集合中获取元素：get。索引从0开始。</span></span><br><span class="line">        String name  = list.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"第二号索引位置："</span>+name);<span class="comment">//赵又廷</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从集合中删除元素：remove。索引从0开始。</span></span><br><span class="line">        String whoRemoved = list.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"被删除的人是："</span>+whoRemoved);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取集合的长度尺寸，也就是其中元素的个数</span></span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        System.out.println(<span class="string">"集合的长度是："</span>+size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04ArrayListEach</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        list.add(<span class="string">"古力娜扎"</span>);</span><br><span class="line">        list.add(<span class="string">"马尔扎哈"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArrayList集合存储基本数据类型"><a href="#ArrayList集合存储基本数据类型" class="headerlink" title="ArrayList集合存储基本数据类型"></a>ArrayList集合存储基本数据类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果希望向集合ArrayList当中存储基本数据类型，必须使用基本类型对应的包装类。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05ArrayListBasic</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; listA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//错误写法!泛型只能是引用类型，不能是基本类型</span></span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; listC = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listC.add(<span class="number">100</span>);</span><br><span class="line">        listC.add(<span class="number">200</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[100, 200]</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> num = listC.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数值添加到集合"><a href="#数值添加到集合" class="headerlink" title="数值添加到集合"></a>数值添加到集合</h3><p>生成6个1~33之间的随机数，添加到集合，并遍历集合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01ArrayList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Random对象</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建ArrayList对象</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加随机数到集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> r = random.nextInt(<span class="number">33</span>) + <span class="number">1</span>;</span><br><span class="line">            list.add(r);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历集合输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象添加到集合"><a href="#对象添加到集合" class="headerlink" title="对象添加到集合"></a>对象添加到集合</h3><p>自定义4个学生对象，添加到集合，并遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02ArrayList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"赵丽颖"</span>,<span class="number">18</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"唐嫣"</span>,<span class="number">20</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"景甜"</span>,<span class="number">25</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">"柳岩"</span>,<span class="number">19</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把学生对象作为元素添加到集合中</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line">        list.add(s4);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; list.size(); x++)&#123;</span><br><span class="line">            Student s = list.get(x);</span><br><span class="line">            System.out.println(s.getName()+<span class="string">"---"</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打印集合方法"><a href="#打印集合方法" class="headerlink" title="打印集合方法"></a>打印集合方法</h3><p>定义指定格式打印集合的方法（ArrayList类型作为参数），使用{}扩起集合，使用@分隔每个元素。格式按照{元素@元素@元素}。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03ArrayList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加字符串到集合中</span></span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        list.add(<span class="string">"宋远桥"</span>);</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"殷梨亭"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        printArrayList(list);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrayList</span><span class="params">(ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&#123;"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">          String name = list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i == list.size()-<span class="number">1</span>)&#123;</span><br><span class="line">                System/out.println(name +<span class="string">"&#125;"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(name + <span class="string">"@"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h2><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><p>集合按照其存储结构可以分为两大类，分别是单列集合Collection和双列集合Map。</p>
<ul>
<li>Collection:单列集合类的根接口，用于存储一系列符合某种规则的元素，他有两个重要的子接口，分别是List和Set。其中，List的特点是元素有序，元素可重复。Set的特点是元素无序，而且不可重复 。</li>
<li>List接口的主要实现类是 java.util.ArrayList 和java.util.LinkedList。</li>
<li>Set接口的主要实现类是java.util.HashSet 和 java.util.TreeSet。</li>
</ul>
<p><a href="https://www.wailian.work/image/QmMzTK" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200914_131004.png" alt="sp200914_131004.png"></a></p>
<h3 id="单列集合的体系结构"><a href="#单列集合的体系结构" class="headerlink" title="单列集合的体系结构"></a>单列集合的体系结构</h3><ul>
<li>Collection：单列集合最顶端的接口<ul>
<li>List集合：是单列集合的一种，有索引，可以存储重复元素，可以保证存储顺序<ul>
<li>ArrayList：底层是数组实现的，查询快，增删慢。</li>
<li>LinkList：底层是链表实现的，查询慢，增删快。</li>
</ul>
</li>
<li>Set集合：无索引，不可以存储重复元素，存储无序。<ul>
<li>HashSet：底层是哈希表和红黑树实现的，无索引，不可以存储重复元素，存储无序。</li>
<li>LinkedHashSet：底层是哈希表和链表实现的，无索引，不可以存储重复的元素，可以保证存取顺序。</li>
<li>TreeSet：底层是二叉树实现。一般用于排序。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Collection集合常用方法"><a href="#Collection集合常用方法" class="headerlink" title="Collection集合常用方法"></a>Collection集合常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;		向集合中添加元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(E e)</span></span>;	删除集合中的某个元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;			清空集合所有元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>;	判断集合中是否包含某个元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;		判断集合是否为空</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;				获取集合的长度</span><br><span class="line">Object[] toArray();		将集合转成一个数组</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">boolean add(E e);		向集合中添加元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">boolean remove(E e);	删除集合中的某个元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void clear();			清空集合所有元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">boolean contains(E e);	判断集合中是否包含某个元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">boolean isEmpty();		判断集合是否为空</span></span><br><span class="line"><span class="comment">int size();				获取集合的长度</span></span><br><span class="line"><span class="comment">Object[] toArray();		将集合转成一个数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//boolean add(E e);  向集合中添加元素</span></span><br><span class="line">        coll.add(<span class="string">"hello"</span>);</span><br><span class="line">        coll.add(<span class="string">"world"</span>);</span><br><span class="line">        coll.add(<span class="string">"heima"</span>);</span><br><span class="line">        coll.add(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(coll);<span class="comment">//[hello, world, heima, java]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//boolean remove(E e);  删除集合中的某个元素</span></span><br><span class="line">        <span class="keyword">boolean</span> result = coll.remove(<span class="string">"hello2"</span>)；</span><br><span class="line">        System.out.println(result);<span class="comment">//true</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[world, heima, java]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//void clear();   清空集合所有的元素</span></span><br><span class="line">        coll.clear();</span><br><span class="line">        System.out.println(coll);  <span class="comment">//[]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//boolean contains(E e);  判断集合中是否包含某个元素</span></span><br><span class="line">        <span class="keyword">boolean</span> result = coll.contains(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(result);  <span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//boolean isEmpty();  判断集合是否为空。</span></span><br><span class="line">        System.out.println(coll.isEmpty());  <span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int size();  获取集合长度</span></span><br><span class="line">        System.out.println(coll.size());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Object[] toArray();</span></span><br><span class="line">        Object[] arr = coll.toArray()</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.List接口extends Collection接口</span></span><br><span class="line"><span class="comment">List接口的特点：</span></span><br><span class="line"><span class="comment">	有序的集合，存储元素和取出元素的顺序是一致的。</span></span><br><span class="line"><span class="comment">	有索引，包含了一些带索引的方法。</span></span><br><span class="line"><span class="comment">	允许存储重复的元素。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">List接口中带索引的方法(特有)：</span></span><br><span class="line"><span class="comment">	public void add(int index, E element):将指定的元素，添加到该集合中的指定位置上。</span></span><br><span class="line"><span class="comment">    public E get(int index):返回集合中指定位置的元素。</span></span><br><span class="line"><span class="comment">    public E remove(int index):移除列表中指定位置的元素，返回的是被移除的元素。</span></span><br><span class="line"><span class="comment">    public E set(int index, E element):用指定元素替换集合中指定位置的元素，返回值的更新前的元素。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">	操作索引的时候，一定要防止索引越界异常。</span></span><br><span class="line"><span class="comment">	IndexOutOfBoundsException:索引越界异常，集合会报。</span></span><br><span class="line"><span class="comment">	ArrayIndexOutOfBoundsException:数组索引越界异常。</span></span><br><span class="line"><span class="comment">	StringIndexOutOfBoundsException:字符串索引越界异常。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01List</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">//创建一个List集合对象，多态</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方发往集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        lisr.add(<span class="string">"c"</span>);</span><br><span class="line">        list.add(<span class="string">"d"</span>);</span><br><span class="line">        list,add(<span class="string">"a"</span>);</span><br><span class="line">        <span class="comment">//打印集合</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, a]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//public void add(int index, E element):将指定的元素，添加到该集合中的指定位置上。</span></span><br><span class="line"><span class="comment">//在c和d之间添加一个itheima</span></span><br><span class="line">        list.add(<span class="number">3</span>,<span class="string">"itheima"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, itheima, d, a]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//public E remove(int index):移除列表中指定位置的元素，返回的是被移除的元素。</span></span><br><span class="line"><span class="comment">//移除元素</span></span><br><span class="line">        String removeE = list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"被移除的元素："</span>+removeE);<span class="comment">//被移除的元素c</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, itheima, d, a]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//public E set(int index, E element):用指定元素替换集合中指定位置的元素，返回值的更新前的元素。</span></span><br><span class="line"><span class="comment">//把最后一个a，替换成A</span></span><br><span class="line">        String setE = list.set(<span class="number">4</span>, <span class="string">"A"</span>);</span><br><span class="line">        System.out.println(<span class="string">"被替换的元素:"</span>+ setE);<span class="comment">//被替换的元素：a</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, itheima, d, A]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//List集合遍历有3种方式</span></span><br><span class="line">		<span class="comment">//使用普通的for循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;list.size(); i++)&#123;</span><br><span class="line">            <span class="comment">//public E get (int index);返回集合中指定位置的元素。</span></span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">        <span class="comment">//使用迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="comment">//使用增强for</span></span><br><span class="line">        <span class="keyword">for</span>(String s: list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArrayList集合-1"><a href="#ArrayList集合-1" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><p>​        java.util.ArrayList集合是数据存储的结构是<strong>数组</strong>结构。<strong>元素增删慢，查找快。</strong>由于日常开发中使用最多的功能为查询结构，遍历数据，所以ArrayList是最常用的集合。</p>
<p>原因：</p>
<p>​    底层是一个数组结构，添加一个元素是将整个数组复制以后，再添加一个长度。所以增删慢。效率低。</p>
<h3 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h3><p>​        java.util.LinkedList集合数据存储的结构是<strong>链表</strong>结构。<strong>方便元素添加删除</strong>的集合。LinkedList是一个<strong>双向链表</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">LinkedList集合的特点：</span></span><br><span class="line"><span class="comment">	1.底层是一个链表结构：查询慢，增删快</span></span><br><span class="line"><span class="comment">	2.里面包含了大量操作首尾元素的方法。</span></span><br><span class="line"><span class="comment">	注意：使用LinkedList集合特有的方法，不能使用多态。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span>:将指定元素插入此列表的开头</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span>:将指定元素添加到此列表的结尾</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span>:将元素推入此列表所表示的堆栈。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span>:返回此列表的第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span>:返回此列表的最后一个元素</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span>:移除并返回此列表的第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span>:移除并返回此列表的最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span>:从此列表所表示的堆栈处弹出一个元素</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>:如果列表不包含元素，则返回<span class="keyword">true</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LinkedList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//public void addFirst(E e):将指定元素插入此列表的开头</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedList集合对象</span></span><br><span class="line">        LinkedList&lt;String&gt; linked = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        linked.add(<span class="string">"a"</span>);</span><br><span class="line">        linked.add(<span class="string">"b"</span>);</span><br><span class="line">        linked.add(<span class="string">"c"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[a, b, c]</span></span><br><span class="line">        <span class="comment">//public void addFirst(E e):将指定元素插入此列表的开头。</span></span><br><span class="line">        linked.addFirst(<span class="string">"www"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, a, b, c]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vector集合"><a href="#Vector集合" class="headerlink" title="Vector集合"></a>Vector集合</h3><p>Vector类可以实现可增长的对象<strong>数组</strong>。Vector是同步的。单线程。</p>
<h2 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h2><h3 id="HashSet集合"><a href="#HashSet集合" class="headerlink" title="HashSet集合"></a>HashSet集合</h3><p>​        java.util.HashSet是Set接口的一个实现类，它所存储的元素的元素是不可重复的，并且元素都是无序的（即存储顺序不一致）HashSet底层的实现是HashMap支持。</p>
<p>​        HashSet是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找技能。保证元素唯一性的方式依赖于hashCode和equals方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Set接口的特点：</span></span><br><span class="line"><span class="comment">	1.不允许存储重复的元素</span></span><br><span class="line"><span class="comment">	2.没有索引，没有带索引的方法，也不能使用普通的for循环遍历</span></span><br><span class="line"><span class="comment">HashSet特点：</span></span><br><span class="line"><span class="comment">	1.不允许存储重复的元素</span></span><br><span class="line"><span class="comment">	2.没有索引，没有带索引的方法，也不能使用普通的for循环遍历</span></span><br><span class="line"><span class="comment">	3.是一个无序的集合，存储元素和取出元素的顺序有可能不一致</span></span><br><span class="line"><span class="comment">	4.底层是一个哈希表结构(查询的速度非常快)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Set</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法添加元素</span></span><br><span class="line">        set.add(<span class="string">"1"</span>);</span><br><span class="line">        set.add(<span class="string">"3"</span>);</span><br><span class="line">        set.add(<span class="string">"2"</span>);</span><br><span class="line">        set.add(<span class="string">"1"</span>);</span><br><span class="line">        <span class="comment">//使用迭代器遍历set集合</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">        Integer n = it.next();</span><br><span class="line">        System.out.println(n);<span class="comment">//1,2,3</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用增强for遍历set集合</span></span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer i : set)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashSet集合存储数据的结构（哈希表）"><a href="#HashSet集合存储数据的结构（哈希表）" class="headerlink" title="HashSet集合存储数据的结构（哈希表）"></a>HashSet集合存储数据的结构（哈希表）</h3><p>​        <strong>JDK1.8之前，哈希表底层采用数组+ 链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。</strong>但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而在JDK1.8中，<strong>哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样就大大减少了查找时间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 哈希值：是一个十进制的整数，由系统随机给出（就是对象的地址值，是一个逻辑地址，是模拟出来的地址，不是数据实际存储的物理地址）</span></span><br><span class="line"><span class="comment"> 在Object类有一个方法，可以获取对象的哈希值</span></span><br><span class="line"><span class="comment"> int hashCode()	返回该对象的哈希码值</span></span><br><span class="line"><span class="comment"> hashCode的源码：</span></span><br><span class="line"><span class="comment"> 	public native int hashCode();</span></span><br><span class="line"><span class="comment"> 	native:代表该方法调用的是本地操作系统的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashCode</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Person类继承了Object类，所以可以使用Object类的hashCode方法</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> h1 = p1.hashCode();</span><br><span class="line">        System.out.println(h1);</span><br><span class="line">        <span class="comment">//47851648225</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> h2 = p2.hashCode();</span><br><span class="line">        System.out.println(h2);</span><br><span class="line">        <span class="comment">//421560258416  </span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        toString方法的源码：</span></span><br><span class="line"><span class="comment">        	reyurn getClass().getName() + "@" + Integer.toHexString(hashCode());</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        <span class="comment">//com.itheima.demo03.hashCode.Person@841461c</span></span><br><span class="line">        System.out.println(p2);</span><br><span class="line">        <span class="comment">//com.itheima.demo03.hashCode.Person@156654b</span></span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String类的哈希值</span></span><br><span class="line"><span class="comment">        	String类重写Object类的hashCode方法</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(s1.hashCode());<span class="comment">//96354</span></span><br><span class="line">        System.out.println(s2,hashCode());<span class="comment">//96354</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"重地"</span>.hashCode());<span class="comment">//1179395</span></span><br><span class="line">         System.out.println(<span class="string">"通话"</span>.hashCode());<span class="comment">//1179395</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.wailian.work/image/QmMJEr" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200917_100959.png" alt="sp200917_100959.png"></a></p>
<h3 id="Set集合存储元素不重复的原理"><a href="#Set集合存储元素不重复的原理" class="headerlink" title="Set集合存储元素不重复的原理"></a>Set集合存储元素不重复的原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![sp200917_200305](Javase-集合/sp200917_200305.png<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Set集合不允许存储重复元素的原理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02HashSetSaveString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合对象</span></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(s1);</span><br><span class="line">        set.add(s2);</span><br><span class="line">        </span><br><span class="line">        set.add(<span class="string">"重地"</span>);</span><br><span class="line">        set.add(<span class="string">"通话"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//[重地， 通话， abc]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.wailian.work/image/QmMUM1" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200917_200305.png" alt="sp200917_200305.png"></a></p>
<h3 id="HashSet存储自定义类型元素"><a href="#HashSet存储自定义类型元素" class="headerlink" title="HashSet存储自定义类型元素"></a>HashSet存储自定义类型元素</h3><p>给HashSet中存放自定义元素类型时，需要重写对象中的hashCode方法和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	HashSet 存储自定义类型元素</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	set集合报错元素唯一：</span></span><br><span class="line"><span class="comment">		存储的元素(String，Integer,...Student,Person.),必须重写hashCode方法和equlas方法。</span></span><br><span class="line"><span class="comment">	需求：</span></span><br><span class="line"><span class="comment">		同名同年龄的人，视为同一个人，只能存储一次。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03HashSetSavePerson</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合存储Person</span></span><br><span class="line">        HashSet&lt;Person&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">18</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">18</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">19</span>);</span><br><span class="line">        System.out.println(p1.hashCode());</span><br><span class="line">        System.out.println(p2.hashCode());<span class="comment">//哈希值不同</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(p1==p2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(p1.equals p2);<span class="comment">//false</span></span><br><span class="line">        </span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        set.add(p3);</span><br><span class="line">        </span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Person类重写hashCode方法和equlas方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span>  age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//重写equals方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == Person.age &amp;&amp; Object.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">//重写hashCode方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Object.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">//重写toString方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person &#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span>+ </span><br><span class="line">                <span class="string">", age = "</span>+ age +<span class="string">'&#125;'</span><span class="string">"        </span></span><br><span class="line"><span class="string">                       &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public String getName()&#123;</span></span><br><span class="line"><span class="string">        return name;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    public void setName(String name)&#123;</span></span><br><span class="line"><span class="string">        this.name = name;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="LinkedHashSet集合"><a href="#LinkedHashSet集合" class="headerlink" title="LinkedHashSet集合"></a>LinkedHashSet集合</h3><p>它是由链表和哈希表组合的一个数据存储结构。此链接列表定义了迭代顺序，即按照将元素插到set中的顺序进行迭代。</p>
<p>注意：</p>
<p>​    插入顺序不受set中重新插入的元素的影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	java.util.LinkedHashSet集合 extends HashSet集合</span></span><br><span class="line"><span class="comment">	LInkedHashSet集合的特点：</span></span><br><span class="line"><span class="comment">		底层是一个哈希表(数组+链表/红黑树)+链表(多的这条链表用于记录元素的存储顺序，保证元素有序)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04LinkedhashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"www"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(<span class="string">"itcast"</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//[abc, www, itcast]无序，不允许重复。</span></span><br><span class="line">        </span><br><span class="line">        LinkedHashSet&lt;String&gt; linked = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        linked.add(<span class="string">"www"</span>);</span><br><span class="line">        linked.add(<span class="string">"abc"</span>);</span><br><span class="line">        linked.add(<span class="string">"abc"</span>);</span><br><span class="line">        linked.add(<span class="string">"itcast"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, abc, itcast]有序，不允许重复。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>注意事项：</p>
<p>​    1.一个方法的参数列表，只能有一个可变参数。</p>
<p>​    2.如果方法的参数有多个，那么可变参数必须写在参数列表的末尾。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可变参数：是JDK1.5之后出现的新特性</span></span><br><span class="line"><span class="comment">适用前提：</span></span><br><span class="line"><span class="comment">	当方法的参数列表数据类型已经确定，但是参数个数不确定，就可以使用可变参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">是用格式：定义方法时使用</span></span><br><span class="line"><span class="comment">	修饰符 返回值类型 方法名 (数据类型...变量名)&#123;&#125;</span></span><br><span class="line"><span class="comment">可变参数原理：</span></span><br><span class="line"><span class="comment">	可变参数底层是一个数组，根据传递参数个数不同，会创建不同长度的数组，来存储这些参数</span></span><br><span class="line"><span class="comment">	传递的参数个数，可以是0个(不传递)，1,2...多个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01VarArgs</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> i = add(<span class="number">10</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">56</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	定义计算(0~n)整数和的方法</span></span><br><span class="line"><span class="comment">	已知:计算整数的和，数据类型已经确定int</span></span><br><span class="line"><span class="comment">	但是参数的个数不确定，就可以使用可变参数</span></span><br><span class="line"><span class="comment">	add();就会创建一个长度为0的数组</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...arr)</span></span>&#123;</span><br><span class="line">      <span class="comment">//定义一个初始化的变量，记录累加求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历数组，获取数组中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把求到的和返回</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可变参数的特殊写法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">metmod</span><span class="params">(Object...)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Collections集合工具类"><a href="#Collections集合工具类" class="headerlink" title="Collections集合工具类"></a>Collections集合工具类</h2><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><p>java.utils.Collections是集合工具类，用来对集合进行操作。</p>
<p>部分方法如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T...elements)	:往集合中添加一些元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static void shuffle(List&lt;&gt; list)	:打乱集合顺序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static &lt;T&gt; void sort(List&lt;T&gt; list)	:将集合中元素按照默认规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static &lt;T&gt; void sort(List&lt;T&gt; list,Comparator&lt;? super.T&gt; )	:将集合中元素按照指定规则排序。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T...elements)	:往集合中添加一些元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	public static void shuffle(List&lt;&gt; list)	:打乱集合顺序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加多个元素</span></span><br><span class="line">        				      Collections.addAll(list,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>);</span><br><span class="line">        <span class="comment">//可变参数，参数个数不受限制</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, e]</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">//打乱集合顺序</span></span><br><span class="line">       Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//[b, d, c, a, e]        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static &lt;T&gt; void sort(List&lt;T&gt; list)	:将集合中元素按照默认规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">	sort(list&lt;T&gt; list)适用前提</span></span><br><span class="line"><span class="comment">	被排序的集合里边存储的元素，必须实现Comparable，重写接口中的方法compareTo定义排序的规则。</span></span><br><span class="line"><span class="comment">	Comparable接口的排序规则:</span></span><br><span class="line"><span class="comment">		自己(this)-参数:升序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Sort</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        liat.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用sort方法</span></span><br><span class="line">        Collections.sort(list01);<span class="comment">//默认是升序</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static &lt;T&gt; void sort(List&lt;T&gt; list,Comparator&lt;? super.T&gt; )	:将集合中元素按照指定规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Comparator和Comparable的区别：</span></span><br><span class="line"><span class="comment">	Comparable: 自己(this)和别人(参数)比较，自己需要实现Comparable接口，重写比较的规则compare方法。</span></span><br><span class="line"><span class="comment">	Comparator: 相当于找了一个第三方的裁判比较两个。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">Comparator的排序规则:</span></span><br><span class="line"><span class="comment">	o1-o2:升序</span></span><br><span class="line"><span class="comment">	o2-o1:降序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03sort</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayLiat&lt;Integer&gt; List01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">3</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line">        </span><br><span class="line">        Collections.sort(list01, &#123;</span><br><span class="line">            <span class="comment">//重写比较的规则</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer01, Integer02)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1-o2;  <span class="comment">//升序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;  <span class="comment">//降序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自定义类型,需要重写toString </span></span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Student&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"迪丽热巴"</span>, <span class="number">18</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"古力娜扎"</span>, <span class="number">20</span>));</span><br><span class="line">        liat02.add(<span class="keyword">new</span> Student(<span class="string">"杨幂"</span>, <span class="number">17</span>));</span><br><span class="line">        </span><br><span class="line">        Collections.sort(list02, &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student <span class="number">01</span>, Student <span class="number">02</span>)</span></span>&#123;</span><br><span class="line">                <span class="comment">//按照年龄升序</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">01</span>.getAge() - <span class="number">02</span>.getAge();</span><br><span class="line">                <span class="comment">//如果两个人年龄相同，再使用姓名的第一个字母比较</span></span><br><span class="line">                <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line">                    result = <span class="number">01</span>.getName().charAt(<span class="number">0</span>) - <span class="number">02</span>.getName().charAt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>此键映射到值得对象。一个映射不能包含重复的建；每个键最多只能映射到一个值。</p>
<ul>
<li>Collection中的集合，元素是孤立存在的，向集合中存储元素采用一个个元素的方式存储。</li>
<li>Map中的集合，元素是成对存在的，每个元素由键与值两部分组成，通过键可以找对应的值。</li>
<li>Collection 中的集合称为单列集合，Map 中的集合称为双列集合。</li>
<li>Map中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li>
</ul>
<p><a href="https://www.wailian.work/image/QmMkN9" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200919_232025.png" alt="sp200919_232025.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Map集合的特点:</span></span><br><span class="line"><span class="comment">	1.Map集合是一个双列集合，一个元素包含两个值(一个key，一个value)</span></span><br><span class="line"><span class="comment">	2.Map集合中的元素，key和value的数据类型可以相同，也可以不同。</span></span><br><span class="line"><span class="comment">	3.Map集合中的元素，key是不允许重复的，value是可以重复的。</span></span><br><span class="line"><span class="comment">	4.Map集合中的元素，key和value是一一对应。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HashMap集合的特点:</span></span><br><span class="line"><span class="comment">	1.hashMap集合底层是哈希表，查询速度快。</span></span><br><span class="line"><span class="comment">		JDK1.8之前，数组+单向链表</span></span><br><span class="line"><span class="comment">		JDK1.8之后，数组+单向链表/红黑树(链表的长度超过8):提高查询的速度。</span></span><br><span class="line"><span class="comment">	2.hashMap集合是一个无序的集合，存储元素和取出元素的顺序有可能不一致。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">LinkedHashMap的特点:</span></span><br><span class="line"><span class="comment">	1.LinkedHashMap集合底层是哈希表+链表(保证迭代顺序)</span></span><br><span class="line"><span class="comment">	2.LinkedHashMap集合是一个有序的集合，存储元素和取出元素的顺序是一致的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Map</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public  V put(K key, V value):把指定的键与指定的值添加到Map集合中。</span></span><br><span class="line"><span class="comment">    返回值：V</span></span><br><span class="line"><span class="comment">    	存储键值对的时候，key不重复，返回值V是null</span></span><br><span class="line"><span class="comment">    	存储键值对的时候，key重复，会使用新的value替换map中重复的value，返回被替换的value值。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象，多态</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        map.put(<span class="string">"冷锋"</span>，<span class="string">"龙小云"</span>);</span><br><span class="line">        map.put(<span class="string">"杨过"</span>，<span class="string">"小龙女"</span>);</span><br><span class="line">        map.put(<span class="string">"尹志平"</span>，<span class="string">"小龙女"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;杨过=小龙女， 尹志平=小龙女， 冷锋=龙小云&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public V remove(Object key):把指定的键所对应的的键值对元素 在Map集合中删除，返回被删除元素的值。</span></span><br><span class="line"><span class="comment">    返回值:V</span></span><br><span class="line"><span class="comment">    	key存在，v返回被删除的值</span></span><br><span class="line"><span class="comment">    	key不存在，v返回null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        </span><br><span class="line">        Integer v1 = map.remove(<span class="string">"林志玲"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v1"</span>+v1);<span class="comment">//v1：178</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public V get(Object key) 根据指定的键，在Map集合中获取对应的值。</span></span><br><span class="line"><span class="comment">    	返回值:</span></span><br><span class="line"><span class="comment">    		key存在，返回对应的value值</span></span><br><span class="line"><span class="comment">    		key不存在，返回null</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">        </span><br><span class="line">        Integer v1 = map.get(<span class="string">"杨颖"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v1:"</span>+v1);<span class="comment">//v1:165</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   boolean containsKey(Object key) 判断集合中是否包含指定的键。</span></span><br><span class="line"><span class="comment">   	包含返回true，不包含返回false</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">     <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">boolean</span> b1 = map.containsKey(<span class="string">"赵丽颖"</span>);</span><br><span class="line">    	System.out.println(<span class="string">"b1:"</span> +b1);<span class="comment">//ture</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Map集合遍历-键找值方式"><a href="#Map集合遍历-键找值方式" class="headerlink" title="Map集合遍历   键找值方式"></a>Map集合遍历   键找值方式</h3><p>键找值方式:即通过元素的键，获取键所对应的值</p>
<p>分析步骤:<br>    1.获取Map中所有的键，由于键是唯一性的，所以返回一个Set集合存储所有的键。方法提示:keyset();</p>
<p>​    2.遍历键的Set集合，得到每一个键。</p>
<ol start="3">
<li>根据键，获取键所对应的值，方法提示:get（K key）;</li>
</ol>
<p><a href="https://www.wailian.work/image/QmMEWV" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200920_093430.png" alt="sp200920_093430.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Map集合的第一种遍历方式:通过键找值的方式</span></span><br><span class="line"><span class="comment">	Map集合中的方法:</span></span><br><span class="line"><span class="comment">		Set&lt;K&gt; keySet()  返回此映射中包含的键的Set视图</span></span><br><span class="line"><span class="comment">	实现步骤:</span></span><br><span class="line"><span class="comment">		1.使用Map集合中的方法keySet()，把Map集合所有的key取出来，存储到一个Set集合中</span></span><br><span class="line"><span class="comment">		2.遍历Set集合，获取Map集合中的每一个key</span></span><br><span class="line"><span class="comment">		3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02KeySet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.使用Map集合中的方法keySet()，把Map集合所有的key取出来，存储到一个Set集合中</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.遍历Set集合，获取Map集合中的每一个key</span></span><br><span class="line">        <span class="comment">//使用迭代器遍历Set集合</span></span><br><span class="line">        Integer&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            String key = it.next();</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+ <span class="string">"="</span> +value);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用增强for遍历Set集合</span></span><br><span class="line">        <span class="keyword">for</span>(String key : set)&#123;</span><br><span class="line">           Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+ <span class="string">"="</span> +value); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Entry键值对对象"><a href="#Entry键值对对象" class="headerlink" title="Entry键值对对象"></a>Entry键值对对象</h3><p>我们已经知道，Map中存放的是两种对象，一种称为key(键)，一种称为value(值)，他们在Map中是一一对应的关系，这一对对象又称作Map中的一个Entry(项)。Entry将键值对的对应关系封装成对象。即键值对对象，这样我们在遍历Map集合时，就可以从每一个键值对Entry对象中获取对应的键与对应的值</p>
<p><a href="https://www.wailian.work/image/QmM8Ek" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/11/sp200920_105105.png" alt="sp200920_105105.png"></a></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Map集合遍历的第二种方式：使用Entry对象遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Map集合中的方法:</span></span><br><span class="line"><span class="comment">		Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()  返回此映射中包含的映射关系的Set视图。</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	实现步骤:</span></span><br><span class="line"><span class="comment">		1.使用Map集合中的方法entrySet(),把Map集合中多个Entry对象取出来，存储到一个Set集合中。</span></span><br><span class="line"><span class="comment">		2.遍历Set集合，获取每一个Entry对象</span></span><br><span class="line"><span class="comment">		3.使用Entry对象中的方法getKey()和getValue()获取键与值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03EntrySet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">        <span class="comment">//1.使用Map集合中的方法entrySet(),把Map集合中多个Entry对象取出来，存储到一个Set集合中。</span></span><br><span class="line">        Set &lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.遍历Set集合，获取每一个Entry对象</span></span><br><span class="line">        <span class="comment">//使用迭代器遍历Set集合</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; entry = it.next();</span><br><span class="line">            <span class="comment">//3.使用Entry对象中的方法getKey()和getValue()获取键与值.</span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.ou.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap存储自定义类型键值"><a href="#HashMap存储自定义类型键值" class="headerlink" title="HashMap存储自定义类型键值"></a>HashMap存储自定义类型键值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">Map集合保证key是唯一性的：</span></span><br><span class="line"><span class="comment">	作为key的元素，必须重写hashCode方法和equals方法，保证key唯一。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashMapSavePerson</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">msin</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">    key:String类型</span></span><br><span class="line"><span class="comment">    	String类型重写hashCode方法和equals方法，保证key唯一。</span></span><br><span class="line"><span class="comment">    value:Person类型</span></span><br><span class="line"><span class="comment">    	value可以重复</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 		<span class="comment">//创建HashMap集合</span></span><br><span class="line">        HashMap&lt;String,Person&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加元素</span></span><br><span class="line">        map.put(<span class="string">"北京"</span>,<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">"上海"</span>,<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">19</span>));</span><br><span class="line">        map.put(<span class="string">"广州"</span>,<span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">20</span>));</span><br><span class="line">        map.put(<span class="string">"北京"</span>,<span class="keyword">new</span> Person(<span class="string">"赵六"</span>,<span class="number">18</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用keySet加增强for遍历Map集合</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : set)&#123;</span><br><span class="line">            Person value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"--&gt;"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>在HashMap下面有一个子类LinkedHashMap，它是链表和哈希表组合的一个数据存储结构。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Map接口的哈希表和链接列表实现，具有可预知的迭代顺序。</span></span><br><span class="line"><span class="comment">底层原理：</span></span><br><span class="line"><span class="comment">	哈希表+链表(记录元素的顺序)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01LinkedHashMap</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"a"</span>,<span class="string">"a"</span>);</span><br><span class="line">        map.put(<span class="string">"c"</span>,<span class="string">"c"</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>,<span class="string">"b"</span>);</span><br><span class="line">        map.put(<span class="string">"a"</span>,<span class="string">"d"</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//key不允许重复，无序</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        LinkedHashMap&lt;String,String&gt; Linked = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        Linked.put(<span class="string">"a"</span>,<span class="string">"a"</span>);</span><br><span class="line">        Linked.put(<span class="string">"c"</span>,<span class="string">"c"</span>);</span><br><span class="line">        Linked.put(<span class="string">"b"</span>,<span class="string">"b"</span>);</span><br><span class="line">        Linked.put(<span class="string">"a"</span>,<span class="string">"d"</span>);</span><br><span class="line">        System.out.println(Linked);<span class="comment">//key不允许重复，有序&#123;a=b, c=c, b=b&#125;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>此类实现一个哈希表，该哈希表将键映射到对应的值。任何非null对象都可以用作键或值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hashtable:底层是一个哈希表，是一个单线程，线程安全的集合，速度慢。</span></span><br><span class="line"><span class="comment">HashMap:底层是一个哈希表，是一个线程不安全的集合，是多线程集合，速度快</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HashMap集合(之前学的所有集合):可以存储null值，null键。</span></span><br><span class="line"><span class="comment">Hashtable集合:不能存储null值，null键。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Hashtable集合和Vector集合，在JDK1.2之后被HashMap和ArrayLi取代。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Hashtable的子类Properties依然活跃在历史舞台</span></span><br><span class="line"><span class="comment">Properties集合是唯一一个和IO流结合的集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Hashtable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="string">"a"</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>,<span class="keyword">null</span>);</span><br><span class="line">        map.put(nill,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;null=null, b=null&#125;</span></span><br><span class="line">        </span><br><span class="line">        Hashtable&lt;String,String&gt; table = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        table.put(<span class="keyword">null</span>,<span class="string">"a"</span>);</span><br><span class="line">        table.put(<span class="string">"b"</span>,<span class="keyword">null</span>);<span class="comment">//不允许存储空值空键，空指针异常</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase_注解与反射</title>
    <url>/Mr-lee-MQ.hithub.io/2020/10/25/Javase-%E6%B3%A8%E8%A7%A3%E4%B8%8E%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="注解与反射"><a href="#注解与反射" class="headerlink" title="注解与反射"></a>注解与反射<a id="more"></a></h1><p><strong>什么是注解</strong></p>
<ul>
<li>Annotation是从JDK5.0开始引入的新技术</li>
<li>Annotation的作用<ul>
<li>不是程序本身，可以对程序作出解释（这一点和注释（comment）没有区别）</li>
<li><mark>可以被其他程序（编译器）读取。</mark></li>
</ul>
</li>
<li>Annotation的格式：<ul>
<li>注解是以“@注释名”在代码中存在的，还可以添加一些参数值，例：如：@SuppressWarnings(value=”unchecked”)。</li>
</ul>
</li>
<li>Annotation在那里可以用？<ul>
<li>可以附加在package，class，method，field等上面，相当于给他们添加了额外的辅助消息，我们可以通过反射机制编程实现对这些元数据的访问。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//什么是注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span> <span class="keyword">extends</span> <span class="title">Object</span></span>&#123;</span><br><span class="line">    <span class="comment">//@Override  重写的注解</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">super</span>.toString();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="内置注解"><a href="#内置注解" class="headerlink" title="内置注解"></a>内置注解</h3><p><strong>@Override：</strong>定义在java.lang.Override中，此注释只适合于修辞方法，表示一个方法声明打算重写超类中的另一个方法声明。</p>
<p><strong>@Deprecated：</strong>定义在java.lang.Deprecated中，此注释可以用于修辞方法，属性，类，表示不鼓励程序员使用这样的元素，通常是因为它很危险或者存在更好的选择。</p>
<p><strong>@SupperessWarnings：</strong>定义在java.lang.SuppressWarnings中，用来抑制编译时的警告信息。</p>
<ul>
<li>与前两个注释有所不同，你需要添加一个参数才可以正确的使用，这些参数都是已经定义好了的，我们选择性的使用就好。<ul>
<li>@SuppressWarnings(“all”)</li>
<li>@SuppressWarnings(“unchecked”)</li>
<li>@SuppressWarnings(value = {“unchecked”,”deprecation”})</li>
<li>等等</li>
</ul>
</li>
</ul>
<h3 id="元注解"><a href="#元注解" class="headerlink" title="元注解"></a>元注解</h3><ul>
<li>元注解的作用就是负责注解其他注解，Java定义了4个标准的meta-annotation类型，他们被用来提供对其他annotation类型作说明。</li>
<li>这些类型和他们所支持的类在java.lang.annotation包中可以找到（@Target，@Retention，@Documented，@Inherited）<ul>
<li>@Target：用于描述注解的使用范围（即：被描述的注解可以用在什么地方）</li>
<li>@Retention：表示需要在什么级别保存该注释信息，用于描述注解的生命周期。<ul>
<li>（SOURCE&lt;CLASS&lt;RUNTIME）</li>
</ul>
</li>
<li>@Document：说明该注解将包含在javadoc中。</li>
<li>@Inherited：说明子类可以继承父类中的该注解。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试元注解</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@MyAnnotation</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个注解</span></span><br><span class="line"><span class="comment">//Target  表示我们的注解可以用在哪些地方</span></span><br><span class="line"><span class="meta">@Target</span>(value = &#123;ElementType.METHOD,ElementType.TYPE&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//Retention  表示我们的注解可以用在哪些地方</span></span><br><span class="line"><span class="meta">@Retention</span>(value = RetentionPolity.RUNTIME)</span><br><span class="line"><span class="meta">@interface</span> MyAnnotation&#123;    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Docuemnted  表示是否将我们的注解生成在JAVAdoc中</span></span><br><span class="line"><span class="meta">@Documented</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Inherited   子类可以继承父类的注解</span></span><br><span class="line"><span class="meta">@Inherited</span></span><br><span class="line"><span class="meta">@interface</span> MyAnntation&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="自定义注解"><a href="#自定义注解" class="headerlink" title="自定义注解"></a>自定义注解</h3><p>使用@interface自定义注解时，自动继承了java.lang.annotation.Annotation接口</p>
<p>分析：</p>
<ul>
<li>@interface用来说明一个注解，<strong>格式：public  @  interface  注解名{定义内容}</strong></li>
<li>其中的每一个方法实际上是声明了一个配置参数</li>
<li>方法的名称就是参数的名称</li>
<li>返回值类型就是参数的类型</li>
<li>可以通过default来声明参数的默认值</li>
<li>如果只有一个参数成员，一般参数名为value</li>
<li>注解元素必须要有值，我们定义注解元素时，经常使用空字符串，0作为默认值.</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//自定义注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span></span>&#123;</span><br><span class="line">    <span class="comment">//注解可以显示赋值，如果没有默认值，我们就必须给注解赋值</span></span><br><span class="line">    <span class="meta">@MyAnnotation</span>(name = <span class="string">"秦疆"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Target</span>(&#123;ElementType.TYPE,ElementTyPE.METHOD&#125;)<span class="comment">//目标哦作用域</span></span><br><span class="line"><span class="meta">@Retention</span>(RetentionPolity.RUNTIME)<span class="comment">//在哪个阶段有效</span></span><br><span class="line"><span class="meta">@interface</span> MyAnnotation2&#123;</span><br><span class="line">    <span class="comment">//注解的参数: 参数类型  +  参数名 ();</span></span><br><span class="line">    <span class="function">String <span class="title">name</span><span class="params">()</span> <span class="keyword">default</span>""</span>;</span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">age</span><span class="params">()</span> <span class="keyword">default</span> 0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若只有一个属性，可以定义为value，可以不用写参数</span></span><br></pre></td></tr></table></figure>

<h1 id="反射机制"><a href="#反射机制" class="headerlink" title="反射机制"></a>反射机制</h1><h2 id="反射概述"><a href="#反射概述" class="headerlink" title="反射概述"></a>反射概述</h2><h3 id="静态VS动态语言"><a href="#静态VS动态语言" class="headerlink" title="静态VS动态语言"></a>静态VS动态语言</h3><ul>
<li>动态语言<ul>
<li>是一类在运行时可以改变其结构的语言：例如新的函数，对象，甚至代码可以被引进，已有的函数可以被删除或者是其他结构上的改变。通俗一点说的就是在运行代码时可以根据某些条件改变自身结构。</li>
<li>主要动态语言：Object-C ， C#，JavaScript，PHP，Python等。</li>
</ul>
</li>
<li>静态语言<ul>
<li>与动态语言相对应的，运行时结构不可变的语言就是静态语言。如Java，C，C++。</li>
<li>Java不是动态语言，但Java可以称为“准动态语言”。即Java有一定的动态性，我们可以利用反射机制获得类似动态语言的特性。Java的动态性让编程的时候更加灵活。</li>
</ul>
</li>
</ul>
<h3 id="Java-Reflection"><a href="#Java-Reflection" class="headerlink" title="Java Reflection"></a>Java Reflection</h3><p>Reflection(反射)是Java被视为动态语言的关键，反射机制允许程序在执行期借助于Reflection  API取得任何类的内部信息，并能直接操作任意对象的内部属性及方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class c = Class.forName(<span class="string">"java.lang.String"</span>)</span><br></pre></td></tr></table></figure>

<p>加载完类之后，在堆内存的方法区中就产生了一个Class类型的对象（一个类只有一个Class对象），这个对象就包含了完整的类的结构信息。我们可以通过这个对象看到类的结构。这个对象就像一面镜子，透过这个镜子看到类的结构，所以，我们形象的称之为：反射</p>
<p>正常方式：引入需要的”包类”名称—-&gt;通过new实例化—-&gt;取得实例化对象</p>
<p>反射方式：实例化对象—-&gt;getClass()方法—-&gt;得到完整的”包类”名称</p>
<p><strong>反射机制提供的功能</strong></p>
<ul>
<li>在运行时判断任意一个对象所属的类</li>
<li>在运行时构造任意一个类的对象</li>
<li>在运行时判断任意一个类具有的成员变量和方法</li>
<li>在运行时获取泛型信息</li>
<li>在运行时调用任意一个对象的成员变量和方法</li>
<li>在运行时处理注解</li>
<li>生成动态代理</li>
<li>…….</li>
</ul>
<p><strong>Java反射的优点和缺点</strong></p>
<p>优点:可以实现动态创建对象和编译，体现出很大的灵活性</p>
<p>缺点:对性能有影响。使用反射基本上是一种解释操作，这类操作总是慢于直接执行相同的操作</p>
<p><strong>反射相关的主要API</strong></p>
<ul>
<li>java.lang.Class:代表一个类</li>
<li>java.lang.refect.Method:代表类的方法</li>
<li>java.lang.reflect.Field:代表类的成员变量</li>
<li>java.lang.reflect.Constuctor:代表类的构造器</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//什么是反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ClassNoFoundException</span>&#123;</span><br><span class="line">        <span class="comment">//通过反射获取类的Class对象</span></span><br><span class="line">        Class c1 = Class.ForName(<span class="string">"com.kuang.reflection.User"</span>);</span><br><span class="line">        System.out.println(c1);</span><br><span class="line">        </span><br><span class="line">        Class c2 = Class.forName(<span class="string">"com.kuang.reflection.User"</span>);</span><br><span class="line">        Class c3 = Class.forName(<span class="string">"com.kuang.reflection.User"</span>);</span><br><span class="line">        Class c4 = Class.forName(<span class="string">"com.kuang.reflection.User"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//一个类在内存中只有一个Class对象</span></span><br><span class="line">        <span class="comment">//一个类被加载后，类的整个结构都会被封装在Class对象中。</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(c2.hashCode());</span><br><span class="line">        System.out.println(c3.hashCode());</span><br><span class="line">        System.out.println(c4.hashCode());</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//实体类：类中只有属性</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function">piblic <span class="title">User</span> <span class="params">(String name, <span class="keyword">int</span> id, <span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getId</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(<span class="keyword">int</span> id)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getAge</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="CLass类"><a href="#CLass类" class="headerlink" title="CLass类"></a>CLass类</h3><p>对象照镜子后可以得到的信息：某个类的属性，方法和构造器，某个类到底实现了那些接口。对于每个类而言，JRE都为其保留一个不变的Class类型的对象。一个Class对象包含了特定某个结构（class/interface/enum/annotation/primitive type）的有关信息。</p>
<ul>
<li>CLass本身也是一个类</li>
<li>Class对象只能由系统建立对象</li>
<li>一个加载的类在JVM中只会有一个Class实例</li>
<li>一个Class对象对应的是一个加载到JVM中的一个.class文件</li>
<li>每个类的实例都会记得自己是由哪个Class实例所生成</li>
<li>通过Class可以完整地得到一个类中的所有被加载的结构</li>
<li>Class类是Reflection的根源，针对任何你想动态加载，运行的类，唯有先获得对应的Class对象</li>
</ul>
<h3 id="Class类的常用方法"><a href="#Class类的常用方法" class="headerlink" title="Class类的常用方法"></a>Class类的常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> <span class="title">ClassforName</span><span class="params">(String name)</span><span class="comment">//返回指定类名name的Class对象</span></span></span><br><span class="line"><span class="function">Object <span class="title">newInstance</span><span class="params">()</span><span class="comment">//调用缺省构造函数，返回Class对象的一个实例</span></span></span><br><span class="line"><span class="function"><span class="title">getName</span><span class="params">()</span><span class="comment">//返回此Class对象所表示的实体(类，接口，数组类或void)的名称</span></span></span><br><span class="line"><span class="function">Class <span class="title">getSuperClass</span><span class="params">()</span><span class="comment">//返回当前Class对象的父类的Class对象</span></span></span><br><span class="line"><span class="function">Class[]<span class="title">getinterfaces</span><span class="params">()</span><span class="comment">//返回当前Class对象的接口</span></span></span><br><span class="line"><span class="function">ClassLoader getClassLoader<span class="comment">//返回该类的类加载器</span></span></span><br><span class="line"><span class="function">Constructor[] <span class="title">getConstructors</span><span class="params">()</span><span class="comment">//返回一个包含某些Constructor对象的数组</span></span></span><br><span class="line"><span class="function">Method <span class="title">getMothed</span><span class="params">(String name,Class ..T)</span><span class="comment">//返回一个Method对象，此对象的形参类型为paramType</span></span></span><br><span class="line"><span class="function">Field[] <span class="title">getDeclsredFields</span><span class="params">()</span><span class="comment">//返回Field对象的一个数组</span></span></span><br></pre></td></tr></table></figure>

<h3 id="获取Class类的实例"><a href="#获取Class类的实例" class="headerlink" title="获取Class类的实例"></a>获取Class类的实例</h3><ul>
<li>若已知具体的类，通过类的class属性获取，该方法最为安全可靠，程序性能最高</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class <span class="class"><span class="keyword">class</span> </span>= Person<span class="class">.<span class="keyword">class</span></span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>已知某个类的实例，调用该实例的getClass()方法获取Class对象</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class <span class="class"><span class="keyword">class</span> </span>= person.getClass();</span><br></pre></td></tr></table></figure>

<ul>
<li>已知一个类的全类名，且该类在类路径下，可通过Class类的静态方法forName()获取，可能抛出ClassNotFoundException</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Class <span class="class"><span class="keyword">class</span> </span>= Class.forName(<span class="string">"demo01.Student"</span>);</span><br></pre></td></tr></table></figure>

<ul>
<li>内置基本数据类型可以直接用类名.Type</li>
<li>还可以利用ClassLoader</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试Class类的创建方式有哪些</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03</span></span>&#123;</span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      Person person = <span class="keyword">new</span> Student();</span><br><span class="line">      System.out.println(<span class="string">"这个人是:"</span>+person.name);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//方式一:通过对象获得</span></span><br><span class="line">      Class c1 = person.getClass();</span><br><span class="line">      System.out.println(c1.hashCode());</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//方式二:forname获得</span></span><br><span class="line">      Class c2 = Class.forName(<span class="string">"com.kuang.reflection.Student"</span>);</span><br><span class="line">      System.out.println(c2.hashCode());</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//方式三:通过类名.class获得</span></span><br><span class="line">      Class c3 = Student<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">      System.out.println(c3.hashCode());</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//方式四:基本内置类型的包装类都有一个Type属性</span></span><br><span class="line">      Class c4 = Integer.YTPE;</span><br><span class="line">      System.out.println(c4);</span><br><span class="line">      </span><br><span class="line">      <span class="comment">//方式五:获得父类类型</span></span><br><span class="line">      Class c5 = c1.getSuperclass();</span><br><span class="line">      System.out.println(c5);</span><br><span class="line">  &#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> + <span class="string">"name = '"</span> + name + <span class="string">"\'+'&#125;;</span></span><br><span class="line"><span class="string">    &#125;   </span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">class Student extends Person&#123;</span></span><br><span class="line"><span class="string">        public Student()&#123;</span></span><br><span class="line"><span class="string">            this.name = "</span>学生<span class="string">";</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string"> class Teacher extends Person &#123;</span></span><br><span class="line"><span class="string">        public Teacher()&#123;</span></span><br><span class="line"><span class="string">            this.name = "</span>老师<span class="string">";</span></span><br><span class="line"><span class="string">        &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="哪些类型可以有Class对象"><a href="#哪些类型可以有Class对象" class="headerlink" title="哪些类型可以有Class对象"></a>哪些类型可以有Class对象</h3><p>class：外部类，成员（成员内部类，静态内部类），局部内部类，匿名内部类。</p>
<p>interface：接口</p>
<p>[]：数组</p>
<p>enum：枚举</p>
<p>annotation：注解@interface</p>
<p>primitive type：基本数据类型</p>
<p>void</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//所有类型的Class</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test04</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Class c1 = Object<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class c2 = Comparable<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class c3 = String[]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class c4 = <span class="keyword">int</span> [][]<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class c5 = Override<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class c6 = ElementType<span class="class">.<span class="keyword">class</span></span>;<span class="comment">//枚举</span></span><br><span class="line">        Class c7 = Integer<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">        Class c8 = <span class="keyword">void</span> <span class="class"><span class="keyword">class</span></span>;</span><br><span class="line">        Class c9 = Class<span class="class">.<span class="keyword">class</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="类加载内存分析"><a href="#类加载内存分析" class="headerlink" title="类加载内存分析"></a>类加载内存分析</h2><h3 id="Java内存分析"><a href="#Java内存分析" class="headerlink" title="Java内存分析"></a>Java内存分析</h3><ul>
<li>堆    <ul>
<li>存放new 的对象和数组</li>
<li>可以被所有线程共享，不会存放别的对象引用</li>
</ul>
</li>
<li>栈<ul>
<li>存放基本变量类型（会包含这个基础类型的具体数值）</li>
<li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li>
</ul>
</li>
<li>方法区<ul>
<li>可以被所有的线程共享</li>
<li>包含了所有的class和static变量</li>
</ul>
</li>
</ul>
<h3 id="类的加载过程"><a href="#类的加载过程" class="headerlink" title="类的加载过程"></a>类的加载过程</h3><ul>
<li>类的加载（Load）：将类的class文件读入内存，并为之创建一个java.lang.Class对象。此过程由类加载器完成。</li>
<li>类的链接（Link）：将类的二进制数据合并到JRE中。</li>
<li>类的初始化（Initialize）：JVM负责对类进行初始化。</li>
</ul>
<h3 id="类的加载与ClassLoader的理解"><a href="#类的加载与ClassLoader的理解" class="headerlink" title="类的加载与ClassLoader的理解"></a>类的加载与ClassLoader的理解</h3><ul>
<li>加载:将clas文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象</li>
<li>链接：将Java类的二进制代码合并到JVM的运行状态之中的过程。<ul>
<li>验证：确保加载的类信息符合JVM规范，没有安全方面的问题。</li>
<li>准备：正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</li>
<li>解析：虚拟机常量池的符号引用（常量名）替换为直接饮用（地址）的过程。</li>
</ul>
</li>
<li>初始化：<ul>
<li>执行类构造器&lt; clinit &gt;()方法的过程。类构造器&lt; clinit&gt;() 方法是由编译期自动收集类中所有类变量的复制动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）。</li>
<li>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</li>
<li>虚拟机会保证一个类的&lt; clinit &gt;()方法在多线程环境中被正确加锁和同步。</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test05</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(A,m);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.加载到内存，会产生一个类对应class对象</span></span><br><span class="line"><span class="comment">        2.链接，链接结束后  m = 0</span></span><br><span class="line"><span class="comment">        3.初始化</span></span><br><span class="line"><span class="comment">        	&lt;clinit&gt;()&#123;</span></span><br><span class="line"><span class="comment">        				System.out.println("A类静态代码块初始化");</span></span><br><span class="line"><span class="comment">        				m = 300;</span></span><br><span class="line"><span class="comment">        				m = 100;</span></span><br><span class="line"><span class="comment">        	&#125;</span></span><br><span class="line"><span class="comment">        	</span></span><br><span class="line"><span class="comment">        	m =100;</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"A类静态代码块初始化"</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">A</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A类的无参构造初始化"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="什么时候回发生类初始化"><a href="#什么时候回发生类初始化" class="headerlink" title="什么时候回发生类初始化"></a>什么时候回发生类初始化</h3><ul>
<li><p>类的主动引用（一定会发生类的初始化）</p>
<ul>
<li>当虚拟机启动，先初始化main方法所在的类。</li>
<li>new一个类的对象</li>
<li>调用类的静态成员（除了final常量）和静态方法。</li>
<li>使用java.lang.reflect包的方法对类进行反射调用。</li>
<li>当初始化一个类，如果其父类没有被初始化，则先会初始化他的父类</li>
</ul>
</li>
<li><p>类的被动引用（不会发生类的初始化）</p>
<ul>
<li>当访问一个静态域时，只有真正声明这个域的类才会被初始化。如：当通过子类引用父类的静态变量，不会导致子类初始化。</li>
<li>通过数组定义类引用时，不会触发此类的初始化。</li>
<li>引用常量不会触发类的初始化，（常量在链接阶段就存入调用类的常量池中了）</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试类什么时候会初始化</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test06</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"Main类被加载"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.主动调用</span></span><br><span class="line">        Son son = <span class="keyword">new</span> Son();</span><br><span class="line">        <span class="comment">//反射也会产生主动引用</span></span><br><span class="line">        Class.forName(<span class="string">"com.kuang.reflection.Son"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不会产生类的引用的方法</span></span><br><span class="line">        System.out.println(Son.b);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"父类被加载"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> <span class="keyword">extends</span> <span class="title">Father</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"子类被加载"</span>);</span><br><span class="line">        m = <span class="number">300</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> m = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> M = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类加载器"><a href="#类加载器" class="headerlink" title="类加载器"></a>类加载器</h3><ul>
<li>类加载的作用：将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时的数据结构，然后堆中生成一个代表这个类java.lang.Class对象，作为方法中类数据的访问入口。</li>
<li>类缓存：标准的JavaSE类加载器可以要求查找类，但一旦某个类被加载到类加载器中，他将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象</li>
</ul>
<p><strong>类加载器的作用</strong></p>
<ul>
<li>引导类加载器：用C++编写的，是JVM自带的类加载器，负责Java平台核心库，是来装载核心类库。该加载器无法直接获取。</li>
<li>扩展类加载器：负责jre/lib/ext目录下的jar包或_Djava.ext.dirs指定目录下的jar包装入工作库。</li>
<li>系统类加载器：负责Java-classpath 或_Djava.class.path所指的目录下的类与jar包装入工作，是最常用的加载器。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test07</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取系统类的加载器</span></span><br><span class="line">        ClassLoader systemClassLoader = ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取系统类加载的父类加载器--&gt;扩展类加载器</span></span><br><span class="line">        ClassLOader parent = systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取扩展类加载器的父类加载器</span></span><br><span class="line">        ClassLoader parent1 = parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//如何获得系统加载器可以加载的路径</span></span><br><span class="line">        System.out.println(System.getProperty(<span class="string">"java.class.path"</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//双亲委派机制:多层检测，检测安全性。</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建运行时类的对象"><a href="#创建运行时类的对象" class="headerlink" title="创建运行时类的对象"></a>创建运行时类的对象</h3><p><strong>获取运行时类的完整结构</strong></p>
<p>Field，Method，Constructor，Superclass，Interface，Annotaion</p>
<ul>
<li>实现的全部接口</li>
<li>所继承的父类</li>
<li>全部的构造器</li>
<li>全部的Field</li>
<li>注解</li>
<li>。。。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//获得类的信息</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test08</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">"com.kuang.reflection.User"</span>);</span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得类的名字</span></span><br><span class="line">        System.out.println(c1.getName());<span class="comment">//获得包名+类名</span></span><br><span class="line">        System.out.println(c1.getSimpleName());<span class="comment">//获得类名</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得类的属性</span></span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line">        Field[] fields = c1.getFields();<span class="comment">//只能找到public属性</span></span><br><span class="line">        </span><br><span class="line">        fields = c1.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span>(Field field: field)&#123;</span><br><span class="line">            System.out.println(field);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得指定属性的值</span></span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得类的方法</span></span><br><span class="line">        </span><br><span class="line">        Method[] methods = c1.getMethods();<span class="comment">//获得本类及其父类的全部public 方法</span></span><br><span class="line">        method = c1.getDeclareMethods();<span class="comment">//获得本类的所有方法</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得指定方法</span></span><br><span class="line">        <span class="comment">//因为有重载，所以要写上参数类型</span></span><br><span class="line">        Method getName = c1.getMethod(<span class="string">"getName"</span>,<span class="keyword">null</span>);</span><br><span class="line">        Method setName = c1.getmethod(<span class="string">"setName"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得指定的构造器</span></span><br><span class="line">        Constructor[] constructors = c1.getConstructors(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span> .<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        System.out.println(<span class="string">"指定:"</span>+declaredConstructor);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="动态创建对象执行方法"><a href="#动态创建对象执行方法" class="headerlink" title="动态创建对象执行方法"></a>动态创建对象执行方法</h2><h3 id="有了Class对象，可以做什么？"><a href="#有了Class对象，可以做什么？" class="headerlink" title="有了Class对象，可以做什么？"></a>有了Class对象，可以做什么？</h3><ul>
<li>创建类的对象:调用Class对象的newInstance（）方法<ul>
<li>类必须有一个无参数的构造器</li>
<li>类的构造器的访问权限需要足够</li>
</ul>
</li>
</ul>
<p><strong>思考：难道没有无参的构造器就不能创建对象了吗？只要在操作的时候明确的调用类中的构造器，并将参数传递进去之后，才可以实例化操作。</strong></p>
<ul>
<li>步骤如下<ul>
<li>通过Class类的getDeclaredConstructor（Class…parameterTypes）取得本类的指定形参类型的构造器。</li>
<li>向构造器的形参中传递一个数组对象进去，里面包含了构造器中所需的各个参数。</li>
<li>通过Constructor实例化对象</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//动态的创建对象，通过反射</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test09</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class c1 = Class.forName(<span class="string">"com.kuang.reflection.User"</span>);</span><br><span class="line">        <span class="comment">//构造一个对象</span></span><br><span class="line">        <span class="comment">//User user = (User)c1.newInstance();//本质是调用了类的无参构造</span></span><br><span class="line">        <span class="comment">//System.out.println(user);</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过构造器创建对象</span></span><br><span class="line">        Constructor constructor = c1.getDeclaredConstructor(String<span class="class">.<span class="keyword">class</span>,<span class="title">int</span>.<span class="title">class</span>,<span class="title">int</span>.<span class="title">class</span>)</span>;</span><br><span class="line">        User user2 = (User)constructor.newInstance(<span class="string">"秦疆"</span>，<span class="number">001</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(user2);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过反射调用普通方法</span></span><br><span class="line">        User user3 = (User)c1.newInstance();</span><br><span class="line">        <span class="comment">//通过反射获取一个方法</span></span><br><span class="line">        Method setName = c1.getDeclaredMethod(<span class="string">"setName"</span>,String<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//invoke:激活的意思</span></span><br><span class="line">        <span class="comment">//(对象，"方法的值")</span></span><br><span class="line">        setName.invoke(user3,<span class="string">"狂神"</span>);</span><br><span class="line">        System.out.println(user3.getName());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过反射操作属性</span></span><br><span class="line">        User user4 = (User)c1.newInstance();</span><br><span class="line">        Field name = c1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//不能直接操作私有属性，我们需要关闭系统的安全监测，属性或者方法的setAccessible(true)</span></span><br><span class="line">        name.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        name.set(user4,<span class="string">"狂神2"</span>);</span><br><span class="line">        System.out.println(user4.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="调用指定的方法"><a href="#调用指定的方法" class="headerlink" title="调用指定的方法"></a>调用指定的方法</h3><p>通过反射，调用类中的方法，通过Method类完成。</p>
<ul>
<li>通过Class类的getMethod（String name,Class…parameterTypes）方法取得一个Method对象，并设置此方法操作时所需要的参数类型。</li>
<li>之后使用Object invoke（Object obj,Object[]args）进行调用，并向方法中传递要设置的obj对象的参数信息。</li>
</ul>
<p><strong>Object invoke （Object obj,Object…args）</strong></p>
<ul>
<li>Object对应原方法的返回值，若原方法无返回值，此时返回null</li>
<li>若原方法为静态方法，此时形参Object obj可为null</li>
<li>若原方法形参列表为空，则Object[] args为null</li>
<li>若原方法声明为private，则需要在调用此invoke（）方法前，显式调用方法对象的setAccessible(true)方法，将可访问private的方法。</li>
</ul>
<p><strong>setAccessible</strong></p>
<ul>
<li>Method和Field，Constructor对象都有setAccessible（）方法。</li>
<li>setAccessible作用是启动和禁用访问安全检查的开关。</li>
<li>参数值为true则指示反射的对象在使用时应该取消Java语言访问检查。<ul>
<li>提高反射的效率。如果代码中必须用反射，则该句代码需要频繁的被调用，那么请设置为true。</li>
<li>使得原本无法访问的私有成员也可以访问。</li>
</ul>
</li>
<li>参数值为false则指示反射的对象应该实施java语言访问检查。</li>
</ul>
<h3 id="性能对比分析"><a href="#性能对比分析" class="headerlink" title="性能对比分析"></a>性能对比分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//分析性能问题</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test10</span></span>&#123;</span><br><span class="line">    <span class="comment">//普通方式调用</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">            user.getName();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"普通方式执行10万次:"</span>+(endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//反射方式调用</span></span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException</span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">         </span><br><span class="line">         Method getName = c1.getDeclaredMethod(<span class="string">"getName"</span>,<span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"反射方式执行10万次:"</span>+(endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//反射方式调用   关闭检测</span></span><br><span class="line">         <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> <span class="keyword">throws</span> NoSuchMethodException</span>&#123;</span><br><span class="line">        User user = <span class="keyword">new</span> User();</span><br><span class="line">         </span><br><span class="line">         Method getName = c1.getDeclaredMethod(<span class="string">"getName"</span>,<span class="keyword">null</span>);</span><br><span class="line">        getName.setAccessible(<span class="keyword">true</span>);</span><br><span class="line">        <span class="keyword">long</span> startTime = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>( <span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++)&#123;</span><br><span class="line">            getName.invoke(user,<span class="keyword">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">long</span> endTime = System.currentTimeMillis();</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"关闭检测后方式执行10万次:"</span>+(endTime-startTime)+<span class="string">"ms"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        test01();</span><br><span class="line">        test02();</span><br><span class="line">        test03();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="反射操作泛型"><a href="#反射操作泛型" class="headerlink" title="反射操作泛型"></a>反射操作泛型</h3><ul>
<li>Java采用泛型擦除的机制来引入泛型，Java中的泛型仅仅是给编译器javac使用的，确保数据的安全性和免去强制类型转换问题，但是，一旦编译完成，所有和泛型有关的类型全部擦除。</li>
<li>为了通过反射操作这些类型，Java新增了ParametrizedType，GenercArrayType，TypeVariable和WildcardType 几种类型来代表不能被归一到Class类中的类型但是又和原始类型齐名的类型。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ParameterizedType:表示一种参数化类型，比如Collection&lt;String&gt;</span><br><span class="line"></span><br><span class="line">GenericArrayType:表示一种元素类型是参数化类型或者类型变量的数组类型</span><br><span class="line">    </span><br><span class="line">TypeVariable:是各种类型变量的公共父接口</span><br><span class="line"></span><br><span class="line">WildcardType:代表一种通配符类型表达式</span><br></pre></td></tr></table></figure>

<h2 id="反射操作注解"><a href="#反射操作注解" class="headerlink" title="反射操作注解"></a>反射操作注解</h2><ul>
<li>getAnnotations</li>
<li>getAnnotation</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射操作注解</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test12</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Class c1 = Class.forName(<span class="string">"com.kuang.reflection.Student2"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//通过反射获得注解</span></span><br><span class="line">        Annotation[] annotations = c1.getAnnotations();</span><br><span class="line">        <span class="keyword">for</span> (Annotation anntation : annotations)&#123;</span><br><span class="line">            System.out.println(annotation);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//获得注解的value的值</span></span><br><span class="line">        Tablekuang tablekuang = (Tablekuang).c1.getAnnotation(Tablekuang<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        String value = tablekuang.value();</span><br><span class="line">        System.out.println(value);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得类指定的注解</span></span><br><span class="line">        Field f = c1.getDeclaredField(<span class="string">"name"</span>);</span><br><span class="line">        Fieldkuang annotation = f.getAnnotation(Fieldkuang<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        System.out.println(annotation.columnName());</span><br><span class="line">        System.out.println(annotation.type());</span><br><span class="line">        System.out.println(annotation.length());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@Tablekuang</span>(<span class="string">"db_student"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student2</span></span>&#123;</span><br><span class="line">    <span class="meta">@Fieldkuang</span>(columnName = <span class="string">"db_id"</span>,type = <span class="string">"int"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="meta">@Fieldkuang</span>(columnName = <span class="string">"db_age"</span>,type = <span class="string">"int"</span>,length = <span class="number">10</span>)</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="meta">@Fieldkuang</span>(columnName = <span class="string">"db_name"</span>,type = <span class="string">"varchar"</span>,length = <span class="number">3</span>)</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student2</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//有参构造</span></span><br><span class="line">    <span class="comment">//get，set</span></span><br><span class="line">    <span class="comment">//类名的注解</span></span><br><span class="line">    <span class="meta">@Target</span>(ElementType.TYPE)</span><br><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">    <span class="meta">@interface</span> Tablekuang&#123;</span><br><span class="line">        <span class="function">String <span class="title">value</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//属性的注解</span></span><br><span class="line">    <span class="meta">@Target</span>(ElementType.FIELD)</span><br><span class="line">    <span class="meta">@Retention</span>(RetentionPolicy.RUNTIME)</span><br><span class="line">    <span class="meta">@interface</span> Filedkuang&#123;</span><br><span class="line">        <span class="function">String <span class="title">columnName</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function">String <span class="title">type</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">length</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Maven</title>
    <url>/Mr-lee-MQ.hithub.io/2020/05/30/Maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Maven项目管理工具"><a href="#Maven项目管理工具" class="headerlink" title="Maven项目管理工具"></a>Maven项目管理工具<a id="more"></a></h1><h2 id="为什么使用Maven？"><a href="#为什么使用Maven？" class="headerlink" title="为什么使用Maven？"></a>为什么使用Maven？</h2><ul>
<li><p>jar包管理</p>
<ul>
<li>从Maven中央仓库获取标准的规范的jar包以及相关依赖的jar包，避免自己下载到错误的jar包。</li>
<li>本地仓库统一管理jar包，使得jar包与项目分离，减轻项目体积。</li>
</ul>
</li>
<li><p>Maven是跨平台的可以在window、linux上使用。</p>
</li>
<li><p>清晰的项目结构</p>
</li>
<li><p>多工程开发，将模块拆分成若干个工程，利于团队协作开发。</p>
</li>
<li><p>一键构建项目：使用命令行可以对项目进行一键构建，操作系统中无需安装eclipse和tomcat。</p>
<h2 id="Maven入门"><a href="#Maven入门" class="headerlink" title="Maven入门"></a>Maven入门</h2></li>
<li><p>下载，安装，配置环境变量Maven；</p>
<ul>
<li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a>     下载后解压，放到工作目录下。<ul>
<li>bin：配置文件，脚本</li>
<li>boot：类加载器的框架</li>
<li>conf：配置文件     sttings.xml主要用到的配置文件（全局配置）</li>
<li>lib：库文件</li>
</ul>
</li>
<li><img src="http://s1.wailian.download/2020/06/10/image-20200530172929530.png" alt="image-20200530172929530.png"></li>
</ul>
</li>
<li><p>变量值Maven安装路径到bin目录之前</p>
</li>
</ul>
<h2 id="Maven的优点"><a href="#Maven的优点" class="headerlink" title="Maven的优点"></a>Maven的优点</h2><ul>
<li><p>jar包管理</p>
<ul>
<li><p>从Maven中央仓库获取标准的规范的jar包以及相关依赖的jar包，避免自己下载到错误的jar包。</p>
</li>
<li><p>本地仓库统一管理jar包，使得jar包与项目分离，减轻项目体积。</p>
</li>
<li><p>Maven项目通过坐标的方式从本地仓库获取jar包</p>
<ul>
<li><p>坐标：由公司/组织名（groupld）+ 项目名/子项目名（artifactld）+版本号（version）组成。</p>
</li>
<li><p>本地仓库：存放了很多Jar包，供Maven项目使用。</p>
</li>
<li><p>Maven通过建立本地仓库索引，可以快速的找到符合要求的jar包，从而解决效率问题。</p>
</li>
<li><p>多个Maven项目都可以从本地仓库获取jar包</p>
</li>
<li><p>设置本地仓库：Maven根目录—–conf—-settings.xml，将localRepository标签中的路径替换成自己本地仓库的路径····</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localRepository&gt;&#x2F;path&#x2F;to&#x2F;local&#x2F;repo&lt;&#x2F;localRepository&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Maven三中仓库概念"><a href="#Maven三中仓库概念" class="headerlink" title="Maven三中仓库概念"></a>Maven三中仓库概念</h2><p>本地仓库，远程仓库，中央仓库</p>
<p><a href="https://www.wailian.work/image/AjEarS" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200530175433411.png" alt="image-20200530175433411.png"></a></p>
<ul>
<li>中央仓库（MVN）<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></li>
</ul>
<p>优先级：本地—–远程—–中央                本地仓库没有也没有远程仓库，则直接去中央仓库找。</p>
<h2 id="设置阿里云Maven仓库镜像"><a href="#设置阿里云Maven仓库镜像" class="headerlink" title="设置阿里云Maven仓库镜像"></a>设置阿里云Maven仓库镜像</h2><ul>
<li>在settings.xml文件中的mirrors下添加mirror标签</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line"></span><br><span class="line">&lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line"></span><br><span class="line">&lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line">&lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>maven是由纯java开发，是跨平台的可以在window，linux，mac上使用</li>
<li>清晰的项目结构</li>
<li>使用Maven将大型项目按照模块拆分成若干工程，不同的团队维护各自的工程，可大大的提升开发效率。<ul>
<li>大型商城项目按业务分成商品管理，用户管理，订单管理等模块</li>
<li>中小型项目按照传统项目分为Web，Service，Dao层，依照员工的业务能力分配工作</li>
</ul>
</li>
</ul>
<h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><ul>
<li><p>mvn       命令（在工程目录下）</p>
</li>
<li><p>clean            清理</p>
</li>
<li><p>compile          编译，只编译main文件，不编译test中的代码（记得常clean）</p>
</li>
<li><p>test-compile    编译test目录中的代码 </p>
</li>
<li><p>package     打包           打包完的名字是由pom.xml中的(artifactId——version—-packaging)决定的</p>
<ul>
<li>Java项目—–打成jar包          </li>
<li>web项目—–打成war包</li>
</ul>
</li>
<li><p>install：    发布项目到本地仓库，用在打jar包上，打成jar包可以被其他项目使用</p>
</li>
<li><p>tomcat：run：    一键构建项目</p>
</li>
</ul>
<h2 id="Maven的生命周期"><a href="#Maven的生命周期" class="headerlink" title="Maven的生命周期"></a>Maven的生命周期</h2><ul>
<li>Clean       生命周期：clean</li>
<li>Default      生命周期：compile，test-compile，test，package，install</li>
<li>Silt              生命周期：site命令，生成项目描述文档静态页</li>
<li>不同的生命周期可以一起执行，例如先clean再compile</li>
</ul>
<h2 id="Maven命令的执行顺序"><a href="#Maven命令的执行顺序" class="headerlink" title="Maven命令的执行顺序"></a>Maven命令的执行顺序</h2><ul>
<li>在相同生命周期中的命令才会受执行顺序的影响</li>
<li>Default生命周期中的命令执行顺序：<ul>
<li>compile&lt;—test-compile&lt;—test&lt;—package&lt;—install</li>
</ul>
</li>
</ul>
<h2 id="Maven入门程序"><a href="#Maven入门程序" class="headerlink" title="Maven入门程序"></a>Maven入门程序</h2><ul>
<li><p>创建Maven项目</p>
</li>
<li><p><a href="https://www.wailian.work/image/AjEdI8" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531132200007.png" alt="image-20200531132200007.png"></a></p>
</li>
<li><p><a href="https://www.wailian.work/image/AjE28B" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531132333105.png" alt="image-20200531132333105.png"></a></p>
</li>
<li><p><a href="https://www.wailian.work/image/AjE9a0" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531132454709.png" alt="image-20200531132454709.png"></a></p>
</li>
<li><p><a href="https://www.wailian.work/image/AjEW5l" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531132531764.png" alt="image-20200531132531764.png"></a></p>
</li>
<li><p><a href="https://www.wailian.work/image/AjEN5b" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531115832479.png" alt="image-20200531115832479.png"></a></p>
</li>
<li><p><img src="http://s1.wailian.download/2020/06/10/sp200610_113715.png" alt="sp200610_113715.png"></p>
</li>
</ul>
<ul>
<li><p>在src—&gt;main–&gt;webapp下创建WEB-INF目录，并在目录下创建web.xml</p>
</li>
<li><p>修改Maven默认编译级别</p>
<ul>
<li>全局编译级别–&gt;修改settings.xml</li>
<li>项目级别修改–&gt;项目对应的pox.xml</li>
</ul>
</li>
<li><p>在Java Resourcese -&gt; src/main/java下写代码，创建包和Servlet；</p>
</li>
<li><p>添加servlet-api</p>
</li>
<li><p>在servlet-api中添加scope标签，值为：proviede；</p>
<ul>
<li>如果不加此标签有很大几率报错，因为tomcat中也有servlet-api的包导致冲突；</li>
</ul>
</li>
<li><p>运行：发生错误，原因是maven默认使用tomcat6.xx，不支持@WebServle注解；</p>
<ul>
<li>解决方案1：需要去web.xml中配置Servlet;</li>
<li>解决方案2：配置高版本tomcat插件；</li>
</ul>
</li>
<li><p>最后测试，启动服务，在地址栏输入请求，显示结果；</p>
</li>
<li><p>报错可以更新Maven</p>
</li>
</ul>
<h2 id="IDEA-Maven设置"><a href="#IDEA-Maven设置" class="headerlink" title="IDEA Maven设置"></a>IDEA Maven设置</h2><ul>
<li><p>下载与配置Maven</p>
</li>
<li><p>建立Maven本地仓库</p>
</li>
<li><p>IDEA设置：</p>
<p>File-&gt;Settings-&gt;Build, Execute, Deployment-&gt;Build Tools-&gt;Maven<br>修改 Maven home directory: d:/software/apache-maven-3.5.0<br>修改 User settings file: D:\software\apache-maven-3.5.0\conf\settings.xml<br>Local repository 会被自动识别为 d:\maven\repository</p>
</li>
<li><p>新建项目</p>
<ul>
<li>左边选择Maven</li>
<li>勾选Create from archetype</li>
<li>选择org.apache.maven.archetypes:maven-archetype-quickstart</li>
<li>Maven项目创建后，IDEA还会做一些初始化的工作，那么需要点击右下角的 Import Changes</li>
</ul>
</li>
<li><p>Idea Maven增加Jar</p>
<ul>
<li>修改pom.xml</li>
<li><img src="http://s1.wailian.download/2020/06/10/5761.png" alt="5761.png"></li>
<li>在修改了pom.xml之后，IDEA上会弹出这么一个 Maven projects need to be imported，点击Import Changes</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis框架</title>
    <url>/Mr-lee-MQ.hithub.io/2020/05/27/Mybatis%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="1、MyBatis框架"><a href="#1、MyBatis框架" class="headerlink" title="1、MyBatis框架"></a>1、MyBatis框架<a id="more"></a></h1><p>​            mybatis通过XML或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中的sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</p>
<p>​            采用ORM思想解决了实体与数据库映射的问题，对JDBC进行了封装。</p>
<ul>
<li>ORM：（对象关系映射）就是把数据库表和实体类的属性对应起来，让我们可以操作实体类实现操作数据库表。</li>
</ul>
<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ul>
<li>表现层:　 用于展示数据</li>
<li>业务层: 　用于处理业务需求</li>
<li>持久层: 　是和数据交互的</li>
</ul>
<h2 id="持久层技术解决方案"><a href="#持久层技术解决方案" class="headerlink" title="持久层技术解决方案"></a>持久层技术解决方案</h2><h3 id="JDBC技术"><a href="#JDBC技术" class="headerlink" title="JDBC技术"></a>JDBC技术</h3><p>　　　　　　Connection<br>　　　　　　PreparedStatemnet<br>　　　　　　ResultSet</p>
<h3 id="Spring-的JdbcTemplate："><a href="#Spring-的JdbcTemplate：" class="headerlink" title="Spring 的JdbcTemplate："></a>Spring 的JdbcTemplate：</h3><p>　　Spring中对JDBC的简单封装</p>
<h3 id="Apache的DBUtils："><a href="#Apache的DBUtils：" class="headerlink" title="Apache的DBUtils："></a>Apache的DBUtils：</h3><p>　　它和Spring的 jdbcTemplate 很像，也是对JDBC的简单封装</p>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬时状态转化的过程 </li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库（jdbc），io文件持久化。</li>
</ul>
<p>持久层</p>
<p>Dao层，Service层，Controller层</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h2 id="JDBC编程分析"><a href="#JDBC编程分析" class="headerlink" title="JDBC编程分析"></a>JDBC编程分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">                  <span class="comment">//数据库连接</span></span><br><span class="line">			Connection connection = <span class="keyword">null</span>;  </span><br><span class="line">                 <span class="comment">//预编译的Statement</span></span><br><span class="line">			PreparedStatement preparedStatement = <span class="keyword">null</span>;    </span><br><span class="line">			ResultSet resultSet = <span class="keyword">null</span>;    </span><br><span class="line">    <span class="keyword">try</span> &#123;     <span class="comment">//加载数据库驱动    					  				  </span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">//通过驱动管理类获取数据库链接     </span></span><br><span class="line">        connection =  DriverManager </span><br><span class="line">.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>,<span class="string">"root"</span>, <span class="string">"mysql"</span>);   <span class="comment">//用户名密码</span></span><br><span class="line">    						<span class="comment">//定义 sql 语句 ?表示占位符    </span></span><br><span class="line">        String sql = <span class="string">"select * from user where username = ?"</span>; </span><br><span class="line">                          <span class="comment">//获取预处理 statement     </span></span><br><span class="line">        preparedStatement = connection.prepareStatement(sql); </span><br><span class="line">                         <span class="comment">//设置参数，第一个参数为 sql 语句中参数的序号（从 1 开始），第二个参数为设置的 参数值        </span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);     </span><br><span class="line">                         <span class="comment">//向数据库发出 sql 执行查询，查询出结果集     </span></span><br><span class="line">        resultSet =  preparedStatement.executeQuery(); </span><br><span class="line">                          <span class="comment">//遍历查询结果集     </span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;              				                         System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"                              "</span>+resultSet.getString(<span class="string">"username"</span>));     </span><br><span class="line">              &#125;   </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;     </span><br><span class="line">        e.printStackTrace(); </span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;     </span><br><span class="line">        <span class="comment">//释放资源     </span></span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;      </span><br><span class="line">            <span class="keyword">try</span> &#123;       resultSet.close(); </span><br><span class="line">     		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;       </span><br><span class="line">                preparedStatement.close();      </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;      </span><br><span class="line">            <span class="keyword">try</span> &#123;       </span><br><span class="line">                connection.close();      </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block       </span></span><br><span class="line">                e.printStackTrace();      &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">上边使用 jdbc 的原始方法（未经封装）实现了查询数据库表记录的操作。</span><br></pre></td></tr></table></figure>

<h2 id="原生JDBC的问题"><a href="#原生JDBC的问题" class="headerlink" title="原生JDBC的问题"></a>原生JDBC的问题</h2><ol>
<li>数据库连接，使用时就创建，不使用就立即释放，对数据库进行频繁的连接开启和关闭，造成数据库资源浪费，影响数据库性能。</li>
</ol>
<p>​       解决方案：使用数据库连接池管理数据库连接。</p>
<ol start="2">
<li><p>将sql语句硬编码到java中，如果sql语句修改，需要重新编译java代码，不利于系统维护。</p>
<p>解决方案： 将sql语句配置到xml文件中，即使sql变化，不需要对java代码进行重新编译。</p>
</li>
</ol>
<h2 id="Mybatis的概述"><a href="#Mybatis的概述" class="headerlink" title="Mybatis的概述"></a>Mybatis的概述</h2><p>​    Mybatis是一个持久层框架，用java编写。</p>
<p>​    它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建链接等繁杂过程。</p>
<p>​    它使用了ORM思想，实现了结果集的封装</p>
<p>​        ORM：</p>
<p>​                    Object Relational Mappging 对象关系映射</p>
<p>​        简单的说：</p>
<p>​                    就是把数据库表和实体类及实体类的的属性对应起来</p>
<p>​                    让我们可以操作实体类就实现操作数据库</p>
<h3 id="如何获得Myybatis？"><a href="#如何获得Myybatis？" class="headerlink" title="如何获得Myybatis？"></a>如何获得Myybatis？</h3><ul>
<li>Maven仓库：<a href="https://mvnrepository.com/artifact/org.mybatis/mybatis" target="_blank" rel="noopener">https://mvnrepository.com/artifact/org.mybatis/mybatis</a></li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- https://mvnrepository.com/artifact/org.mybatis/mybatis --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>中文文档：<a href="https://mybatis.org/mybatis-3/zh/index.html" target="_blank" rel="noopener">https://mybatis.org/mybatis-3/zh/index.html</a></p>
<p>Github：<a href="https://github.com/mybatis/mybatis-3" target="_blank" rel="noopener">https://github.com/mybatis/mybatis-3</a></p>
<h2 id="Mybatis实现的基本原理"><a href="#Mybatis实现的基本原理" class="headerlink" title="Mybatis实现的基本原理"></a>Mybatis实现的基本原理</h2><ul>
<li>应用程序找Mybatis要数据 </li>
<li>mybatis从数据库中找来数据<ul>
<li>通过mybatis-config.xml 定位哪个数据库</li>
<li>通过Category.xml执行对应的select语句</li>
<li>基于Category.xml把返回的数据库记录封装在Category对象中</li>
<li>把多个Category对象装在一个Category集合中</li>
</ul>
</li>
<li>返回一个Category集合</li>
</ul>
<h2 id="Mybatis框架流程"><a href="#Mybatis框架流程" class="headerlink" title="Mybatis框架流程"></a>Mybatis框架流程</h2><ul>
<li>sqlMapConfig.xml(是mybatis的全局配置文件)配置了数据源，事务等mybatis运行环境，配置了映射文件（配置sql语句）mapper.xml(映射文件)，mapper.xml，mapper.xml………</li>
<li>sqlSessionFactory（会话工厂），根据配置文件创建工厂     作用：创建sqlsession。</li>
<li>sqlSession（会话），是一个接口，面向（程序员）的接口    作用：操作数据库（发出sql增删改查）</li>
<li>Executor（执行器），也是一个接口（基本执行器，缓存执行器）   作用：sqlsession内部通过执行器操作数据库</li>
</ul>
<h2 id="Mybatis的入门"><a href="#Mybatis的入门" class="headerlink" title="Mybatis的入门"></a>Mybatis的入门</h2><ul>
<li><p>在pom.xml文件中写入打包方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mybatis官网复制依赖代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;x.x.x&lt;&#x2F;version&gt;		版本号</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>官网下载Mybatis框架</p>
</li>
<li><p>创建maven工程</p>
</li>
<li><p>在pom.xml文件中添加Mybatis的坐标</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;      </span><br><span class="line">		&lt;version&gt;3.4.5&lt;&#x2F;version&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;junit&lt;&#x2F;groupId&gt;   单元测试</span><br><span class="line">		&lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">		&lt;version&gt;4.10&lt;&#x2F;version&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;&#x2F;scope&gt;    </span><br><span class="line">	&lt;&#x2F;dependency&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;     </span><br><span class="line">		&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;     						&lt;version&gt;5.1.6&lt;&#x2F;version&gt;     </span><br><span class="line">		&lt;scope&gt;runtime&lt;&#x2F;scope&gt;    </span><br><span class="line">	&lt;&#x2F;dependency&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;  日志   </span><br><span class="line">		&lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;    </span><br><span class="line">        &lt;version&gt;1.2.12&lt;&#x2F;version&gt;    </span><br><span class="line">	&lt;&#x2F;dependency&gt;   </span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>

<h1 id="2、第一个Mybatis程序"><a href="#2、第一个Mybatis程序" class="headerlink" title="2、第一个Mybatis程序"></a>2、第一个Mybatis程序</h1><p>思路：环境搭建–&gt;导入Mybatis–&gt;编写代码–&gt;测试</p>
<h2 id="2-1、搭建环境"><a href="#2-1、搭建环境" class="headerlink" title="2.1、搭建环境"></a>2.1、搭建环境</h2><p>搭建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> <span class="string">`mybatis`</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="string">`mybatis`</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">table</span> <span class="string">`user`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">20</span>) <span class="keyword">not</span> <span class="literal">null</span> primary <span class="keyword">key</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="literal">null</span>,</span><br><span class="line">    <span class="string">`pwd`</span> <span class="built_in">varchar</span>(<span class="number">30</span>) <span class="keyword">default</span> <span class="literal">null</span></span><br><span class="line">) <span class="keyword">engine</span>=<span class="keyword">innodb</span> <span class="keyword">default</span> <span class="keyword">charset</span>=utf8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> <span class="string">`user`</span>(<span class="string">`id`</span>,<span class="string">`name`</span>,<span class="string">`pwd`</span>) <span class="keyword">values</span></span><br><span class="line">(<span class="number">1</span>,<span class="string">'狂神'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">2</span>,<span class="string">'张三'</span>,<span class="string">'123456'</span>),</span><br><span class="line">(<span class="number">3</span>,<span class="string">'李四'</span>,<span class="string">'123890'</span>)</span><br></pre></td></tr></table></figure>

<p>新建项目</p>
<ol>
<li>新建一个Maven普通项目</li>
<li>删除src目录</li>
<li>导入Maven依赖</li>
</ol>
<h2 id="2-2、创建一个模块"><a href="#2-2、创建一个模块" class="headerlink" title="2.2、创建一个模块"></a>2.2、创建一个模块</h2><ul>
<li>编写mybatis的核心配置文件</li>
</ul>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">mybatis-config.xml</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8" ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">  <span class="meta-keyword">PUBLIC</span> <span class="meta-string">"-//mybatis.org//DTD Config 3.0//EN"</span></span></span><br><span class="line"><span class="meta">  <span class="meta-string">"http://mybatis.org/dtd/mybatis-3-config.dtd"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">"development"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">"JDBC"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">"POOLED"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"driver"</span> <span class="attr">value</span>=<span class="string">"$&#123;driver&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;url&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"username"</span> <span class="attr">value</span>=<span class="string">"$&#123;username&#125;"</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"password"</span> <span class="attr">value</span>=<span class="string">"$&#123;password&#125;"</span>/&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>编写mybatis工具类MybatisUtils</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//sqlSessionFactory---&gt;sqlSession</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MybatisUtils</span></span>&#123;</span><br><span class="line">    paivate <span class="keyword">static</span> SqlSessionFactory salSessionFactory;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//使用Mybatis第一步:获取sqlSessionfactory对象</span></span><br><span class="line">            String resource = <span class="string">"mybatis-config.xml"</span>;</span><br><span class="line">            InputStream inputStream = Resources.getResourceAsStream(resource);</span><br><span class="line">            sqlSessionFactory = <span class="keyword">new</span> sqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//既然有了sqlSessionFactory,顾名思义,我们就可以从中获得sqlSession的实例了。</span></span><br><span class="line">    <span class="comment">//SqlSession完全包含了面向数据库执行SQL命令所需的方法。</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> sqlSessionFactory.openSession;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-3、编写代码"><a href="#2-3、编写代码" class="headerlink" title="2.3、编写代码"></a>2.3、编写代码</h2><ul>
<li>实体类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//实体类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String pwd;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">get,set,toString略</span><br></pre></td></tr></table></figure>

<ul>
<li>Dao接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">userDao</span></span>&#123;</span><br><span class="line">    <span class="function">List&lt;User&gt; <span class="title">getUserList</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>接口实现类（由原来的UserDaoimp转变为一个Mapper配置文件）</li>
</ul>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</span><br><span class="line">	&lt;!DOCTYPE mapper</span><br><span class="line">  		PUBLIC <span class="string">"-//mybatis.org//DTD Mapper 3.0//EN"</span></span><br><span class="line">  		<span class="string">"http://mybatis.org/dtd/mybatis-3-mapper.dtd"</span>&gt;</span><br><span class="line">    </span><br><span class="line"> &lt;!--namespace=绑定一个对应的Dao/Mapper接口--&gt;   </span><br><span class="line">&lt;mapper namespace=<span class="string">"com.kuang.dao.UserDao"</span>&gt;</span><br><span class="line">    </span><br><span class="line">  &lt;select id=<span class="string">"selectBlog"</span> resultType=<span class="string">"Blog"</span>&gt;</span><br><span class="line">    select * from mybatis.user</span><br><span class="line">  &lt;/select&gt;</span><br><span class="line">&lt;mappers&gt;</span><br><span class="line">    &lt;mapper resource=<span class="string">"org/mybatis/example/BlogMapper.xml"</span>/&gt;</span><br><span class="line">  &lt;/mappers&gt;</span><br><span class="line">&lt;/mapper&gt;</span><br></pre></td></tr></table></figure>

<h2 id="2-4、测试"><a href="#2-4、测试" class="headerlink" title="2.4、测试"></a>2.4、测试</h2><ul>
<li>junit测试</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDaoTest</span></span>&#123;</span><br><span class="line">    <span class="meta">@test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//第一步:获取sqlSession对象</span></span><br><span class="line">        sqlSession sqlsession = MybatisUtils.getSqlSession();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方式一:getMapper</span></span><br><span class="line">        UserDao userDao = sqlSession.getMapper(UserDao<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">        List&lt;User&gt; userList = userDao.getUserList(); </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(User user : userList)&#123;</span><br><span class="line">            System.out.println(user);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭sqlSession</span></span><br><span class="line">        sqlSession.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遇到的问题：</p>
<ol>
<li>配置文件没有注册</li>
<li>绑定接口错误</li>
<li>方法名不对</li>
<li>返回类型不对</li>
<li>Maven导出资源问题</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/05/27/Mybatis%E6%A1%86%E6%9E%B6/image-20210106215610689.png" alt="image-20210106215610689"></p>
<p>​     </p>
]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/Mr-lee-MQ.hithub.io/2020/11/01/MySQL/</url>
    <content><![CDATA[<h1 id="1-初识MySQL"><a href="#1-初识MySQL" class="headerlink" title="1.初识MySQL"></a>1.初识MySQL<a id="more"></a></h1><p>JavaEE：企业及开发  Web</p>
<p>前端（页面：展示，数据！）</p>
<p>后台（连接点：连接数据库JDBC，连接前端（控制，控制视图跳转，给前端传递数据））</p>
<p>数据库：（存数据，Txt，Excel，word）</p>
<h2 id="1-1、为什么学习数据库"><a href="#1-1、为什么学习数据库" class="headerlink" title="1.1、为什么学习数据库"></a>1.1、为什么学习数据库</h2><p>1.岗位需求</p>
<p>2.现在的世界，大数据时代</p>
<p>3.被迫需求：存数据  去IOE</p>
<p>==4.数据库是所有软件体系中最核心的存在==      DBA</p>
<h2 id="1-2、什么是数据库"><a href="#1-2、什么是数据库" class="headerlink" title="1.2、什么是数据库"></a>1.2、什么是数据库</h2><p>数据库（DB，DataBase）</p>
<p>概念：数据仓库，软件，安装在操作系统（Window，linux，mac…）之上，SQL（数据库的语句）可以存储大量数据。500万</p>
<p>作用：存储数据，管理数据</p>
<h2 id="1-3、数据库分类"><a href="#1-3、数据库分类" class="headerlink" title="1.3、数据库分类"></a>1.3、数据库分类</h2><p><strong>关系型数据：</strong>（SQL）</p>
<ul>
<li>MySQL，Oracle，Sql Server，DB2，SQLlite</li>
<li>通过表和表之间，行和列之间的关系进行数据的存储，学员表，考勤表。</li>
</ul>
<p><strong>非关系型数据库：</strong>（NoSQL）</p>
<ul>
<li>Redis，MongDB</li>
<li>非关系型数据库，对象存储，通过对象的自身的属性来决定。</li>
</ul>
<p>==DBMS（数据库管理系统）==</p>
<ul>
<li>数据库的管理软件，科学有效的管理我们的数据。维护和获取数据。</li>
<li>MySQL本质是数据库管理系统。</li>
</ul>
<h2 id="1-4、MySql"><a href="#1-4、MySql" class="headerlink" title="1.4、MySql"></a>1.4、MySql</h2><p>MySQL是一个<strong>关系型数据库管理系统</strong></p>
<h2 id="1-5、安装MySql"><a href="#1-5、安装MySql" class="headerlink" title="1.5、安装MySql"></a>1.5、安装MySql</h2><ul>
<li>尽量不要使用exe,注册表。</li>
<li>尽可能使用压缩包包装。</li>
<li>解压，把压缩包解压到自己的环境目录下。</li>
<li>配置环境变量</li>
<li>新建mysql配置文件ini</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">[mysql]</span><br><span class="line">#目录一定换成自己的</span><br><span class="line">basedir = 目录</span><br><span class="line">datadir = 目录</span><br><span class="line">port = <span class="number">3306</span></span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure>

<ul>
<li>启动管理员下的CMD，并将路径切换至mysql下的bin目录，然后输入mysql-install（安装mysql）</li>
<li>再输入 nyaqld – initialize - insecure – user-mysql初始化数据文件。</li>
<li>然后再次启动mysql 然后用命令 mysql-u root -p 进入mysql管理界面（密码可为空）</li>
<li>启动mysql，进去修改密码。</li>
<li>修改my-ini文件删除最后一行skip-grant-tables</li>
<li>重启mysql即可正常使用</li>
</ul>
<h3 id="1-6-连接数据库"><a href="#1-6-连接数据库" class="headerlink" title="1.6 连接数据库"></a>1.6 连接数据库</h3><p><strong>命令行连接</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">mysql -uroot -p123456 <span class="comment">--连接数据库</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">update</span> mysql.user <span class="keyword">set</span> authentication_string=<span class="keyword">password</span>(<span class="string">'123456'</span>) <span class="keyword">where</span> <span class="keyword">user</span>=<span class="string">'root'</span> <span class="keyword">and</span> Host = <span class="string">'localhost'</span>;<span class="comment">--修改密码权限</span></span><br><span class="line"><span class="keyword">flush</span> <span class="keyword">privileges</span>;<span class="comment">--刷新权限</span></span><br><span class="line"><span class="comment">-------------------------------------------------------------</span></span><br><span class="line"><span class="comment">--所有的语句用;结尾</span></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">databases</span>; <span class="comment">--查看所有的数据库</span></span><br><span class="line"></span><br><span class="line">mysql &gt; use school --切换数据库 use 数据库名</span><br><span class="line"></span><br><span class="line"><span class="keyword">show</span> <span class="keyword">tables</span>; <span class="comment">--查看数据库中所有的表</span></span><br><span class="line"><span class="keyword">describe</span> student; <span class="comment">--显示数据库中所有的表的信息</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">create</span> <span class="keyword">database</span> westos;<span class="comment">--创建一个数据库</span></span><br><span class="line"></span><br><span class="line">exit;<span class="comment">--退出连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--单行注释（SQL的本来的注释）</span></span><br></pre></td></tr></table></figure>

<p><strong>数据库语言</strong></p>
<p>DDL   定义</p>
<p>DML   操作</p>
<p>DQL   查询</p>
<p>DCL   控制</p>
<h2 id="2、操作数据库"><a href="#2、操作数据库" class="headerlink" title="2、操作数据库"></a>2、操作数据库</h2><p>操作数据库&gt;操作数据库中的表&gt;操作数据库中的表的数据</p>
<p>==SQL关键字不区分大小写==</p>
<h3 id="2-1、-操作数据库"><a href="#2-1、-操作数据库" class="headerlink" title="2.1、 操作数据库"></a>2.1、 操作数据库</h3><p>1.创建数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] westos;</span><br></pre></td></tr></table></figure>

<p>2.删除数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">DATABASE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> westos;</span><br></pre></td></tr></table></figure>

<p>3.使用数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--tab键的上面，如果你的表名或者字段名是一个特殊字符，就需要带这个</span></span><br><span class="line"><span class="keyword">USE</span> <span class="string">`westos`</span></span><br></pre></td></tr></table></figure>

<p>4.查看数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">DATABASES</span> <span class="comment">--查看所有的数据库</span></span><br></pre></td></tr></table></figure>

<p>对比：SQLyog的可视化操作。</p>
<p>学习思路：</p>
<ul>
<li>对照SQLyog可视化历史记录查看sql</li>
<li>固定的语法或关键字必须要记住</li>
</ul>
<h3 id="2-2、-数据库的数据类型"><a href="#2-2、-数据库的数据类型" class="headerlink" title="2.2、 数据库的数据类型"></a>2.2、 数据库的数据类型</h3><blockquote>
<p>数值</p>
</blockquote>
<ul>
<li>tinyint                 十分小的数据        1个字节</li>
<li>smallint             较小的数据             2个字节</li>
<li>mediumint       中等大小的数据     3个字节</li>
<li><strong>int                      标准的整数               4个字节</strong></li>
<li>bigint                  较大的数据               8个字节</li>
<li>float                    浮点数                      4个字节</li>
<li>double               浮点数                       8个字节 </li>
<li>decimal            字符串形式的浮点数                       </li>
</ul>
<blockquote>
<p>字符串</p>
</blockquote>
<ul>
<li><p>char                   字符串固定大小的       0~255       </p>
</li>
<li><p><strong>varchar           可变字符串                   0~25535         常用的变量    String</strong>     </p>
</li>
<li><p>tinytext              微型文本                      2^8 - 1</p>
</li>
<li><p><strong>text                  文本串                         2^16 - 1               保存大文本</strong></p>
</li>
</ul>
<blockquote>
<p>时间日期</p>
</blockquote>
<p>java.util.Date</p>
<ul>
<li><p>date     YYYY - MM - DD      日期格式</p>
</li>
<li><p>time     HH :  mm : ss         时间格式</p>
</li>
<li><p><strong>datetime     YYYY - MM - DD  HH : mm : ss    最常用的时间格式</strong>   </p>
</li>
<li><p>*<em>timestrmp       时间戳        1970.1.1到现在的毫秒数 *</em></p>
</li>
<li><p>year     年份表示</p>
</li>
</ul>
<blockquote>
<p>null</p>
</blockquote>
<ul>
<li>没有值，未知</li>
<li>==注意，不要使用NULL进行运算，结果为NULL==</li>
</ul>
<h3 id="2-3、数据库的字段属性（重点）"><a href="#2-3、数据库的字段属性（重点）" class="headerlink" title="2.3、数据库的字段属性（重点）"></a>2.3、数据库的字段属性（重点）</h3><p>Unsigned：</p>
<ul>
<li>无符号的整数</li>
<li>声明了该列不能声明为负数</li>
</ul>
<p>zerofill:</p>
<ul>
<li>0填充的</li>
<li>不足的位数，使用0来填充，int(3)</li>
</ul>
<p>自增:</p>
<ul>
<li>通常理解为自增，自动在上一条记录的基础上 + 1</li>
<li>通常用来设计唯一的主键~index，必须是整数类型</li>
<li>可以自定义设计主键自增的起始值和步长</li>
</ul>
<p>非空 NULL  NOT NULL</p>
<ul>
<li>假设设置为 not null，如果不给他赋值，就会报错。</li>
<li>NULL，如果不填写值，默认就是null</li>
</ul>
<p>默认:</p>
<ul>
<li>设置默认的值</li>
<li>sex，默认值为男。 </li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;每一个表必须存在这5个字段，表示一个记录存在的意义</span><br><span class="line">id		主键</span><br><span class="line">&#96;version&#96;		乐观锁</span><br><span class="line">is_delete		伪删除</span><br><span class="line">get_create		创建时间</span><br><span class="line">get update		修改时间</span><br></pre></td></tr></table></figure>

<h3 id="2-4、创建数据库表"><a href="#2-4、创建数据库表" class="headerlink" title="2.4、创建数据库表"></a>2.4、创建数据库表</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--目标：创建一个school数据库</span></span><br><span class="line"><span class="comment">--创建学生表（列，字段）  使用SQL创建</span></span><br><span class="line"><span class="comment">--学号int 登录密码varchar(20) 姓名，性别varchar(2),出生日期(datatime),家庭住址，email</span></span><br><span class="line"></span><br><span class="line"><span class="comment">--注意点，使用英文(),表的名称 和 字段 尽量使用``括起来</span></span><br><span class="line"><span class="comment">--AUTO INCREMENT 自增</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`student`</span>(</span><br><span class="line">	<span class="string">`id`</span> <span class="built_in">INT</span>(<span class="number">4</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">'学号'</span>,</span><br><span class="line">    <span class="string">`name`</span> <span class="built_in">VARCHAR</span>(<span class="number">30</span>) <span class="keyword">not</span> <span class="literal">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">'匿名'</span> <span class="keyword">COMMENT</span> <span class="string">'姓名'</span>,</span><br><span class="line">    PRIMARY <span class="keyword">KEY</span>(<span class="string">'id'</span>)</span><br><span class="line">)<span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8</span><br></pre></td></tr></table></figure>

<p>格式：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> [<span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span>] <span class="string">`表名`</span>(</span><br><span class="line"><span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line"><span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line"><span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],</span><br><span class="line">	....</span><br><span class="line"><span class="string">`字段名`</span> 列类型 [属性] [索引] [注释],    </span><br><span class="line">)[表类型][字符集设置][注释]</span><br></pre></td></tr></table></figure>

<p><strong>常用命令</strong></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">DATABASE</span> scfool		<span class="comment">--查看创建数据库的语句</span></span><br><span class="line"><span class="keyword">SHOW</span> <span class="keyword">CREATE</span> <span class="keyword">TABLE</span> student 		<span class="comment">--查看student数据表的定义语句</span></span><br><span class="line"><span class="keyword">DESC</span> student 					<span class="comment">--显示表的结构</span></span><br></pre></td></tr></table></figure>

<h3 id="2-5、数据表的类型"><a href="#2-5、数据表的类型" class="headerlink" title="2.5、数据表的类型"></a>2.5、数据表的类型</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">--关于数据库引擎</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">INNODBS  默认使用</span></span><br><span class="line"><span class="comment">MYISAM	早些年使用</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th></th>
<th>MYISAM</th>
<th>INNODB</th>
</tr>
</thead>
<tbody><tr>
<td>事务支持</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>数据行锁定</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>外键约束</td>
<td>不支持</td>
<td>支持</td>
</tr>
<tr>
<td>全文索引</td>
<td>支持</td>
<td>不支持</td>
</tr>
<tr>
<td>表空间大小</td>
<td>较小</td>
<td>较大</td>
</tr>
</tbody></table>
<p>常规的使用操作：</p>
<ul>
<li>MYIASM      节约空间，速度较快</li>
<li>INNNODB    安全性高，事务的处理，多表多用户操作</li>
</ul>
<blockquote>
<p>在物理空间存在的位置</p>
</blockquote>
<p>所有的数据库文件都存在data目录下</p>
<p>本质还是文件的存储</p>
<p>MySQL引擎在物理文件上的区别</p>
<ul>
<li>innoDB在数据库表中只有一个*.frm文件，以及上级目录下的ibdata1文件</li>
<li>MYISAM对应文件<ul>
<li>*.frm     表结构的定义文件</li>
<li>*.MYD    数据文件(data)</li>
<li>*.MYI      索引文件(index)</li>
</ul>
</li>
</ul>
<blockquote>
<p>设置数据库的字符集编码</p>
</blockquote>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">CHARSET=utf8</span><br></pre></td></tr></table></figure>

<p>不设置的话，会是mysql默认的字符集编码（不支持中文）</p>
<p>MySQL的默认编码是Latin1，不支持中文</p>
<p>在my.ini中配置默认的编码</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">character-<span class="keyword">set</span>-<span class="keyword">server</span>=utf8</span><br></pre></td></tr></table></figure>

<h3 id="2-6、修改和删除表"><a href="#2-6、修改和删除表" class="headerlink" title="2.6、修改和删除表"></a>2.6、修改和删除表</h3>]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/04/Vue/</url>
    <content><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue "></a>Vue <a id="more"></a></h1><p>网络通信：axios</p>
<p>页面跳转：vue-router</p>
<p>状态管理：vuex</p>
<p>Vue-UI：ICE</p>
<p>M: 模型  V：视图   C：控制器</p>
<h2 id="JavaScript框架"><a href="#JavaScript框架" class="headerlink" title="JavaScript框架"></a>JavaScript框架</h2><ul>
<li>JQuery：简化了DOM操作，缺点是DOM操作太频繁，影响前端性能。</li>
<li>Angular：将后台的MVC模式搬到前端并增加了模块化开发的理念。</li>
<li>React：提出了虚拟DOM，在内存中模拟DOM操作，有效提高了前端的渲染效率，缺点是使用复杂，需要学习JSX语言</li>
<li>Vue：渐进式JavaScript框架，渐进式即逐步实现新特性的意思。如实现模块化开发，路由，状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点</li>
<li>Axios：前端通讯框架，Vue不具备通信能力，也可以用JQuery提供的AJAX通信功能</li>
</ul>
<h2 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h2><ul>
<li>Ant-Design :阿里巴巴出品，基于React的UI框架</li>
<li>ElementUI，iview,ice:饿了么出品，用于Vue的UI框架</li>
<li>Bootstrap:Twitter推出的一个用于前端开发的开源工具包</li>
<li>AmazeUI：一款HTML5跨屏前端框架</li>
</ul>
<h2 id="JavaSxript构建工具"><a href="#JavaSxript构建工具" class="headerlink" title="JavaSxript构建工具"></a>JavaSxript构建工具</h2><ul>
<li>Babel：JS编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript</li>
<li>WebPack：模块化打包器，主要作用是打包，压缩，合并及按序加载</li>
</ul>
<h2 id="框架和项目管理工具"><a href="#框架和项目管理工具" class="headerlink" title="框架和项目管理工具"></a>框架和项目管理工具</h2><ul>
<li><p>Express：NodeJS框架</p>
</li>
<li><p>Koa：Express简化版</p>
</li>
<li><p>NPM:项目综合管理工具，类似于Maven</p>
</li>
<li><p>YARN：NPM的替代方案，类似于Maven和Gradle的关系</p>
</li>
</ul>
<h2 id="Vue入门"><a href="#Vue入门" class="headerlink" title="Vue入门"></a>Vue入门</h2><p>模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>v-bind     绑定元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">        鼠标悬停几秒</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">"Hello,Vue!"</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-if </li>
<li>v-else</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"type==='A'"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"type==='B'"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"type==='C'"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            type:<span class="string">'A'</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-for</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span> </span><br><span class="line">    &#123;&#123;item.message&#125;&#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    //&#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; index可输出数组下标</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items:[</span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">'狂神说Java'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">'狂神前端'</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>方法必须定义在Vue的method对象中methods:{        }</li>
<li>通过v-on绑定事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayhai"</span>&gt;</span>click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">"狂神说Java"</span></span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">    methods:&#123;    <span class="comment">//方法必须定义在Vue的method对象中</span></span></span><br><span class="line"><span class="actionscript">            sayhai:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="keyword">this</span>.message)</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p>Vue.js是一个MVVM框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。</p>
<ul>
<li><p>使用v-model实现双向绑定，v-model会忽略所有表单元素的value,checked,selected特性的初始值，而只将Vue实例的数据作为来源，应该通过JavaScript在组件的data选项中声明初始值。</p>
</li>
<li><p>输入文本</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    输入的文本：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span>&#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>单选框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"qinjiang"</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"qinjiang"</span>&gt;</span>女</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        选中了谁:&#123;&#123;qinjiang&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            qinjiang: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>下拉框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    下拉框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span><span class="attr">disabled</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>value:&#123;&#123;selected&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            selected: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue的组件"><a href="#Vue的组件" class="headerlink" title="Vue的组件"></a>Vue的组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!--组件：传递给组件中的值：props--&gt;</span></span><br><span class="line">    //从数组(items)中遍历出的值(item)绑定到qin上</span><br><span class="line">    //由props接收qin的值</span><br><span class="line">    //由props送到模板(template)中</span><br><span class="line">    <span class="tag">&lt;<span class="name">qinjiang</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:</span> <span class="attr">qin</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">qinjiang</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">//定义一个Vue组件component</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"qinjiang"</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'qin'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;qin&#125;&#125;</span><span class="xml">'<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            items:[<span class="string">"Java"</span>,<span class="string">"Linux"</span>,<span class="string">"前端"</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue-Axios异步通信"><a href="#Vue-Axios异步通信" class="headerlink" title="Vue:Axios异步通信"></a>Vue:Axios异步通信</h2><p>Axios是一个开源的可以用在浏览器端和Node.js的异步通信框架，它的主要作用就是实现AJAX异步通信。</p>
<p>主要功能特点：</p>
<ul>
<li>从浏览器中创建XMLHttpRequests</li>
<li>从node.js创建http请求</li>
<li>支持Promise  API (JS中链式方程)</li>
<li>Nnew拦截请求和响应</li>
<li>转化请求数据和响应数据</li>
<li>取消请求</li>
<li>自动转换JSON数据</li>
<li>客户端支持防御XSRF（跨站请求伪造）</li>
</ul>
<p>模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Vue实例由一个完整的生命周期</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase_面向对象</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/23/Javase-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象<a id="more"></a></h1><p>Java的核心就是oop</p>
<h2 id="面向过程-amp-面向对象"><a href="#面向过程-amp-面向对象" class="headerlink" title="面向过程&amp;面向对象"></a>面向过程&amp;面向对象</h2><p>面向过程思想</p>
<ul>
<li>步骤清晰简单，第一步做什么，第二步做什么</li>
<li>面对过程适合处理一些较为简单的问题</li>
</ul>
<p>面向对象思想</p>
<ul>
<li>物以类聚，分类的思维方式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考，最后，才对某个分类下的细节进行面向过程的思索。</li>
<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>
</ul>
<p>对于描述复杂的事物，为了宏观上把握，从整体上能够合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向对象过程的思路去处理。</p>
<h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><ul>
<li>面向对象编程（Object-Oriented Prpgramming,OOP）</li>
<li>面向对象编程的本质是：以类的方式组织代码，以对象的组织（封装）数据。</li>
<li>抽象</li>
<li><strong>三大特性</strong><ul>
<li><strong>封装</strong></li>
<li><strong>继承</strong></li>
<li><strong>多态</strong></li>
</ul>
</li>
<li>从认识论角度考虑是先有对象后有类。<ul>
<li><strong>对象</strong>：是具体的事物</li>
<li><strong>类</strong>：是抽象的，是对对象的抽象。</li>
</ul>
</li>
<li>从代码运行角度考虑是先有类后有对象。类是对象的模板。</li>
</ul>
<h2 id="回顾方法的定义"><a href="#回顾方法的定义" class="headerlink" title="回顾方法的定义"></a>回顾方法的定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Demo01  类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">    <span class="comment">//main 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    修饰符  返回值类型  方法名（...）&#123;</span></span><br><span class="line"><span class="comment">    //方法体</span></span><br><span class="line"><span class="comment">    return  返回值；</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> a&gt;b ? a : b;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="break和return的区别"><a href="#break和return的区别" class="headerlink" title="break和return的区别"></a>break和return的区别</h3><ul>
<li>break: 跳出switch，结束循环</li>
<li>return: 结束方法，返回一个结果。</li>
</ul>
<h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><ul>
<li>驼峰命名法</li>
<li>见名知意</li>
</ul>
<h3 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h3><p>（参数类型，参数名）….</p>
<h3 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h3><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><ul>
<li>静态方法  static</li>
<li>非静态方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//静态方法调用非静态</span></span><br><span class="line">        <span class="comment">//实例化这个类   new</span></span><br><span class="line">        <span class="comment">//对象类型 对象名 = 对象值；</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"学生说话了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;...&#125;<span class="comment">//折叠了</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    a，b都为静态方法,或都不为静态方法时，都可直接调用</span></span><br><span class="line"><span class="comment">    public void a()&#123;</span></span><br><span class="line"><span class="comment">       b(); </span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    public void b()&#123;&#125;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//静态调用非静态时</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    static是和类一起加载的</span></span><br><span class="line"><span class="comment">    public static void a()&#123;</span></span><br><span class="line"><span class="comment">    b();</span></span><br><span class="line"><span class="comment">    //非静态，类实例化之后才存在</span></span><br><span class="line"><span class="comment">    public void b()&#123;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//实际参数和形式参数的类型要对应。</span></span><br><span class="line">        <span class="keyword">int</span> add = demo03.add(<span class="number">1</span>,<span class="number">2</span>);   <span class="comment">//实参</span></span><br><span class="line">        System.out.println(add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//形参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        Demo04.change(a);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回值为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用传递：对象，本质还是值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person perosn = <span class="keyword">new</span> Perso();</span><br><span class="line">        </span><br><span class="line">        System.out.println(person.name);<span class="comment">//null</span></span><br><span class="line">        </span><br><span class="line">        Demo05.change(person);</span><br><span class="line">        </span><br><span class="line">        System.out.println(person);<span class="comment">//秦疆</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        person.name = <span class="string">"秦疆"</span>；</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义了一个Person类，有一个属性：name</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;<span class="comment">//null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><ul>
<li><strong>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。</strong><ul>
<li>动物，植物，手机，电脑。</li>
<li>Person类，Pet类，Car类，这些类都是用来定义某一类具体的事物应该具备的特点和行为。</li>
</ul>
</li>
<li><strong>对象是抽象类型的具体事例</strong><ul>
<li>张三就是人的一个具体实例，张三家里的旺财就是狗的一个具体事例。</li>
<li>能够体现出特点，展现除功能的是具体的实例，而不是一个抽象的概念。</li>
</ul>
</li>
</ul>
<h2 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h2><ul>
<li><strong>使用new关键字创建对象</strong></li>
<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>
<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须调用的。并且构造器有以下俩特点：<ul>
<li>必须和类的名字相同</li>
<li>必须没有返回值类型，也不能写void</li>
</ul>
</li>
<li><strong>构造器必须要掌握。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stuent</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性：字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学习"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个项目应该只有一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(STring[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//类：抽象的，实例化</span></span><br><span class="line">        <span class="comment">//类实例化后会返回一个自己的对象</span></span><br><span class="line">        <span class="comment">//student对象就是一个student类的具体实例</span></span><br><span class="line">        </span><br><span class="line">        Student xiaoming = <span class="keyword">new</span> Student();</span><br><span class="line">        Student xiaohong = <span class="keyword">new</span> Student();</span><br><span class="line">        </span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>构造器</strong></p>
<p>   快捷键Alt + insert</p>
<p>使用new关键字时，本质是在调用构造器</p>
<p>构造器一般用来初始化值</p>
<ul>
<li>无参构造</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//一个类即使什么也不写，也会存在一个方法</span></span><br><span class="line">    <span class="comment">//显示的定义构造器</span></span><br><span class="line">    </span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//实例化初始值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"qinjiang"</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(STring[] args)</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        </span><br><span class="line">        System.out.println(person.name);<span class="comment">//输出为qinjiang</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>有参构造</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一旦定义了有参构造，无参就必须显示定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建对象内存分析"><a href="#创建对象内存分析" class="headerlink" title="创建对象内存分析"></a>创建对象内存分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pubic <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Pet dog = <span class="keyword">new</span> Pet();</span><br><span class="line">        dog.name = <span class="string">"旺财"</span>;</span><br><span class="line">        dog.age = <span class="number">3</span>;</span><br><span class="line">        dog.shout();</span><br><span class="line">        </span><br><span class="line">        System.out.println(dog.name);</span><br><span class="line">        System.out.println(dog.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"叫了一声"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>堆：存放new的对象和数组。</p>
<p>栈：存放基本变量类型和引用变量。</p>
<p><a href="https://www.wailian.work/image/QmvaGS" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/12/sp200823_233000.png" alt="sp200823_233000.png"></a></p>
<h3 id="简单小结类与对象"><a href="#简单小结类与对象" class="headerlink" title="简单小结类与对象"></a>简单小结类与对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.类与对象</span></span><br><span class="line"><span class="comment">        	类是一个模板：抽象。对象是一个具体的实例</span></span><br><span class="line"><span class="comment">        2.方法</span></span><br><span class="line"><span class="comment">        	定义，调用</span></span><br><span class="line"><span class="comment">        3.对象的引用</span></span><br><span class="line"><span class="comment">        	引用类型：基本类型（8）</span></span><br><span class="line"><span class="comment">        		对象是通过引用来操作的：栈---&gt;堆</span></span><br><span class="line"><span class="comment">        4.属性：字段Field 成员变量</span></span><br><span class="line"><span class="comment">        	默认初始化：</span></span><br><span class="line"><span class="comment">        		数字: 0   0.0 </span></span><br><span class="line"><span class="comment">        		char: u0000</span></span><br><span class="line"><span class="comment">        		boolbean: false</span></span><br><span class="line"><span class="comment">        		引用: null</span></span><br><span class="line"><span class="comment">        		</span></span><br><span class="line"><span class="comment">        		</span></span><br><span class="line"><span class="comment">       修饰符   属性类型  属性名 = 属性值</span></span><br><span class="line"><span class="comment">         5.对象的创建和使用</span></span><br><span class="line"><span class="comment">         	必须使用new关键字创建对象，构造器  Person kuangshen = new Person();</span></span><br><span class="line"><span class="comment">         	对象的属性  kaungshen.name</span></span><br><span class="line"><span class="comment">         	对象的方法   kuangshen.sleep()</span></span><br><span class="line"><span class="comment">         6.类</span></span><br><span class="line"><span class="comment">         	静态的属性   属性</span></span><br><span class="line"><span class="comment">         	动态的行为   方法</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul>
<li>该露的露，该藏的藏<ul>
<li>我们程序设计要追求 “高内聚，低耦合”。<ul>
<li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</li>
<li>低耦合：仅暴露少量的方法给外部使用</li>
</ul>
</li>
</ul>
</li>
<li>封装（数据的隐藏）<ul>
<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li>
</ul>
</li>
<li>属性私有(private)，get/set(提供可以操作私有属性的方法)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//通过调用setName方法来间接操作属性</span></span><br><span class="line">        s1.setName(<span class="string">"秦疆"</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类 private: 私有</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;  	<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;			<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;		<span class="comment">//性别</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//提供一些public 的get，set方法</span></span><br><span class="line">    <span class="comment">//可在get，set方法中给属性限定范围（判断）</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get  获得这个数据    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set  给这个数据设置值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name  = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装的意义</p>
<ul>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
<li>统一接口</li>
<li>系统可维护增加了</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li>继承的本质是对某一批类的抽象，从而实现对现实世界而更好的建模。</li>
<li>extends的意思是扩展。子类是父类的拓展。</li>
<li>JAVA中类只有单继承，没有多继承。</li>
<li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖，组合，聚合等。</li>
<li>继承关系的两个类，一个为子类（派生类），一个为父类（基类）。子类继承父类，使用关键字extend来表示。</li>
<li>子类和父类之间，从意义上讲应该具有“is  a”的关系。</li>
</ul>
<ul>
<li>object类</li>
</ul>
<p>所有的类，都默认直接或间接继承Object</p>
<ul>
<li>super</li>
<li>方法重写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> money = <span class="number">10000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"说了一句话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子类继承父类，就会拥有父类的全部方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	public </span></span><br><span class="line"><span class="comment">	protected</span></span><br><span class="line"><span class="comment">	default</span></span><br><span class="line"><span class="comment">	private</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>子类调用父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test(<span class="string">"秦疆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">extend</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"qinjiang"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);<span class="comment">//秦疆</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);<span class="comment">//秦疆</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);<span class="comment">//kuangshen</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">"kuangshen"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继承过程中构造器的变化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//执行结果</span></span><br><span class="line">        <span class="comment">//Person无参执行了</span></span><br><span class="line">        <span class="comment">//Student无参执行了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//隐藏代码:调用了父类的无参构造</span></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">//调用父类的构造器，必须在子类构造器的第一行</span></span><br><span class="line">        System.out.println(Student无参执行了)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person无参执行了"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>super注意点</strong></p>
<ul>
<li>super调用父类的构造方法，必须在构造方法的第一个</li>
<li>super  必须只能出现在子类的方法或者构造方法中</li>
<li>super和this不能同时调用构造方法</li>
</ul>
<p><strong>super和this</strong></p>
<ul>
<li>代表的对象不同<ul>
<li>this：本身调用者这个对象</li>
<li>super：代表父类对象的应用</li>
</ul>
</li>
<li>前提<ul>
<li>this：没有继承也可以使用</li>
<li>super：只能在继承条件下才可以使用</li>
</ul>
</li>
<li>构造方法<ul>
<li>this（）：本类的构造</li>
<li>super（）：父类的构造</li>
</ul>
</li>
</ul>
<h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法的调用只和左边定义的数据类型有关</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();   <span class="comment">//A</span></span><br><span class="line">        a.test();</span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        B b = <span class="keyword">new</span> A();   <span class="comment">//B    子类重写了父类的方法</span></span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A=&gt;test()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写是方法的重写，跟属性无关</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B=&gt;test()"</span>);    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重写</strong></p>
<p>需要有继承关系，子类重写父类的方法</p>
<p>重写：子类的方法和父类必须一致：方法体不同。</p>
<ul>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符：范围可以扩大，但不可以缩小。</li>
<li>抛出的异常：范围可以被缩小，不能被扩大。</li>
</ul>
<p>为什么需要重写</p>
<ul>
<li>父类的功能，子类不一定需要，或者不满足</li>
<li>快捷键    Alt + Insrt：override;</li>
</ul>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li><p>动态编译：类型，可扩展</p>
</li>
<li><p>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</p>
</li>
<li><p>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多。</p>
</li>
</ul>
<ul>
<li>多态存在的条件<ul>
<li>有继承关系</li>
<li>子类重写父类</li>
<li>父类引用指向子类对象</li>
</ul>
</li>
</ul>
<p>注意：多态是方法的多态，属性没有多态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// new Student(); 一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">// new Person();</span></span><br><span class="line">        <span class="comment">//可以指向的引用类型就不确定了：父类的引用指向子类</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Student 能调用的方法都是自己的或者继承父类的。</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Person 父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();  <span class="comment">//父类的引用指向子类</span></span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line">        </span><br><span class="line">        ((Student) s2).eat();<span class="comment">//子类重写了父类的方法，执行子类的方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多态注意事项</p>
<ul>
<li>多态是方法的多态，属性没有多态</li>
<li>父类和子类，有联系。否则会类型转换异常</li>
<li>存在条件:继承关系，方法需要重写，父类引用指向子类对象。</li>
<li>不能重写的<ul>
<li>static  方法，属于类，不属于实例</li>
<li>final  常量</li>
<li>private 方法</li>
</ul>
</li>
<li>instanceof  类型转换..引用类型转换</li>
</ul>
<h3 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//Object &gt; Person &gt; Student</span></span><br><span class="line">    <span class="comment">//Object &gt; Person &gt;Teacher</span></span><br><span class="line">    <span class="comment">//Object &gt; String</span></span><br><span class="line">    Object object = <span class="keyword">new</span> Student();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//System.out.prinln( A instanceof B )AB间是否有父子关系</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> Object); <span class="comment">//true</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> Teacher); <span class="comment">//False</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> String); <span class="comment">//False</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>类型转换</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"go"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//类型之间的转化：父类  子类</span></span><br><span class="line">        <span class="comment">//高         低</span></span><br><span class="line">        Person student = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//student 将这个对象转换为Student类型，我们就可以使用Student类型的方法了</span></span><br><span class="line">        Student student = (Student) obj;</span><br><span class="line">        <span class="function">student <span class="title">go</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//((student) obj).go();</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//子类转换为父类，可能会丢失自己本来的一些方法。</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.go();</span><br><span class="line">        Person person = student;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>父类引用指向子类的对象</li>
<li>把子类转换为父类，向上转型</li>
<li>把父类转换为子类，向下转型：强制转换</li>
<li>方便方法的调用，减少重复的代码</li>
</ul>
<h3 id="static关键字详解"><a href="#static关键字详解" class="headerlink" title="static关键字详解"></a>static关键字详解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age ;  <span class="comment">//静态的变量 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;  <span class="comment">//非静态的变量</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        </span><br><span class="line">        System.out.println(Student.age);  <span class="comment">//可以通过类直接调用</span></span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line">        System.out.println(s1.score);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> Student().run();  <span class="comment">//非静态需new</span></span><br><span class="line">        student.go();		<span class="comment">//静态直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//代码块  (匿名代码块)</span></span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//静态代码块</span></span><br><span class="line">        <span class="comment">//类加载时执行，只执行一次</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);   <span class="comment">//只执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果：静态代码块    匿名代码块      构造方法</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="comment">//可直接调用</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(random());</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果是修饰类，那么该类就是抽象类。</li>
<li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类</li>
<li>抽象类，不能使用new关键字来创建对象，它是用来让子类继承的。</li>
<li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li>
<li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//abstract 抽象类：类 extends：单继承~（接口可以多继承）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="comment">//约束~有人帮我们实现</span></span><br><span class="line">    <span class="comment">//abstract，抽象方法，只有方法名字，没有方法的实现。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类的所有方法，继承了它的子类，都必须要实现他的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>抽象类特点</strong></p>
<ul>
<li>不能new这个抽象类，只能考子类去实现：起一个约束作用。</li>
<li>抽象类中可以写普通的方法。</li>
<li>抽象方法必须在抽象类中。</li>
</ul>
<p>抽象的抽象：约束~</p>
<p>抽象类存在的意义：可以将重复的共有方法提取出来，提高开发效率。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul>
<li>普通类：只有具体实现</li>
<li>抽象类：具体实现和规范（抽象方法）都有</li>
<li>接口：只有规范，自己无法写方法，专业的约束！约束和实现分离：面向接口编程。</li>
<li>接口就是规范，定义的是一组规则，体现了现实世界中如果你是汽车，则必须能跑。</li>
<li>接口的本质是契约，就像我们人间的法律一样，制定好后大家遵守。</li>
<li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口，为什么我们讨论设计模式都只针对具备了抽象能力的语言，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</li>
</ul>
<p><strong>声明类的关键字是class，声明接口的关键字是interface</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口的定义 interface关键字    接口都需要实现类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">//接口中的所有定义其实都是抽象的 public abstact</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类可以实现接口  implements 接口</span></span><br><span class="line"><span class="comment">//实现了接口的类，就需要重写接口中的方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">TimeService</span></span>&#123;</span><br><span class="line">    <span class="comment">//利用接口实现多继承</span></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口的作用：</strong></p>
<ul>
<li>约束</li>
<li>定义一些方法，让不同的人实现</li>
<li>接口默认方法    public abstact</li>
<li>常量   public  static  final</li>
<li>接口不能被实例化，接口中没有构造方法</li>
<li>implents可以实现多个接口</li>
<li>必须要重写接口中的方法</li>
</ul>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对B类来说就是外部类了。</p>
<ul>
<li>成员内部类</li>
<li>静态内部类</li>
<li>局部内部类</li>
<li>匿名内部类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> out;</span><br><span class="line">    	System.out.println(<span class="string">"这是外部类的方法"</span>);</span><br><span class="line">            </span><br><span class="line">&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"这是内部类的方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得外部类的私有属性</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> voud <span class="title">mai</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//new </span></span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">//通过外部类来实例化内部类</span></span><br><span class="line">        outer.<span class="keyword">new</span> Inner inner = outer.<span class="keyword">new</span> Inner();</span><br><span class="line">        inner.in();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">puublic <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="function">publlic <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个java类中可以有多个class类，但是只能有一个public class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">//没有名字初始化类，不用将实例保存到变量中。</span></span><br><span class="line">        <span class="keyword">new</span> Apple().eat();</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserService()&#123;</span><br><span class="line">            <span class="meta">@override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>网络编程</title>
    <url>/Mr-lee-MQ.hithub.io/2020/10/15/%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/</url>
    <content><![CDATA[<h1 id="网络编程"><a href="#网络编程" class="headerlink" title="网络编程 "></a>网络编程 <a id="more"></a></h1><p>TCP:发送请求通信</p>
<p>UDP:接收通信请求</p>
<p><strong>网络编程的目的</strong>：传播交流信息，数据交换，通信。</p>
<p><strong>想要达到这个效果需要什么：</strong></p>
<ul>
<li>如何准确定位网络上的一台主机  192.168.16.124：端口号，定位到这个计算机上的某个资源</li>
<li>找到了这个主机，如何传输数据</li>
</ul>
<p>javaweb: 网页编程 B/S</p>
<p>网络编程: TCP/IP   C/S</p>
<h2 id="网络通信的要素"><a href="#网络通信的要素" class="headerlink" title="网络通信的要素"></a>网络通信的要素</h2><p>如何实现网络的通信？</p>
<p>通信双方的地址</p>
<ul>
<li>ip</li>
<li>端口号</li>
<li>192.168.16,124:端口号</li>
</ul>
<p>规则：网络通信的协议</p>
<p><a href="https://www.wailian.work/image/Qmvcrc" target="_blank" rel="noopener"><img src="https://p.130014.xyz/2020/12/12/sp201015_081754.png" alt="sp201015_081754.png"></a></p>
<p>小结：</p>
<p>网络编程有两个主要的问题</p>
<ul>
<li>如何准确的定位到网络上的一台或者多台主机</li>
<li>找到主机后如何进行通信</li>
</ul>
<p>网络编程中的要素</p>
<ul>
<li>IP和端口号       IP</li>
<li>网络通信协议      UDP TCP</li>
</ul>
<p>java万物皆对象</p>
<h2 id="IP"><a href="#IP" class="headerlink" title="IP"></a>IP</h2><p>ip地址：inetAddress</p>
<ul>
<li>唯一定位一台网络上计算机</li>
<li>127.0.2.1：本机locatlhost</li>
<li>ip地址的分类<ul>
<li>ipv4/ipv6<ul>
<li>IPV4:127.0.0.1    4个字节组成。0~255</li>
<li>IPV6:fe80::9458:458a:5a22:4686%16, 128位。8个无符号整数</li>
</ul>
</li>
<li>公网(互联网)—私网(局域网)<ul>
<li>ABCD类地址</li>
<li>192.168.xxx.xx专门给组织内部使用的。</li>
</ul>
</li>
</ul>
</li>
<li>域名:记忆ip问题<ul>
<li>IP:<a href="http://www.vip.com" target="_blank" rel="noopener">www.vip.com</a></li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//测试IP</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInetAddress</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">try</span>&#123;</span><br><span class="line">           <span class="comment">//查询本机Ip地址 三种方法</span></span><br><span class="line">           InetAddress inetAddress1 = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">           System.out.println(inetAddress1);</span><br><span class="line">           </span><br><span class="line">           InetAddress inetAddress3 = InetAddress.getByName(<span class="string">"localhost"</span>);</span><br><span class="line">           System.out.println(inetAddress3);</span><br><span class="line">           </span><br><span class="line">           InetAddress inetAddress4 = InetAddress.getLocalHost();           								System.out.println(inetAddress4);</span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">           </span><br><span class="line">       &#125;<span class="keyword">catch</span>(UnknowHostException e)&#123;</span><br><span class="line">           e.printStrackTrace();</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h2><p>端口表示计算机上的一个程序的进程。</p>
<ul>
<li><p>不同的进程有不同的端口号。端口号不能重复，用于区分软件</p>
</li>
<li><p>被规定0~65535</p>
</li>
<li><p>TCP，UDP：65535*2  tcp：80，udp:80    单个协议下，端口号不能冲突</p>
</li>
<li><p>端口分类</p>
<ul>
<li><p>公有端口 0~1023</p>
<ul>
<li>HTTP：80</li>
<li>HTTPS：443</li>
<li>FTP:21</li>
<li>Telent: 23</li>
</ul>
</li>
<li><p>程序注册端口：1024~49151,分配用户或者程序</p>
<ul>
<li>Tomcat:8080</li>
<li>MySql:3306</li>
<li>Oracle:1521</li>
</ul>
</li>
<li><p>动态，私有:49152~65535</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">netstat -ano <span class="comment"># 查看所有的端口</span></span><br><span class="line">netstat -ano|findstr <span class="string">"5900"</span> <span class="comment"># 查看指定的端口</span></span><br><span class="line">tasklist|findstr <span class="string">"8696"</span>  <span class="comment"># 查看指定端口的进程</span></span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestInetSocketAddress</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String)</span></span>&#123;</span><br><span class="line">        InetSocketAddress socketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">"127.0.0.1"</span>, <span class="number">8080</span>);</span><br><span class="line">        InetSocketAddress socketAddress = <span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">8080</span>);</span><br><span class="line">        System.out.println(<span class="string">"socketAddress"</span>);</span><br><span class="line">        System.out.println(<span class="string">"socketAddress2"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(socketAddress.getAddress());           System.out.println(socketAddress.getHostName());</span><br><span class="line">        <span class="comment">//hosts  地址</span></span><br><span class="line">        System.out.println(socketAddress.getPort());</span><br><span class="line">		<span class="comment">//端口</span></span><br><span class="line"></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="通信协议"><a href="#通信协议" class="headerlink" title="通信协议"></a>通信协议</h2><p>协议：约定，就好比现在说的是普通话</p>
<p>网络通信协议：速率，传输码率，代码结构，传输控制</p>
<p><strong>TCP/IP协议簇</strong>：实际上是一组协议</p>
<p>重要：</p>
<ul>
<li>TCP：用户传输协议</li>
<li>UDP：用户数据报协议</li>
</ul>
<p>出名的协议：</p>
<ul>
<li>TCP：用户传输协议</li>
<li>IP：网络互连协议</li>
</ul>
<p><strong>TCP UDP对比</strong></p>
<p>TCP：打电话</p>
<ul>
<li><p>连接，稳定</p>
</li>
<li><p>三次握手，四次挥手</p>
</li>
<li><p>客户端，服务端</p>
</li>
<li><p>传输完成，释放连接，效率低</p>
</li>
</ul>
<p>UDP：发短信</p>
<ul>
<li><p>不连接，不稳定</p>
</li>
<li><p>客户端，服务端：没有明确的界限</p>
</li>
<li><p>不管有没有准备好，都可以发给你</p>
</li>
<li><p>导弹</p>
</li>
<li><p>DDOS:洪水攻击！（饱和攻击）</p>
</li>
</ul>
<h3 id="TCP实现聊天"><a href="#TCP实现聊天" class="headerlink" title="TCP实现聊天"></a>TCP实现聊天</h3><p>客户端：</p>
<p>1.连接服务器Socket</p>
<p>2.发送消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClientDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">        	<span class="comment">//1.要知道服务器的地址</span></span><br><span class="line">            InetAddress serverIP = InetAddress.getByName(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">            <span class="keyword">int</span> port  = <span class="number">9999</span>;</span><br><span class="line">            <span class="comment">//2.创建一个socket连接</span></span><br><span class="line">            Socket socket = <span class="keyword">new</span> Socket(serverIP,port);</span><br><span class="line">            <span class="comment">//3.发送消息 io流</span></span><br><span class="line">            OutputStream os = socket.getOutputStream();</span><br><span class="line">            os.write(<span class="string">"你好，欢迎学习狂神说Java"</span>.getBytes());</span><br><span class="line">        </span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p>服务端：</p>
<p>1.建立服务的端口Server Socket</p>
<p>2.等待用户的连接  accept</p>
<p>3.接收用户的消息</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServerDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//1.得有一个地址</span></span><br><span class="line">            ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9999</span>);</span><br><span class="line">            <span class="comment">//2.等待客户端连接过来</span></span><br><span class="line">            Socket socket = serverSocket.accept();</span><br><span class="line">            <span class="comment">//3.读取客户端的消息</span></span><br><span class="line">            IputStream is = socket.getInputStream();</span><br><span class="line">            </span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            byte[] buffer = new byte[1024];</span></span><br><span class="line"><span class="comment">            int len;</span></span><br><span class="line"><span class="comment">            while((len=is.read(buffer))!=-1)&#123;</span></span><br><span class="line"><span class="comment">                String msg = new String(buffer,0,len);</span></span><br><span class="line"><span class="comment">                System.out.println(msg);</span></span><br><span class="line"><span class="comment">                */</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//管道流</span></span><br><span class="line">            ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">            <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            <span class="keyword">int</span> lenl;</span><br><span class="line">            <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">                baos.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">            System.out.println(baos.toString());</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">        <span class="comment">//关闭资源</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//客户端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpClientDemo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个Socket连接</span></span><br><span class="line">         Socket socket = <span class="keyword">new</span> Socket(InteAddress.getByName(<span class="string">"127.0.0.1"</span>),<span class="number">9000</span>);</span><br><span class="line">        <span class="comment">//2.创建一个输出流</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        <span class="comment">//3.读取文件</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="keyword">new</span> File(<span class="string">"qinjiang.jpg"</span>));</span><br><span class="line">        <span class="comment">//4.写出文件</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=fis.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            os.write(buffer,<span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通知服务器，我已经结束了</span></span><br><span class="line">        socket.shutdownOutput();<span class="comment">//我已经传输完毕了</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//确定服务器接收完毕，才能断开连接</span></span><br><span class="line">        InputStream inputStream = socket.getInputStream();</span><br><span class="line">        <span class="comment">//String byte[]</span></span><br><span class="line">        ByteArrayOutputStream baos = <span class="keyword">new</span> ByteArrayOutputStream();</span><br><span class="line">        <span class="keyword">byte</span>[] buffer2 = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len2;</span><br><span class="line">        <span class="keyword">while</span>((len2=inputStream.read(buffer2))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            baos.write(buffer2,<span class="number">0</span>,len2);</span><br><span class="line">        &#125; </span><br><span class="line">        System.out.println(baos.toString());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.关闭资源</span></span><br><span class="line">        baos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        os.close();</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//服务端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TcpServerDemo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception </span>&#123;		<span class="comment">//1.创建服务</span></span><br><span class="line">        ServerSocket serverSocket = <span class="keyword">new</span> ServerSocket(<span class="number">9000</span>);</span><br><span class="line">        <span class="comment">//2.监听客户端的连接</span></span><br><span class="line">        serverSocket.accept();<span class="comment">//阻塞式监听，会一直等待客户端连接</span></span><br><span class="line">        <span class="comment">//3.获取输入流</span></span><br><span class="line">        InOutputStream is = socket.getInputStream();</span><br><span class="line">        <span class="comment">//4.文件传输</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"receive.jpg"</span>));</span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=is.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//通知客户端我接收完毕了</span></span><br><span class="line">        OutputStream os = socket.getOutputStream();</span><br><span class="line">        os.write(<span class="string">"我接受完毕了，你可以断开了"</span>,getBytes());</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//5.关闭资源</span></span><br><span class="line">    	fos.close();</span><br><span class="line">        is.close();</span><br><span class="line">        socket.close();</span><br><span class="line">        serverSocket.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Tomcat"><a href="#Tomcat" class="headerlink" title="Tomcat"></a>Tomcat</h3><p>服务端</p>
<ul>
<li>自定义  S</li>
<li>Tomcat服务器   S</li>
</ul>
<p>客户端</p>
<ul>
<li>自定义    C</li>
<li>浏览器    B</li>
</ul>
<h3 id="UDP"><a href="#UDP" class="headerlink" title="UDP"></a>UDP</h3><p>发短信：不用连接，需要知道对方的地址</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送端</span></span><br><span class="line"><span class="comment">//不需要连接服务器</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpClientDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.建立一个Socket</span></span><br><span class="line">         DatagramSocket socket = <span class="keyword">new</span> DatagramSocket();</span><br><span class="line">        <span class="comment">//2.建个包</span></span><br><span class="line">        String msg = <span class="string">"你好啊，服务器"</span>;</span><br><span class="line">        <span class="comment">//发送给谁</span></span><br><span class="line">        InetAddress localhost = InetAddress.getByName(<span class="string">"localhost"</span>);</span><br><span class="line">        <span class="keyword">int</span> port = <span class="number">9000</span>;</span><br><span class="line">        <span class="comment">//数据，数据的起始位置，要发送给谁</span></span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(msg.getBytes(),<span class="number">0</span>,msg.getBytes().length,localhost,port);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3.发送包</span></span><br><span class="line">        socket.send(packet);</span><br><span class="line">        <span class="comment">//4.关闭流</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收端</span></span><br><span class="line"><span class="comment">//还是要等待客户端的连接</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpServerdemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> throw Exception</span>&#123;</span><br><span class="line">        <span class="comment">//开放端口</span></span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> Datagramsocket(<span class="number">9000</span>);</span><br><span class="line">        <span class="comment">//连接数据包</span></span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(buffer,<span class="number">0</span>,buffer.length);</span><br><span class="line">        </span><br><span class="line">        socket.receive(packet);<span class="comment">//阻塞接收</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(packet.getAddress());</span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(packet.getData(),<span class="number">0</span>,packet.getLength()));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭连接</span></span><br><span class="line">        socket.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="在线咨询"><a href="#在线咨询" class="headerlink" title="在线咨询"></a>在线咨询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//发送端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpSenderDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">8888</span>);</span><br><span class="line">      <span class="comment">//准备数据：控制台读取 System.in</span></span><br><span class="line">      BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            String data = reader.readLine();</span><br><span class="line">            <span class="keyword">byte</span>[] datas = data.getBytes();</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas,<span class="number">0</span>,datas.length,<span class="keyword">new</span> InetSocketAddress(<span class="string">"localhost"</span>,<span class="number">6666</span>));</span><br><span class="line">            </span><br><span class="line">            socket.send(packet);</span><br><span class="line">            <span class="keyword">if</span>(data.equals(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收端</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UdpReceiveDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        DatagramSocket socket = <span class="keyword">new</span> DatagramSocket(<span class="number">6666</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="comment">//准备接收包裹</span></span><br><span class="line">            <span class="keyword">byte</span>[] container = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">            DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container,<span class="number">0</span>,container.length);</span><br><span class="line">            socket.receive(packet);<span class="comment">//阻塞式接收包裹</span></span><br><span class="line">            </span><br><span class="line">            <span class="comment">//断开连接  bye</span></span><br><span class="line">            <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">            String receiveData = <span class="keyword">new</span> String(data,<span class="number">0</span>,data.length);</span><br><span class="line">            </span><br><span class="line">            System.out.println(receiveData);</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span>(receiveData.equals(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Udp多线程在线咨询"><a href="#Udp多线程在线咨询" class="headerlink" title="Udp多线程在线咨询"></a>Udp多线程在线咨询</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//发送线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkSend</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> formPort;</span><br><span class="line">    <span class="keyword">private</span> String toIP;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> toPort;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TlakSend</span><span class="params">(<span class="keyword">int</span> formPort,String toIP,<span class="keyword">int</span> toPort)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.fromPort = formPort;</span><br><span class="line">        <span class="keyword">this</span>.toIP = toIP;</span><br><span class="line">        <span class="keyword">this</span>.toPort = toPort;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSockt(formPort);</span><br><span class="line">             BufferedReader reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Overrode</span> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                String data = reader.readLine();</span><br><span class="line">                <span class="keyword">byte</span>[] datas = data.getByte();</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(datas,<span class="number">0</span>,datas.length,<span class="keyword">new</span> InetSocketAddress(<span class="keyword">this</span>.toIP,<span class="keyword">this</span>.toPort));</span><br><span class="line">                </span><br><span class="line">                socket.send(packet);</span><br><span class="line">                <span class="keyword">if</span>(data.equals(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(Exception e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接收线程</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkReceive</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    DatagramSocket socket = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> port;</span><br><span class="line">    <span class="keyword">private</span> String msgFrom;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TalkReceive</span><span class="params">(<span class="keyword">int</span> port,String msgFrom)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.port = port;</span><br><span class="line">        <span class="keyword">this</span>.msgFrom = msgFrom;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            socket = <span class="keyword">new</span> DatagramSocket(port);</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SocketException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//准备接收包裹</span></span><br><span class="line">                <span class="keyword">byte</span>[] container = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">                DatagramPacket packet = <span class="keyword">new</span> DatagramPacket(container,<span class="number">0</span>,container.length);</span><br><span class="line">                socket.receive(packet);<span class="comment">//阻塞式接收包裹</span></span><br><span class="line">                </span><br><span class="line">                <span class="comment">//断开连接  bye</span></span><br><span class="line">                <span class="keyword">byte</span>[] data = packet.getData();</span><br><span class="line">                String receiveData = <span class="keyword">new</span> String(Data,<span class="number">0</span>,data.length);</span><br><span class="line">                </span><br><span class="line">                System.out.println(msgFrom+<span class="string">":"</span>+receiveData);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">if</span>(receiveData.equalus(<span class="string">"bye"</span>))&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;<span class="keyword">catch</span>(IoExecption e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        socket.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkStudent</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="comment">//开启两个线程</span></span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">7777</span>,<span class="string">"localhost"</span>,<span class="number">9999</span>)).start();</span><br><span class="line">       <span class="keyword">new</span> Thread(<span class="keyword">new</span> Receive(<span class="number">8888</span>,<span class="string">"老师"</span>)).start();</span><br><span class="line">   &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TalkTeacher</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkSend(<span class="number">5555</span>,<span class="string">"localhost"</span>,<span class="number">8888</span>)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(<span class="keyword">new</span> TalkReceive(<span class="number">9999</span>,<span class="string">"学生"</span>)).start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><p>同一定位资源符：定位资源的，定位互联网上的某一个资源</p>
<p>DNS 域名解析   <a href="http://www.baidu.com" target="_blank" rel="noopener">www.baidu.com</a>    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">协议：&#x2F;&#x2F;ip地址：端口&#x2F;项目名&#x2F;资源</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">URLDemo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/helloworld/index.jsp?username=kuangshen&amp;password=123"</span>);</span><br><span class="line">        System.out.println(url.getProtocol());<span class="comment">//协议</span></span><br><span class="line">        System.out.println(url.getHost());<span class="comment">//z主机ip</span></span><br><span class="line">        System.out.println(url.getPort());<span class="comment">//端口</span></span><br><span class="line">        System.out.println(url.getPath());<span class="comment">//文件地址</span></span><br><span class="line">        System.out.println(url.getFile());<span class="comment">//文件全路径</span></span><br><span class="line">        System.out.println(url.getQuery());<span class="comment">//参数</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UrlDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//1.下载地址</span></span><br><span class="line">        URL url = <span class="keyword">new</span> URL(<span class="string">"http://localhost:8080/qinjiang/SecurtyFile.txt"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.连接到这个资源的HTTP</span></span><br><span class="line">        HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();</span><br><span class="line">        </span><br><span class="line">        InputStream inputStream = urlConnection.getInputStream();</span><br><span class="line">        </span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"SecurityFile.txt"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] buffer = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="keyword">int</span> len;</span><br><span class="line">        <span class="keyword">while</span>((len=inputStream.read(buffer))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            fos.write(buffer,<span class="number">0</span>,len);<span class="comment">//写出这个数据</span></span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">        inputStream.close();</span><br><span class="line">        urlConnection.disconnect();<span class="comment">//断开连接</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>数据结构与算法绪论</title>
    <url>/Mr-lee-MQ.hithub.io/2020/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/</url>
    <content><![CDATA[<h1 id="数据结构与算法"><a href="#数据结构与算法" class="headerlink" title="数据结构与算法"></a>数据结构与算法<a id="more"></a></h1><h2 id="1、数据结构和算法内容介绍"><a href="#1、数据结构和算法内容介绍" class="headerlink" title="1、数据结构和算法内容介绍"></a>1、数据结构和算法内容介绍</h2><h3 id="1-1、字符串匹配问题"><a href="#1-1、字符串匹配问题" class="headerlink" title="1.1、字符串匹配问题"></a>1.1、字符串匹配问题</h3><ul>
<li><p>有一个字符串 str 1 = “”硅硅谷 尚硅谷你尚硅 尚硅谷 你尚硅谷你尚硅你好”“，和一个子串 str2 = ”尚硅谷 你尚硅你“ </p>
</li>
<li><p>现在要判断str1是否含有str2,如果存在，就返回第一次出现的位置，如果没有，则返回-1</p>
</li>
<li><p>要求用最快的速度来完成匹配</p>
</li>
<li><p>你的思路是什么？</p>
</li>
</ul>
<p><strong>方法1：暴力匹配</strong></p>
<p><strong>方法2：KMP算法（正解）</strong>（部分匹配表）</p>
<h3 id="1-2、汉诺塔游戏"><a href="#1-2、汉诺塔游戏" class="headerlink" title="1.2、汉诺塔游戏"></a>1.2、汉诺塔游戏</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20210125163727388.png" alt="image-20210125163727388"></p>
<h3 id="1-3、八皇后问题"><a href="#1-3、八皇后问题" class="headerlink" title="1.3、八皇后问题"></a>1.3、八皇后问题</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20210125164322087.png" alt="image-20210125164322087"></p>
<h3 id="1-4、骑士周游问题"><a href="#1-4、骑士周游问题" class="headerlink" title="1.4、骑士周游问题"></a>1.4、骑士周游问题</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/10/26/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/image-20210125165449719.png" alt="image-20210125165449719"></p>
]]></content>
      <tags>
        <tag>数据结构和算法</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式</title>
    <url>/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
    <content><![CDATA[<h1 id="设计模式"><a href="#设计模式" class="headerlink" title="设计模式 "></a>设计模式 <a id="more"></a></h1><h1 id="1、Java设计模式"><a href="#1、Java设计模式" class="headerlink" title="1、Java设计模式"></a>1、Java设计模式</h1><h2 id="1-1、原型设计模式问题"><a href="#1-1、原型设计模式问题" class="headerlink" title="1.1、原型设计模式问题"></a>1.1、原型设计模式问题</h2><ol>
<li>有请用UML类图画出原型模式核心角色</li>
<li>原型设计模式的深拷贝和浅拷贝是什么?并写出深拷贝的两种方式的源码</li>
<li>在Spring框架中哪里使用到原型模式，并对源码进行分析</li>
<li>设计模式的七大设计原则核心思想</li>
<li>能够以类图的说明设计原则</li>
<li>在项目实际开发中，你在哪里用到了ocp原则</li>
</ol>
<h2 id="1-2、设计模式的目的"><a href="#1-2、设计模式的目的" class="headerlink" title="1.2、设计模式的目的"></a>1.2、设计模式的目的</h2><ul>
<li>代码重用性（相同功能的代码，不用多次编写）</li>
<li>可读性（编程规范性，便于其他程序员阅读和理解）</li>
<li>可扩展性（当需要增加新的功能时，非常的方便）</li>
<li>可靠性（当我们增加新的功能后，对原来的功能没有影响）</li>
<li>使程序呈现<strong>高内聚，低耦合</strong>的特性</li>
</ul>
<h1 id="2、设计模式的七大原则"><a href="#2、设计模式的七大原则" class="headerlink" title="2、设计模式的七大原则"></a>2、设计模式的七大原则</h1><ul>
<li>单一职责原则</li>
<li>接口隔离原则</li>
<li>依赖倒转原则</li>
<li>里氏替换原则 </li>
<li>开闭原则</li>
<li>迪米特原则</li>
<li>合成复用原则</li>
</ul>
<h2 id="2-1、单一职责原则"><a href="#2-1、单一职责原则" class="headerlink" title="2.1、单一职责原则"></a>2.1、单一职责原则</h2><p><strong>基本介绍</strong></p>
<p>​    对类来说，即一个类应该只负责一项职责。如类A负责两个不同职责：职责1，职责2.当职责1需求变更时而改变A时，可能造成职责2执行错误，所以需要将类A的粒度分解为A1，A2。</p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Vehicle2</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">"公路运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runAir</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">"在天空中运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">runWater</span><span class="params">(String vehicle)</span></span>&#123;</span><br><span class="line">        System.out.println(vehicle + <span class="string">"在水中运行"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-2、接口隔离原则"><a href="#2-2、接口隔离原则" class="headerlink" title="2.2、接口隔离原则"></a>2.2、接口隔离原则</h2><p><strong>基本介绍</strong></p>
<p>​    客户端不应该依赖他不需要的接口。即一个类对另一个类的依赖应该建立在最小的接口上。</p>
<p><strong>实例：</strong></p>
<p>​    类A通过接口Interface1依赖类B，类C通过接口Interface1依赖类D，如果接口Interface1对于类A和类C说不是最小接口，那么类B和类D必须去实现他们不需要的方法。</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210107210502179.png" alt="image-20210107210502179"></p>
<p><strong>改进：</strong></p>
<p>​    将接口Interface1拆分为独立的3个接口，类A和类C分别与他们需要的接口建立依赖关系。</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210107210658648.png" alt="image-20210107210658648"></p>
<h2 id="2-3、依赖倒转原则"><a href="#2-3、依赖倒转原则" class="headerlink" title="2.3、依赖倒转原则"></a>2.3、依赖倒转原则</h2><p><strong>基本介绍</strong></p>
<ol>
<li>高层模块不应该依赖底层模块，二者应该依赖其抽象。</li>
<li>抽象不应该依赖细节，细节应该依赖抽象</li>
<li>依赖倒转的中心思想是面向接口编程</li>
<li>依赖倒转原则是基于这样的设计理念：相对于细节的多变性，抽象的东西要稳定得多，以抽象为基础搭建的架构要比以细节为基础的架构稳定得多。在Java中，抽象指的是接口或者抽象类，细节就是具体的实现类。</li>
<li>使用接口或抽象类的目的是制定好规范，而不涉及任何具体的操作，把展现细节的任务交给他们的实现类去完成。</li>
</ol>
<p><strong>实例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="keyword">package</span> inversion;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    person.receive(<span class="keyword">new</span> Email());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"电子邮件信息：Hello，world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成person接收信息的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receive</span><span class="params">(Email email)</span></span>&#123;</span><br><span class="line">        System.out.println(email.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<ol>
<li><p>简单，容易被想到</p>
</li>
<li><p>如果我们获取的对象是 微信，短信等，则新增类，同时Person也要增加相应的接收方法。</p>
</li>
<li><p><strong>解决思路：</strong>引入一个抽象的接口IReceiver，表示接收者，这样Person类和接口IReceiver发生依赖</p>
<p>因为Email，微信，等等属于接口IReceiver的范围，他们各自实现IReceiver接口就行，这样就符合依赖倒转原则。</p>
</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式2</span></span><br><span class="line"><span class="keyword">package</span> inversion2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DependecyInversion</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    </span><br><span class="line">    person.receiver(<span class="keyword">new</span> Email());</span><br><span class="line">    person.receiver(<span class="keyword">new</span> WeiXin());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义一个接口</span></span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Email</span> <span class="keyword">implements</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">"电子邮件信息：Hello，world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//增加WeiXin</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeiXin</span> <span class="keyword">implements</span> <span class="title">IReceiver</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getInfo</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"微信信息：Hello，ok"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//完成person接收信息的功能</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">receiver</span><span class="params">(IReceiver receiver)</span></span>&#123;</span><br><span class="line">        System.out.println(receiver.getInfo());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>依赖倒转原则注意事项和细节：</strong></p>
<ol>
<li>底层模块尽量都要有抽象类和接口，或者两者都有，程序稳定性会更好。</li>
<li>变量的声明尽量是抽象类和接口，这样我们的变量引用和实际对象间，就存在一个缓冲层，利于程序扩展和优化</li>
<li>继承时遵循里氏替换原则</li>
</ol>
<h2 id="2-4、里氏替换原则"><a href="#2-4、里氏替换原则" class="headerlink" title="2.4、里氏替换原则"></a>2.4、里氏替换原则</h2><p><strong>OO中的继承性的思考和说明</strong></p>
<ol>
<li>继承包含这样的一层含义：父类中凡是已经实现好的方法，实际上是在设定规范和契约，虽然他不强制要求所有子类必须遵循这些契约，但是如果子类对这些已经实现的方法任意修改，就会对整个继承体系造成破坏。</li>
<li>集成在给程序设计带来便利的同时，也带来了弊端，比如使用继承会给程序带来侵入性，程序的可移植性降低，增加对象间的耦合性，如果一个类被其他类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及子类的功能都有可能产生故障。</li>
</ol>
<p><strong>基本介绍</strong></p>
<ol>
<li>如果对每个类型为T1的对象o1，都有类型为T2的对象o2，使得以T1定义的所有程序P在所有的对象o1都替代成o2时，程序P没有发生变化，那么类型T2是类型T1的子类型，换句话说，所有引用基类的地方必须透明的使用其子类的对象。</li>
<li>在使用继承时，遵循里氏替换原则，在子类中尽量不要重写父类的方法。</li>
<li>里氏替换原则告诉我们，级城市加上让两个类的耦合性增强了，在适当的情况下，可以通过聚合，组合，依赖来解决问题。</li>
</ol>
<p><strong>案例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> liskov;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span>+a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span>+b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"11+3="</span>+b.func2(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//A类：返回两个数的差</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num1-num2;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//B类继承A类,并重写了func1</span></span><br><span class="line"><span class="comment">//新增一个功能func2</span></span><br><span class="line"><span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a + b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> func1(a,b) +<span class="number">9</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析:</strong></p>
<ol>
<li>我们发现原本运行正常的功能发生了错误，原因就是类B无意间重写了父类的方法，造成原有功能出现错误。在实际编程中，我们常常会通过重写父类的方法完成新的功能，这样写起来虽然简单，但是整个继承体系的复用性会比较差。特别是运行多态比较频繁的时候。</li>
<li>通常的做法是：原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖，聚合，组合等关系替代。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> liskov.improve;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Liskov2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A();</span><br><span class="line">        System.out.println(<span class="string">"11-3="</span>+a.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line"></span><br><span class="line">        B b = <span class="keyword">new</span> B();</span><br><span class="line">        System.out.println(<span class="string">"11+3="</span>+b.func1(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        System.out.println(<span class="string">"11+3+9="</span>+b.func2(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">        <span class="comment">//使用组合仍可可以使用到A类的方法</span></span><br><span class="line">        System.out.println(<span class="string">"11-3="</span>+b.func3(<span class="number">11</span>,<span class="number">3</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//创建一个更加基础的基类</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">       <span class="comment">//把更加基础的方法和成员写到Base类中</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//A类：返回两个数的差</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Base</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> num1,<span class="keyword">int</span> num2)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> num1-num2;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//B类继承A类,并重写了func1</span></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> <span class="keyword">extends</span> <span class="title">Base</span></span>&#123;</span><br><span class="line">        <span class="comment">//如果B类需要用到A类的方法，使用组合的方式</span></span><br><span class="line">        <span class="keyword">private</span> A a = <span class="keyword">new</span> A();</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func1</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> a + b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func2</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> func1(a,b) +<span class="number">9</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="comment">//仍然像想使用A的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">func3</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.a.func1(a,b);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-5、开闭原则"><a href="#2-5、开闭原则" class="headerlink" title="2.5、开闭原则"></a>2.5、开闭原则</h2><p><strong>基本介绍</strong></p>
<ol>
<li>开闭原则是编程中最基础，最重要的设计原则。</li>
<li>一个软件实体如类，模块和函数应该对扩展开放（对提供方），对修改关闭（对使用方），用抽象构建框架，用实现扩展细节。</li>
<li>当软件需要变化时，尽量<strong>通过扩展软件实体的行为</strong>来实现变化，而不是通过修改已有的代码来实现变化。</li>
<li>编程中遵循其他规则，以及使用设计模式的目的就是遵循开闭原则。</li>
</ol>
<p><strong>实例：</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式1</span></span><br><span class="line"><span class="keyword">package</span> ocp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">    graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">    graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个用于绘图的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span></span>&#123;</span><br><span class="line">    <span class="comment">//接收Shape对象，然后根据type的值，来绘制不同的图形</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.m_type==<span class="number">1</span>)</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type==<span class="number">2</span>)</span><br><span class="line">            drawCircle(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">(Shape r)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(Shape r)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    Rectangle()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span>  <span class="title">Shape</span></span>&#123;</span><br><span class="line">    Circle()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方式1的优缺点</strong></p>
<ol>
<li>优点是比较好理解，简单易操作</li>
<li>缺点是违反了设计模式的ocp原则，即对外开放，对修改关闭。即当我们给类增加新功能时，尽量不修改代码，或者尽可能的少修改代码。</li>
<li>比如我们这是要增加一个图形类三角形，我们需要做一下修改，需要修改的地方比较多。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改进1:增加新的图形类，并继承Shape类，并在判断语句中添加相应的判断。</span></span><br><span class="line"><span class="keyword">package</span> ocp;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line">    graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">    graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">    graphicEditor.drawTriangle(<span class="keyword">new</span> Triangle());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个用于绘图的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span></span>&#123;</span><br><span class="line">    <span class="comment">//接收Shape对象，然后根据type的值，来绘制不同的图形</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (s.m_type==<span class="number">1</span>)</span><br><span class="line">            drawRectangle(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type==<span class="number">2</span>)</span><br><span class="line">            drawCircle(s);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (s.m_type==<span class="number">3</span>)</span><br><span class="line">            drawTriangle(s);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawRectangle</span><span class="params">(Shape r)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawCircle</span><span class="params">(Shape r)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawTriangle</span><span class="params">(Shape r)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制三角形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> m_type;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    Rectangle()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span>  <span class="title">Shape</span></span>&#123;</span><br><span class="line">    Circle()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type=<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span>  <span class="title">Shape</span></span>&#123;</span><br><span class="line">    Triangle()&#123;</span><br><span class="line">        <span class="keyword">super</span>.m_type=<span class="number">3</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法1的改进的思路分析</strong></p>
<p>​    把创建的Shape类做成抽象类，并提供一个抽象方法draw方法，让子类去实现即可，这样我们有新的图形种类时，只需要让新的图形类去继承Shape，并实现draw方法即可。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//改进2:把创建的Shape类做成抽象类，并提供抽象方法draw，让子类去实现即可。</span></span><br><span class="line"><span class="keyword">package</span> ocp.improve;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ocp</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        GraphicEditor graphicEditor = <span class="keyword">new</span> GraphicEditor();</span><br><span class="line"></span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Rectangle());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Circle());</span><br><span class="line">        graphicEditor.drawShape(<span class="keyword">new</span> Triangle());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//这是一个用于绘图的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">GraphicEditor</span></span>&#123;</span><br><span class="line">    <span class="comment">//接收Shape对象，调用draw方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">drawShape</span><span class="params">(Shape s)</span></span>&#123;</span><br><span class="line">        s.draw();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rectangle</span> <span class="keyword">extends</span> <span class="title">Shape</span></span>&#123;</span><br><span class="line">    Rectangle()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制矩形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> <span class="keyword">extends</span>  <span class="title">Shape</span></span>&#123;</span><br><span class="line">    Circle()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制圆形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Triangle</span> <span class="keyword">extends</span>  <span class="title">Shape</span></span>&#123;</span><br><span class="line">    Triangle()&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"绘制三角形"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="2-6、迪米特法则"><a href="#2-6、迪米特法则" class="headerlink" title="2.6、迪米特法则"></a>2.6、迪米特法则</h2><p><strong>基本介绍</strong></p>
<ol>
<li>一个对象应该对其他对象保持最少的了解</li>
<li>类和类关系越密切，耦合度越大</li>
<li>迪米特法则又称<strong>最少知道原则</strong>，即一个类对自己依赖的类知道的越少越好。也就是说，对于被依赖的类不管多么复杂，都尽量将逻辑封装在类的内部，对外除了提供public方法，不对外泄露任何信息。</li>
<li>只与直接的朋友通信。</li>
<li><strong>直接的朋友：</strong>每个对象都会与其他对象有耦合关系，只要两个对象之间有耦合关系，我们就说这两个对象之间是朋友关系。耦合的方式有很多，依赖，关联，组合，聚合等。其中，我们称出现成员变量，方法参数，方法返回值中的类为直接朋友，而出现在局部变量中的类不是直接的朋友。也就是说，陌生的类最好不要以局部变量的形式出现在类的内部。</li>
</ol>
<p><strong>实例：</strong>有一个学校，下属有各个学院和总部，现要求打印学校总部成员工ID和学院员工的id。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demeter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demeter1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SchoolManger schoolManger = <span class="keyword">new</span> SchoolManger();</span><br><span class="line">    schoolManger.printAllEmployee(<span class="keyword">new</span> CollegeManger());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校总部员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学院员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//管理学院员工的管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeManger</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            CollegeEmployee emp = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">            emp.setId(<span class="string">"学院员工id= "</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolManger</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回学校总部员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Employee emp = <span class="keyword">new</span> Employee();</span><br><span class="line">            emp.setId(<span class="string">"学校总部员工id= "</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法完成输出学校总部和学院员工信息（id）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printAllEmployee</span><span class="params">(CollegeManger sub)</span></span>&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = sub.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">"------分公司员工-------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee e :list1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">"-------学院总部员工-------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee e:list2) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<p>​    SchoolManger类的直接朋友有哪些？ Employee,CollegeManger</p>
<p>​    CollegeEmployee不是直接朋友，而是一个陌生类，违背了迪米特法则。</p>
<p><strong>改进思路</strong></p>
<ol>
<li>前面设计的问题在于SchoolManger中 ，CollEmployee类并不是SchoolManger类的直接朋友。</li>
<li>按照迪米特法则，应该避免类中出现这样的非直接朋友关系的耦合。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> demeter.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">demeter1</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    SchoolManger schoolManger = <span class="keyword">new</span> SchoolManger();</span><br><span class="line">    schoolManger.printAllEmployee(<span class="keyword">new</span> CollegeManger());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校总部员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Employee</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学院员工类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeEmployee</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String id;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(String id)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.id = id;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> id;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//管理学院员工的管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CollegeManger</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;CollegeEmployee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list = <span class="keyword">new</span> ArrayList&lt;CollegeEmployee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">            CollegeEmployee emp = <span class="keyword">new</span> CollegeEmployee();</span><br><span class="line">            emp.setId(<span class="string">"学院员工id= "</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出学院员工的信息</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;CollegeEmployee&gt; list1 = getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">"------分公司员工-------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (CollegeEmployee e :list1) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//学校管理类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SchoolManger</span> </span>&#123;</span><br><span class="line">    <span class="comment">//返回学校总部员工</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Employee&gt; <span class="title">getAllEmployee</span><span class="params">()</span></span>&#123;</span><br><span class="line">        List&lt;Employee&gt; list = <span class="keyword">new</span> ArrayList&lt;Employee&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            Employee emp = <span class="keyword">new</span> Employee();</span><br><span class="line">            emp.setId(<span class="string">"学校总部员工id= "</span>+i);</span><br><span class="line">            list.add(emp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//该方法完成输出学校总部和学院员工信息（id）</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">printAllEmployee</span><span class="params">(CollegeManger sub)</span></span>&#123;</span><br><span class="line">        <span class="comment">//输出学院员工</span></span><br><span class="line">        sub.printEmployee();</span><br><span class="line"></span><br><span class="line">        List&lt;Employee&gt; list2 = <span class="keyword">this</span>.getAllEmployee();</span><br><span class="line">        System.out.println(<span class="string">"-------学院总部员工-------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Employee e:list2) &#123;</span><br><span class="line">            System.out.println(e.getId());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>分析：</strong></p>
<ol>
<li>将输出学院的员工方法，封装到CollegeManger</li>
</ol>
<p><strong>迪米特法则注意事项和细节</strong></p>
<ol>
<li>迪米特法则的核心就是降低类之间的耦合</li>
<li>注意：由于每个类都减少了不必要的依赖，因此迪米特法则只是要求减低类间（对象间）的耦合关系，并不是要求完全没有依赖关系。</li>
</ol>
<h2 id="2-7、合成复用原则"><a href="#2-7、合成复用原则" class="headerlink" title="2.7、合成复用原则"></a>2.7、合成复用原则</h2><p><strong>基本介绍</strong></p>
<p>原则是尽量使用合成/聚合的方式，而不是使用继承</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210108134655716.png" alt="image-20210108134655716"></p>
<p><strong>设计原则核心思想：</strong></p>
<ol>
<li>找出应用中可能需要变化之处，把他们独立出来，不要和那些不需要变化的代码混在一起。</li>
<li>针对接口编程，而不是针对实现编程。</li>
<li>为了交互对象之间的松耦合设计而努力。</li>
</ol>
<h1 id="3、UML类图"><a href="#3、UML类图" class="headerlink" title="3、UML类图"></a>3、UML类图</h1><h2 id="3-1、UML基本介绍"><a href="#3-1、UML基本介绍" class="headerlink" title="3.1、UML基本介绍"></a>3.1、UML基本介绍</h2><ol>
<li>UML统一建模语言，是一种用于软件系统分析和设计的语言工具，他用与帮助软件开发人员进行思考和记录思路的结果。</li>
<li>UML本身是一套符号的规定，就像数学符号和化学符号一样，这些符号用于描述软件模型中的各个元素和他们之间的关系，比如类，接口，实现，泛华，依赖，组合，聚合等</li>
<li>使用UML来建模，常用的工具有Rational Rose，也可以使用一些插件来建模。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210108141956726.png" alt="image-20210108141956726"></p>
<p><strong>UML图</strong></p>
<p>​    画UML图与写文章差不多，都是把自己的思想描述给别人看，关键在于思路和条理。</p>
<p><strong>UML图分类</strong></p>
<ol>
<li>用例图</li>
<li>静态结构图：类图，对象图，包图，组件图，部署图</li>
<li>行为动态图：交互图（时序图和协作图），状态图，活动图</li>
</ol>
<p><strong>说明：</strong></p>
<ol>
<li>类图是描述类和类之间的关系的，是UML图中最核心的</li>
<li>在讲解设计模式时，我们必然会实用类图，为了让学员们能够把设计模式学到位，需要先给大家讲解类图</li>
</ol>
<h2 id="3-2、UML类图"><a href="#3-2、UML类图" class="headerlink" title="3.2、UML类图"></a>3.2、UML类图</h2><ol>
<li>用于描述系统中中的类（对象）之间的各种静态关系。</li>
<li>类之间的关系：依赖，泛化（继承），实现，关联，聚合与组合</li>
<li>类图简单举例</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>代码转化为类图</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210108144336538.png" alt="image-20210108144336538"></p>
<h3 id="3-2-1、依赖关系"><a href="#3-2-1、依赖关系" class="headerlink" title="3.2.1、依赖关系"></a>3.2.1、依赖关系</h3><p>​    只要是在类中用到了对方，那么他们之间就存在依赖关系。如果没有对方，连编译都通过不了。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceBean</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> PersonDao personDao;<span class="comment">//类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> IDCard <span class="title">getIDCard</span><span class="params">(Integer personid)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">modify</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Department department = <span class="keyword">new</span> Department();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonDao</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDCard</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210108150012386.png" alt="image-20210108150012386"></p>
<p><strong>小结：</strong></p>
<ol>
<li>类中用到了对方</li>
<li>如果是类的成员属性</li>
<li>如果是方法的返回类型</li>
<li>是方法接受的参数类型</li>
<li>方法中使用到</li>
</ol>
<h3 id="3-2-2、泛化关系"><a href="#3-2-2、泛化关系" class="headerlink" title="3.2.2、泛化关系"></a>3.2.2、泛化关系</h3><p>泛化关系其实就是继承关系，它是依赖关系的特例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">DaoSuppert</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(Object entity)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Object id)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceBean</span> <span class="keyword">extends</span> <span class="title">DaoSuppert</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210108151856745.png" alt="image-20210108151856745"></p>
<p><strong>小结：</strong></p>
<ol>
<li>泛化关系实际上就是继承关系</li>
<li>如果A类继承了B类，我们就说A和B存在泛化关系</li>
</ol>
<h3 id="3-2-3、实现关系"><a href="#3-2-3、实现关系" class="headerlink" title="3.2.3、实现关系"></a>3.2.3、实现关系</h3><p>实现关系实际上就是A类实现B类，它是依赖关系的特例</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">PersonService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PersonServiceBean</span> <span class="keyword">implements</span> <span class="title">PersonService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(Integer id)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210108153007576.png" alt="image-20210108153007576"></p>
<h3 id="3-2-4、关联关系"><a href="#3-2-4、关联关系" class="headerlink" title="3.2.4、关联关系"></a>3.2.4、关联关系</h3><p>​    关联关系实际上就是类和类之间的联系，它是依赖关系的特例</p>
<p>​    关联关系具有导航性：即双向关系或单向关系</p>
<p>​    关联关系具有多重性：如“1”（表示有且仅有一个），“0….”（表示0个或者多个），</p>
<p>“0,1”（表示0个或者1个），“n….m”（表示n到m个都可以），“m….”（表示至少m个）。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//单向一对一关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDCard</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//双向一对一关系</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard card;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDCard</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Person person;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-5、聚合关系"><a href="#3-2-5、聚合关系" class="headerlink" title="3.2.5、聚合关系"></a>3.2.5、聚合关系</h3><p>​    聚合关系表示的是整体和部分的关系，整体与部分可以分开。聚合关系是关联关系的特例，所以它具有关联关系的导航性和多重性。</p>
<p>如：一台电脑由键盘，显示器，鼠标等组成；组成电脑的各个配件是可以从电脑上分离出来的，使用带空心菱形的实线来表示。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mouse mouse;<span class="comment">//鼠标可以和Computer分离</span></span><br><span class="line">    <span class="keyword">private</span> Monitor monitor;<span class="comment">//显示器可以和Computer分离</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMouse</span><span class="params">(Mouse mouse)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.mouse = mouse;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMonitor</span><span class="params">(Monitor monitor)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.monitor = monitor;</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210108155115574.png" alt="image-20210108155115574"></p>
<p>如果Mouse，Monitor和Computer是不可分离的，则升级为<strong>组合关系</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Mouse = <span class="keyword">new</span> Mouse();</span><br><span class="line">    <span class="keyword">private</span> Monitor = <span class="keyword">new</span> Monitor();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Computer computer = <span class="keyword">new</span> Computer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-2-6、组合关系"><a href="#3-2-6、组合关系" class="headerlink" title="3.2.6、组合关系"></a>3.2.6、组合关系</h3><p>组合关系：也使整体与部分的关系，但是整体与部分不可分开。</p>
<p><strong>案例：</strong></p>
<p>​    在程序中我们定义实体：Person与IDCard，Head，那么Head和Person就是组合，IDCard和Person就是聚合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IDCard idcard;<span class="comment">//聚合关系</span></span><br><span class="line">    <span class="keyword">private</span> Head head = <span class="keyword">new</span> Head();<span class="comment">//组合关系</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDCard</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Head</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210108161621202.png" alt="image-20210108161621202"> </p>
<h1 id="4、设计模式概述"><a href="#4、设计模式概述" class="headerlink" title="4、设计模式概述"></a>4、设计模式概述</h1><h2 id="4-1、设计模式介绍"><a href="#4-1、设计模式介绍" class="headerlink" title="4.1、设计模式介绍"></a>4.1、设计模式介绍</h2><ol>
<li>设计模式是程序员在面对同类软件工程设计问题所总结出来的有用的经验，模式不是代码，而是某类问题的通用解决方案，设计模式代表了最佳的实践。这些解决方案是众多软件开发人员经过相当长一段时间的试验和错误总结出来的。</li>
<li>设计模式是本质提高软件的维护性，通用性和扩展性，并降低软件的复杂度。</li>
<li>设计模式并不局限于某种预言，java,php,c++都有设计模式。</li>
</ol>
<h2 id="4-2、设计模式类型"><a href="#4-2、设计模式类型" class="headerlink" title="4.2、设计模式类型"></a>4.2、设计模式类型</h2><p>设计模式分为三种类型，共23种。</p>
<ol>
<li><strong>创建者模式：单例模式</strong>，抽象工厂模式，原型模式，建造者模式，<strong>工厂模式</strong>。</li>
<li><strong>结构型模式：</strong>适配器模式 ，桥接模式，<strong>装饰模式</strong>，组合模式，外观模式，享元模式，<strong>代理模式</strong>。</li>
<li><strong>行为型模式：</strong>模板方法模式，命令模式，访问者模式，迭代器模式，<strong>观察者模式</strong>，中介者模式，备忘录模式，解释器模式，状态模式，策略模式，职责链模式（责任链模式）</li>
</ol>
<h2 id="4-3、单例模式"><a href="#4-3、单例模式" class="headerlink" title="4.3、单例模式"></a>4.3、单例模式</h2><h3 id="4-3-1、单例设计模式介绍"><a href="#4-3-1、单例设计模式介绍" class="headerlink" title="4.3.1、单例设计模式介绍"></a>4.3.1、<strong>单例设计模式介绍</strong></h3><p>​    所谓类的单例模式，就是采取一定的方法保证整个的软件系统中，对某个类<strong>只能存在一个对象实例</strong>，并且该类只提供一个取得其对象实例的方法（静态方法）。</p>
<p>​    比如Hibernate的SessionFactory，它充当数据存储源的代理，并负责创建Session对象。SessionFactory并不是轻量级的，一般情况下，一个项目通常只需要一个SessionFactory就够，这时就会使用到单例模式。</p>
<h3 id="4-3-2、单例设计模式的八种方式"><a href="#4-3-2、单例设计模式的八种方式" class="headerlink" title="4.3.2、单例设计模式的八种方式"></a>4.3.2、单例设计模式的八种方式</h3><ol>
<li><strong>饿汉式（静态常量）</strong></li>
<li><strong>饿汉式（静态代码块）</strong></li>
<li>懒汉式（线程不安全）</li>
<li>懒汉式（线程安全，同步方法）</li>
<li>懒汉式（线程安全，同步代码块）</li>
<li><strong>双重检查</strong></li>
<li><strong>静态内部类</strong></li>
<li><strong>枚举</strong></li>
</ol>
<h3 id="4-3-3、饿汉式（静态常量）"><a href="#4-3-3、饿汉式（静态常量）" class="headerlink" title="4.3.3、饿汉式（静态常量）"></a>4.3.3、饿汉式（静态常量）</h3><p><strong>步骤如下：</strong></p>
<ol>
<li>构造器私有化（防止new）</li>
<li>类的内部创建对象</li>
<li>向外暴露一个静态的公共方法</li>
<li>代码实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton.type1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest01</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance==instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance.hashCode="</span>+ instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"instance2.hashCode="</span>+ instance2.hashCode());</span><br><span class="line">        <span class="comment">//hashCode相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//饿汉式（静态常量）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造器私有化，外部不能new</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton instance = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供一个共有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优缺点说明：</strong></p>
<ol>
<li>优点：这种写法比较简单，就是在类加载的时候就完成实例化。避免了线程同步问题。</li>
<li>缺点：在类加载的时候就完成实例化，没有达到Lazy Loading（懒加载）的效果，如果从始至终从未使用过这个实力，则会造成内存的浪费。</li>
<li>这种方式基于classloder机制避免了多线程的同步问题，不过instance在类装载时就实例化，在单例模式中大多数都是调用getInstance方法，但是导致类装载的原因有很多种，因此不能确定有其他方式（或者其他的静态方法）导致类装载，这时候初始化instance就没有达到lazy loading的效果</li>
<li>结论：这种单例模式可用，可能造成内存浪费。</li>
</ol>
<h3 id="4-3-4、饿汉式（静态代码块）"><a href="#4-3-4、饿汉式（静态代码块）" class="headerlink" title="4.3.4、饿汉式（静态代码块）"></a>4.3.4、饿汉式（静态代码块）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest02</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试</span></span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance==instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance.hashCode="</span>+ instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"instance2.hashCode="</span>+ instance2.hashCode());</span><br><span class="line">        <span class="comment">//hashCode相同</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//饿汉式（静态代码块）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.构造器私有化，外部不能new</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//2.本类内部创建对象实例</span></span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">static</span> Singleton instance ;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">//在静态代码块中，创建单例对象</span></span><br><span class="line">        instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//3.提供一个共有的静态方法，返回实例对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优缺点说明：</strong></p>
<ol>
<li>这种方式和上面的方式其实相似，只不过是将类实例化的过程放在了静态代码块中，也是在类装载的时候，就执行静态代码块中的代码，初始化类的实例。优缺点和上面的是一样的。</li>
<li>结论：这种单例模式可以用，但是可能造成内存浪费。</li>
</ol>
<h3 id="4-3-5、懒汉式（线程不安全）"><a href="#4-3-5、懒汉式（线程不安全）" class="headerlink" title="4.3.5、懒汉式（线程不安全）"></a>4.3.5、懒汉式（线程不安全）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton.type3;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest03</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"懒汉式1，线程不安全"</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance==instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance.hashCode="</span>+ instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"instance2.hashCode="</span>+ instance2.hashCode());</span><br><span class="line">        <span class="comment">//hashCode相同</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，当使用到该方法时，采取创建instance</span></span><br><span class="line">    <span class="comment">//即懒汉式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span>  Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优缺点说明：</strong></p>
<ol>
<li>起到了Lazy Loading（懒加载）的效果，但是只能在单线程下使用。</li>
<li>如果在多线程下，一个线程进入了if（singlethon==null）判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。所以在多线程环境下不可以使用这种方式。</li>
<li>结论：在实际开发中，不要使用这种方式</li>
</ol>
<h3 id="4-3-6、懒汉式（线程安全，同步方法）"><a href="#4-3-6、懒汉式（线程安全，同步方法）" class="headerlink" title="4.3.6、懒汉式（线程安全，同步方法）"></a>4.3.6、懒汉式（线程安全，同步方法）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton.type4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"懒汉式2，线程安全，同步方法"</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance==instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance.hashCode="</span>+ instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"instance2.hashCode="</span>+ instance2.hashCode());</span><br><span class="line">        <span class="comment">//hashCode相同</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉式（线程安全，同步方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，加入了同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="comment">//即懒汉式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优缺点说明：</strong></p>
<ol>
<li>解决了线程不安全问题</li>
<li>效率太低了，每个线程在想获得类的实例的时候，执行getInstance()方法都要进行同步。而其实这个方法只执行一次实例化代码就够了，后面的想获得该类实例，直接return进行了。方法进行同步效率太低</li>
<li>结论;在实际开发中，不推荐使用这种方法。</li>
</ol>
<h3 id="4-3-7、懒汉式（线程安全，同步代码块）"><a href="#4-3-7、懒汉式（线程安全，同步代码块）" class="headerlink" title="4.3.7、懒汉式（线程安全，同步代码块）"></a>4.3.7、懒汉式（线程安全，同步代码块）</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton.type4;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest04</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"懒汉式3，线程安全，同步方法"</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance==instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance.hashCode="</span>+ instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"instance2.hashCode="</span>+ instance2.hashCode());</span><br><span class="line">        <span class="comment">//hashCode相同</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//懒汉式（线程安全，同步方法）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，在if判断时加入了同步处理的代码，解决线程安全问题</span></span><br><span class="line">    <span class="comment">//即懒汉式</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            </span><br><span class="line">           <span class="keyword">synchronized</span> (Singlethon<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">               singlethon = <span class="keyword">new</span> Singlethon();</span><br><span class="line">           &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优缺点说明：</strong></p>
<ol>
<li>这种方式，本意是想对第四种实现方式的改进，因为前面同步方法效率太低，改为同步产生实例化的代码块。</li>
<li>但是这种同步并不能起到线程同步的作用。跟第三种实现方式遇到的情形一致，假如一个线程进入了if（singlethon==null）判断语句块，还未来得及往下执行，另一个线程也通过了这个判断语句，这时便会产生多个实例。</li>
<li>结论：在实际开发中，不能使用这种方式。</li>
</ol>
<h3 id="4-3-8、双重检查"><a href="#4-3-8、双重检查" class="headerlink" title="4.3.8、双重检查"></a>4.3.8、双重检查</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton.type6;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest05</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"双重检查"</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance==instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance.hashCode="</span>+ instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"instance2.hashCode="</span>+ instance2.hashCode());</span><br><span class="line">        <span class="comment">//hashCode相同</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//双重检查</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，加入双重检查的代码，解决线程安全问题，解决懒加载问题。</span></span><br><span class="line">    <span class="comment">//同时保证了效率。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (Singleton<span class="class">.<span class="keyword">class</span>)</span>&#123;</span><br><span class="line">                <span class="keyword">if</span> (instance == <span class="keyword">null</span>)&#123;</span><br><span class="line">                    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优缺点说明：</strong></p>
<ol>
<li>Double-Check概念是多线程开发中常使用到的，如代码所示，我们进行了两次if（singleton == null）检查，这样就可以保证线程安全了。</li>
<li>这样，实例化代码代码只执行了一次，后面再次访问时，判断if（singleton == null），直接return实例化对象，也避免了重复进行方法同步。</li>
<li>线程安全，延迟加载，效率较高</li>
<li>结论：在实际开发中，推荐使用这种单例设计模式</li>
</ol>
<h3 id="4-3-9、静态内部类"><a href="#4-3-9、静态内部类" class="headerlink" title="4.3.9、静态内部类"></a>4.3.9、静态内部类</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton.type7;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest07</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"静态内部类完成单例模式"</span>);</span><br><span class="line">        Singleton instance = Singleton.getInstance();</span><br><span class="line">        Singleton instance2 = Singleton.getInstance();</span><br><span class="line"></span><br><span class="line">        System.out.println(instance==instance2);<span class="comment">//true</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"instance.hashCode="</span>+ instance.hashCode());</span><br><span class="line">        System.out.println(<span class="string">"instance2.hashCode="</span>+ instance2.hashCode());</span><br><span class="line">        <span class="comment">//hashCode相同</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态内部类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写一个静态内部类，该类中有一个静态属性 Singleton</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提供一个静态的公有方法，直接返回SingletonInstance.INSTANCE</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优缺点说明：</strong></p>
<ol>
<li>这种方式采用了类装载的机制来保证初始化实例时只有一个线程</li>
<li>静态内部类方式在Singleton类被装载时并不会立即实例化，而是在需要实例化的时候，调用getInstance方法，才会装载SingletonInstance类，从而完成Singleton的实例化</li>
<li>类的静态属性只会在第一次加载类的时候初始化，所以在这里，JVM帮我们保证了线程的安全性，在类进行初始化时，别的线程是无法进入的。</li>
<li>优点：避免了线程不安全，利用静态内部类的特点实现延迟加载，效率高</li>
<li>结论: 推荐使用</li>
</ol>
<h3 id="4-3-10、枚举"><a href="#4-3-10、枚举" class="headerlink" title="4.3.10、枚举"></a>4.3.10、枚举</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> singleton.type8;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.SQLOutput;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonTest08</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Singleton instance = Singleton.INSTANCE;</span><br><span class="line">        Singleton instance2 = Singleton.INSTANCE;</span><br><span class="line">        System.out.println(instance==instance2);</span><br><span class="line"></span><br><span class="line">        System.out.println(instance.hashCode());</span><br><span class="line">        System.out.println(instance2.hashCode());</span><br><span class="line"></span><br><span class="line">        instance.sayok();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用枚举，可以实现单例</span></span><br><span class="line"><span class="keyword">enum</span> Singleton&#123;</span><br><span class="line">    INSTANCE;<span class="comment">//属性</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayok</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"ok~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>优缺点说明：</strong></p>
<ol>
<li>借助JDK1.5中添加的枚举来实现单例模式。不仅能避免多线程同步问题，而且还能防止反序列化重新创建新的对象。</li>
<li>结论：推荐使用</li>
</ol>
<h3 id="4-3-11、单例模式在JDK应用中的源码分析"><a href="#4-3-11、单例模式在JDK应用中的源码分析" class="headerlink" title="4.3.11、单例模式在JDK应用中的源码分析"></a>4.3.11、单例模式在JDK应用中的源码分析</h3><p>在JDK中，java.lang.Runtime就是经典的单例模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Runtime</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Runtime currentRuntime = <span class="keyword">new</span> Runtime();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Version version;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Runtime <span class="title">getRuntime</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> currentRuntime;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">Runtime</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-3-12、单例模式的注意事项和细节说明"><a href="#4-3-12、单例模式的注意事项和细节说明" class="headerlink" title="4.3.12、单例模式的注意事项和细节说明"></a>4.3.12、单例模式的注意事项和细节说明</h3><ol>
<li>单例模式保证了系统内存中该类只存在一个对象，节省了系统资源，对于一些需要频繁创建销毁的对象，使用单例模式可以提高系统性能。</li>
<li>当想实例化一个单例类的时候，必须要记住使用相应的获取对象的方法，而不是使用new。</li>
<li>单例模式使用的场景：需要频繁创建和销毁的对象，创建对象时耗时过多或耗费资源过多（即：重量级对象），但又经常使用到的对象，工具类对象，频繁访问数据库或文件的对象（数据源，Session工厂等）</li>
</ol>
<h2 id="4-4、工厂设计模式"><a href="#4-4、工厂设计模式" class="headerlink" title="4.4、工厂设计模式"></a>4.4、工厂设计模式</h2><h3 id="4-4-1、简单工厂模式"><a href="#4-4-1、简单工厂模式" class="headerlink" title="4.4.1、简单工厂模式"></a>4.4.1、简单工厂模式</h3><p><strong>实例</strong></p>
<p>看一个披萨的项目：要便于披萨种类的扩展，要便于维护</p>
<ol>
<li>披萨的种类很多，比如（GreekPizz，CheesePizz等）</li>
<li>披萨的制作有 prepare,bake,cut,box</li>
<li>完成披萨店订购功能</li>
</ol>
<p><strong>传统方法</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210109181410834.png" alt="image-20210109181410834"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//传统方法</span></span><br><span class="line"><span class="comment">//将Pizza类做成抽象类</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name;</span><br><span class="line">    <span class="comment">//准备原材料，不同的披萨不一样，所以做成抽象方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bake</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name +<span class="string">"baking"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">cut</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name +<span class="string">"cutting"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">box</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(name +<span class="string">"boxing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给奶酪披萨准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GreekPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给希腊披萨准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String orderType;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = gettype();</span><br><span class="line">            <span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>))&#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">                pizza.setName(<span class="string">"希腊披萨"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">                pizza.setName(<span class="string">"奶酪菩萨"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出pizza制作过程</span></span><br><span class="line">            pizza.prepare();</span><br><span class="line">            pizza.bake();</span><br><span class="line">            pizza.cut();</span><br><span class="line">            pizza.box();</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">gettype</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">            String str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//相当于一个客户端，发出披萨的订购任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">new</span> OrderPizza();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>传统方法的优缺点：</strong></p>
<ol>
<li>优点是比较好理解，简单易操作</li>
<li>缺点是违反了设计模式的ocp原则，即对外扩展开放，对修改关闭。即当我们给类增加新功能的时候，尽量不修改代码，或者尽可能少修改代码。</li>
<li>比如我们这时要增加一个Pizza的种类（Pepper披萨），我们需要做如下修改。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//添加一个PepperPizza类，继承Pizza类，并重写prepare</span></span><br><span class="line"><span class="keyword">package</span> factory.simplefactory.pizzastore.pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给胡椒披萨准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//在OrderPizza中添加PepperPizza的判断逻辑</span></span><br><span class="line"><span class="keyword">package</span> factory.simplefactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.CheesePizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.GreekPizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.PepperPizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.PepperPizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String orderType;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = gettype();</span><br><span class="line">            <span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>))&#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">                pizza.setName(<span class="string">"希腊披萨"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">                pizza.setName(<span class="string">"奶酪菩萨"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">                pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">                pizza.setName(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//输出pizza制作过程</span></span><br><span class="line">            pizza.prepare();</span><br><span class="line">            pizza.bake();</span><br><span class="line">            pizza.cut();</span><br><span class="line">            pizza.box();</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">gettype</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">            String str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ol start="4">
<li>改进思路：把创建Pizza对象封装到一个类中，这样我们有新的Pizza种类时，只需要修改该类即可，其他有创建到Pizza对象的代码就不需要修改了。（简单工厂模式）</li>
</ol>
<p><strong>简单工厂模式基本介绍</strong></p>
<ol>
<li>简单工厂模式是属于创建者模式，是工厂模式的一种。简单工厂模式是由一个工厂对象决定创建出哪种品类的实例。简单工厂模式是工厂模式家族中最简单实用的模式。</li>
<li>简单工厂模式：定义了一个创建对象的类，由这个类来封装实例化对象的行为（代码）。</li>
<li>在软件开发中，当我们会用到大量的创建某种，某类或者某批对象时，就会使用到工厂模式。</li>
</ol>
<p><strong>简单工厂模式的设计方案</strong></p>
<p>定义一个可以实例化Pizza对象的类，封装创建对象的代码。</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210112172914146.png" alt="image-20210112172914146"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.simplefactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.CheesePizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.GreekPizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.PepperPizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="comment">//简单工厂类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SimpleFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//根据orderType，返回对应的Pizza对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">"使用简单工厂模式"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">            pizza.setName(<span class="string">"希腊披萨"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">            pizza.setName(<span class="string">"奶酪菩萨"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">            pizza.setName(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.simplefactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.CheesePizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.GreekPizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.PepperPizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.PepperPizza;</span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个简单工厂对象</span></span><br><span class="line">    SimpleFactory simpleFactory;</span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">(SimpleFactory simpleFactory)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        setFactory(simpleFactory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(SimpleFactory simpleFactory)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        String orderType = <span class="string">""</span>; <span class="comment">//用户输入的</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.simpleFactory = <span class="keyword">this</span>.simpleFactory;<span class="comment">//设置简单工厂对象</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = gettype();</span><br><span class="line">            pizza = <span class="keyword">this</span>.simpleFactory.createPizza(orderType);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出Pizza</span></span><br><span class="line">            <span class="keyword">if</span> (pizza!= <span class="keyword">null</span>)&#123;<span class="comment">//订购成功</span></span><br><span class="line"></span><br><span class="line">                pizza.prepare();</span><br><span class="line">                pizza.bake();</span><br><span class="line">                pizza.cut();</span><br><span class="line">                pizza.box();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"订购披萨失败"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">gettype</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">            String str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.simplefactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="comment">//相当于一个客户端，发出披萨的订购任务</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//new OrderPizza();</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用简单工厂模式</span></span><br><span class="line">        <span class="keyword">new</span> OrderPizza(<span class="keyword">new</span> SimpleFactory());</span><br><span class="line">        System.out.println(<span class="string">"退出程序"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>简单工厂模式也称静态工厂模式</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//将工厂类改为静态类 </span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Pizza <span class="title">createPizza2</span><span class="params">(String orderType)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        System.out.println(<span class="string">"使用简单工厂模式"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">"greek"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> GreekPizza();</span><br><span class="line">            pizza.setName(<span class="string">"希腊披萨"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> CheesePizza();</span><br><span class="line">            pizza.setName(<span class="string">"奶酪菩萨"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> PepperPizza();</span><br><span class="line">            pizza.setName(<span class="string">"胡椒披萨"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.simplefactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> factory.simplefactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza2</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">    String orderType = <span class="string">""</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizza2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = gettype();</span><br><span class="line">            pizza =SimpleFactory.createPizza2(orderType);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出Pizza</span></span><br><span class="line">            <span class="keyword">if</span> (pizza!= <span class="keyword">null</span>)&#123;<span class="comment">//订购成功</span></span><br><span class="line"></span><br><span class="line">                pizza.prepare();</span><br><span class="line">                pizza.bake();</span><br><span class="line">                pizza.cut();</span><br><span class="line">                pizza.box();</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                System.out.println(<span class="string">"订购披萨失败"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span> (<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">gettype</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">            String str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-2、工厂方法模式"><a href="#4-4-2、工厂方法模式" class="headerlink" title="4.4.2、工厂方法模式"></a>4.4.2、工厂方法模式</h3><p><strong>工厂方法模式介绍</strong></p>
<p>​    工厂方法模式设计方案：将披萨项目的实例化功能抽象成抽象方法，在不同的口味点餐子类中具体实现。</p>
<p>​    工厂方法模式：定义了一个创建对象的抽象方法，由子类决定要实例化的类。工厂方法模式将<strong>对象的实例化推迟到子类</strong></p>
<p><strong>新的需求案例</strong></p>
<p>披萨项目新的需求：客户在点披萨时，可以点不同口味的披萨，比如，北京的奶酪pizza，北京的胡椒pizza，或者伦敦的奶酪pizza，伦敦的胡椒pizza。</p>
<p><strong>思路一</strong></p>
<p>使用简单工厂模式类，比如BJPizzaSimpleFactory，LDPizzaSimpleFactory等等，从当前这个案例来说，也是可以的，但是考虑到项目的规模，以及软件的可维护性，可扩展性都不是特别好。</p>
<p><strong>思路二</strong></p>
<p>使用工厂方法模式</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210112222111362.png" alt="image-20210112222111362"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建四种披萨</span></span><br><span class="line"><span class="keyword">package</span> factory.factorymethod.pizzastore.pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"北京的奶酪pizza"</span>);</span><br><span class="line">        System.out.println(<span class="string">"北京的奶酪pizza 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory.factorymethod.pizzastore.pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJPepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"北京的胡椒pizza"</span>);</span><br><span class="line">        System.out.println(<span class="string">"北京的胡椒pizza 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory.factorymethod.pizzastore.pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"伦敦的奶酪pizza"</span>);</span><br><span class="line">        System.out.println(<span class="string">"伦敦的奶酪pizza 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory.factorymethod.pizzastore.pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDPepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"伦敦的胡椒pizza"</span>);</span><br><span class="line">        System.out.println(<span class="string">"伦敦的胡椒pizza 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.factorymethod.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> factory.factorymethod.pizzastore.pizza.Pizza;</span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个抽象方法，createPizza，各个工厂子类自己实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrderPizza</span><span class="params">()</span></span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        String orderType;</span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = gettype();</span><br><span class="line">            pizza = createPizza(orderType);<span class="comment">//抽象方法，有工厂子类完成</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            <span class="comment">//输出pizza制作过程</span></span><br><span class="line">            pizza.prepare();</span><br><span class="line">            pizza.bake();</span><br><span class="line">            pizza.cut();</span><br><span class="line">            pizza.box();</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">gettype</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">            String str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.factorymethod.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> factory.factorymethod.pizzastore.pizza.BJCheesePizza;</span><br><span class="line"><span class="keyword">import</span> factory.factorymethod.pizzastore.pizza.BJPepperPizza;</span><br><span class="line"><span class="keyword">import</span> factory.factorymethod.pizzastore.pizza.Pizza;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJOrderPizza</span> <span class="keyword">extends</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">        factory.factorymethod.pizzastore.pizza.Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> BJCheesePizza();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> BJPepperPizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.factorymethod.pizzastore.order;</span><br><span class="line"><span class="keyword">import</span> factory.factorymethod.pizzastore.pizza.*;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDOrderPizza</span> <span class="keyword">extends</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function">Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> LDCheesePizza();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> LDPepperPizza();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-3、抽象工厂模式"><a href="#4-4-3、抽象工厂模式" class="headerlink" title="4.4.3、抽象工厂模式"></a>4.4.3、抽象工厂模式</h3><p><strong>基本介绍</strong></p>
<ol>
<li>抽象工厂模式：定义了一个interface用于创建相关或有依赖关系的对象簇，而无需指明具体的类。</li>
<li>抽象工厂模式可以将简单工厂和工厂方法模式进行整合。</li>
<li>从设计层面看，抽象工厂模式就是对简单工厂模式的改进（或者称为进一步的抽象）。</li>
<li>将工厂抽象成两层，AbsFactory（抽象工厂）和具体实现的工厂子类。程序员可以根据创建对象类型使用对应的工厂子类。这样将单个的简单工厂变成了工厂簇，更利于代码的维护和发展。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210115193954740.png" alt="image-20210115193954740"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.absfactory.pizzastore.pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"北京的奶酪pizza"</span>);</span><br><span class="line">        System.out.println(<span class="string">"北京的奶酪pizza 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory.absfactory.pizzastore.pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJPepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"北京的胡椒pizza"</span>);</span><br><span class="line">        System.out.println(<span class="string">"北京的胡椒pizza 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory.absfactory.pizzastore.pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDCheesePizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"伦敦的奶酪pizza"</span>);</span><br><span class="line">        System.out.println(<span class="string">"伦敦的奶酪pizza 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory.absfactory.pizzastore.pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDPepperPizza</span> <span class="keyword">extends</span> <span class="title">Pizza</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">prepare</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setName(<span class="string">"伦敦的胡椒pizza"</span>);</span><br><span class="line">        System.out.println(<span class="string">"伦敦的胡椒pizza 准备原材料"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.absfactory.pizzastore.order;</span><br><span class="line"><span class="keyword">import</span> factory.absfactory.pizzastore.pizza.LDCheesePizza;</span><br><span class="line"><span class="keyword">import</span> factory.absfactory.pizzastore.pizza.LDPepperPizza;</span><br><span class="line"><span class="keyword">import</span> factory.absfactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="comment">//伦敦工厂子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LDFactory</span> <span class="keyword">implements</span> <span class="title">AbsFactory</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用的是抽象工厂模式"</span>);</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> LDCheesePizza();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> LDPepperPizza();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> factory.absfactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> factory.absfactory.pizzastore.pizza.BJCheesePizza;</span><br><span class="line"><span class="keyword">import</span> factory.absfactory.pizzastore.pizza.BJPepperPizza;</span><br><span class="line"><span class="keyword">import</span> factory.absfactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="comment">//北京工厂子类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BJFzctory</span> <span class="keyword">implements</span> <span class="title">AbsFactory</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"使用的是抽象工厂模式"</span>);</span><br><span class="line"></span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (orderType.equals(<span class="string">"cheese"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> BJCheesePizza();</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (orderType.equals(<span class="string">"pepper"</span>))&#123;</span><br><span class="line">            pizza = <span class="keyword">new</span> BJPepperPizza();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> pizza;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.absfactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> factory.absfactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStreamReader;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OrderPizza</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    AbsFactory factory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span>  <span class="title">OrderPizza</span><span class="params">(AbsFactory absFactory)</span></span>&#123;</span><br><span class="line">        setFactory(factory);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">setFactory</span><span class="params">(AbsFactory factory)</span> </span>&#123;</span><br><span class="line">        Pizza pizza = <span class="keyword">null</span>;</span><br><span class="line">        String orderType = <span class="string">""</span>;<span class="comment">//用户输入</span></span><br><span class="line">        <span class="keyword">this</span>.factory = factory;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">do</span> &#123;</span><br><span class="line">            orderType = getType();</span><br><span class="line">            <span class="comment">//factory 可能是北京的工厂子类，也有可能是伦敦的工厂子类</span></span><br><span class="line">            pizza = factory.createPizza(orderType);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (pizza != <span class="keyword">null</span>)&#123;</span><br><span class="line">                pizza.prepare();</span><br><span class="line">                pizza.bake();</span><br><span class="line">                pizza.cut();</span><br><span class="line">                pizza.box();</span><br><span class="line"></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"订购失败"</span>);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">while</span>(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//写一个方法，可以获取客户希望订购的披萨种类</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getType</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            BufferedReader strin = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(System.in));</span><br><span class="line">            System.out.println(<span class="string">"input pizza 种类:"</span>);</span><br><span class="line">            String str = strin.readLine();</span><br><span class="line">            <span class="keyword">return</span> str;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="string">""</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.absfactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> factory.absfactory.pizzastore.pizza.Pizza;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个抽象工厂模式的抽象层（接口）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">AbsFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//让下面的工厂子类来具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Pizza <span class="title">createPizza</span><span class="params">(String orderType)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory.absfactory.pizzastore.order;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PizzaStore</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">new</span> OrderPizza(<span class="keyword">new</span> BJFzctory());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-4、工厂模式在JDK中的源码分析"><a href="#4-4-4、工厂模式在JDK中的源码分析" class="headerlink" title="4.4.4、工厂模式在JDK中的源码分析"></a>4.4.4、工厂模式在JDK中的源码分析</h3><p>Calendar.getInstance()中使用了简单工厂模式</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> factory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Calendar;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">         Calendar cal= Calendar.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Calendar <span class="title">getInstance</span><span class="params">(TimeZone zone,</span></span></span><br><span class="line"><span class="function"><span class="params">                                       Locale aLocale)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createCalendar(zone, aLocale);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> TimeZone <span class="title">defaultTimeZone</span><span class="params">(Locale l)</span> </span>&#123;</span><br><span class="line">        TimeZone defaultTZ = TimeZone.getDefault();</span><br><span class="line">        String shortTZID = l.getUnicodeLocaleType(<span class="string">"tz"</span>);</span><br><span class="line">        <span class="keyword">return</span> shortTZID != <span class="keyword">null</span> ?</span><br><span class="line">            TimeZoneNameUtility.convertLDMLShortID(shortTZID)</span><br><span class="line">                .map(TimeZone::getTimeZone)</span><br><span class="line">                .orElse(defaultTZ) :</span><br><span class="line">            defaultTZ;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> Calendar <span class="title">createCalendar</span><span class="params">(TimeZone zone,</span></span></span><br><span class="line"><span class="function"><span class="params">                                           Locale aLocale)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        CalendarProvider provider =</span><br><span class="line">            LocaleProviderAdapter.getAdapter(CalendarProvider<span class="class">.<span class="keyword">class</span>, <span class="title">aLocale</span>)</span></span><br><span class="line"><span class="class">                                 .<span class="title">getCalendarProvider</span>()</span>;</span><br><span class="line">        <span class="keyword">if</span> (provider != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> provider.getInstance(zone, aLocale);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IllegalArgumentException iae) &#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Calendar cal = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (aLocale.hasExtensions()) &#123;</span><br><span class="line">            String caltype = aLocale.getUnicodeLocaleType(<span class="string">"ca"</span>);</span><br><span class="line">            <span class="keyword">if</span> (caltype != <span class="keyword">null</span>) &#123;</span><br><span class="line">                <span class="keyword">switch</span> (caltype) &#123;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"buddhist"</span>:</span><br><span class="line">                cal = <span class="keyword">new</span> BuddhistCalendar(zone, aLocale);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"japanese"</span>:</span><br><span class="line">                    cal = <span class="keyword">new</span> JapaneseImperialCalendar(zone, aLocale);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                <span class="keyword">case</span> <span class="string">"gregory"</span>:</span><br><span class="line">                    cal = <span class="keyword">new</span> GregorianCalendar(zone, aLocale);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (cal == <span class="keyword">null</span>) &#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">if</span> (aLocale.getLanguage() == <span class="string">"th"</span> &amp;&amp; aLocale.getCountry() == <span class="string">"TH"</span>) &#123;</span><br><span class="line">                cal = <span class="keyword">new</span> BuddhistCalendar(zone, aLocale);</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (aLocale.getVariant() == <span class="string">"JP"</span> &amp;&amp; aLocale.getLanguage() == <span class="string">"ja"</span></span><br><span class="line">                       &amp;&amp; aLocale.getCountry() == <span class="string">"JP"</span>) &#123;</span><br><span class="line">                cal = <span class="keyword">new</span> JapaneseImperialCalendar(zone, aLocale);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cal = <span class="keyword">new</span> GregorianCalendar(zone, aLocale);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> cal;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-4-5、工厂模式小结"><a href="#4-4-5、工厂模式小结" class="headerlink" title="4.4.5、工厂模式小结"></a>4.4.5、工厂模式小结</h3><ol>
<li><p>工厂模式的意义</p>
<p>将实例化对象的代码提取出来，方到一个类中统一管理和维护，达到和主项目的依赖关系的解耦。从而提高项目的扩展和维护性。</p>
</li>
<li><p>三种工厂模式</p>
</li>
<li><p>设计模式的依赖抽象原则。</p>
<ul>
<li>创建对象实例时，不要直接new类，而是把这个new类的动作放到一个工厂的方法中，并返回。</li>
<li>不要让类继承具体类，而是继承抽象类或者是实现interface（接口）</li>
<li>不要覆盖基类中已经实现的方法。</li>
</ul>
</li>
</ol>
<h2 id="4-5、原型模式"><a href="#4-5、原型模式" class="headerlink" title="4.5、原型模式"></a>4.5、原型模式</h2><p><strong>克隆羊问题</strong></p>
<p>现在有一只羊tom，姓名为：tom，年龄为：1，颜色为：白色，请编写程序创建和tom羊属性完全相同的10只羊。</p>
<p><strong>传统方法</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210115215617906.png" alt="image-20210115215617906"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Sheep&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", color='"</span> + color + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> prototype;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//传统方法解决</span></span><br><span class="line"></span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>,<span class="number">1</span>,<span class="string">"白色"</span>);</span><br><span class="line"></span><br><span class="line">        Sheep sheep1 = <span class="keyword">new</span> Sheep(sheep.getName(),sheep.getAge(),sheep.getColor());</span><br><span class="line">        Sheep sheep2 = <span class="keyword">new</span> Sheep(sheep.getName(),sheep.getAge(),sheep.getColor());</span><br><span class="line"></span><br><span class="line">        System.out.println(sheep);</span><br><span class="line">        System.out.println(sheep1);</span><br><span class="line">        System.out.println(sheep2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>传统方法的优缺点</strong></p>
<ol>
<li>优点是比较好理解，简单易操作</li>
<li>在创建新对象时，总是需要重新获取原始对象的属性，如果创建的对象比较复杂是，效率较低。</li>
<li>总是需要重新初始化对象，而不是动态地获得对象运行时的状态，不够灵活。</li>
<li>改进的思路分析。</li>
</ol>
<p><strong>思路：</strong></p>
<p>Java中Object类是所有类的根类，Object类提供了一个clone（）方法，该方法可以将一个Java对象复制一份，但是需要实现clone的java类必须要实现一个接口Cloneable，该接口表示该类能够复制且具有复制的能力—–&gt;原型模式</p>
<p><strong>原型模式-基本介绍</strong></p>
<ol>
<li>原型模式是指：用原型模式指定创建对象的种类，并且通过拷贝这些原型，创建新的对象。</li>
<li>原型模式是一中创建型设计模式，允许一个对象在创建另外一个可定制的对象，无需知道如何创建的细节</li>
<li>工作原理是：将一个原型对象传给哪个要发动创建的对象，这个要发动创建的对象通过请求原型对象拷贝他们自己来实施创建，即 对象.clone（）</li>
<li>形象的理解:孙大圣拔出猴毛，变出其他孙大圣。</li>
</ol>
<p><strong>原理结构图说明</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210116153258208.png" alt="image-20210116153258208"></p>
<ol>
<li>Prototype:原型类，声明一个克隆自己的接口</li>
<li>ConcretePrototype:具体的原型类，实现一个克隆自己的操作。</li>
<li>Client：让一个原型对象克隆自己，从而创建一个新的对象（属性一样）</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> prototype.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Sheep</span> <span class="keyword">implements</span> <span class="title">Cloneable</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String color;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Sheep</span><span class="params">(String name, <span class="keyword">int</span> age, String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColor</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColor</span><span class="params">(String color)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.color = color;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Sheep&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">", color='"</span> + color + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//克隆该实例，使用默认的clone方法来完成</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> Object <span class="title">clone</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Sheep sheep = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            sheep = (Sheep)<span class="keyword">super</span>.clone();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            System.out.println(e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> sheep;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> prototype.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"原型模式完成对象的复制"</span>);</span><br><span class="line">        Sheep sheep = <span class="keyword">new</span> Sheep(<span class="string">"tom"</span>,<span class="number">1</span>,<span class="string">"白色"</span>);</span><br><span class="line"></span><br><span class="line">        Sheep sheep1 = (Sheep)sheep.clone();</span><br><span class="line">        Sheep sheep2 = (Sheep)sheep.clone();</span><br><span class="line">        Sheep sheep3 = (Sheep)sheep.clone();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"sheep2 = "</span> + sheep2);</span><br><span class="line">        System.out.println(<span class="string">"sheep3 = "</span> + sheep3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-5-1、原型模式在Spring框架中源码分析"><a href="#4-5-1、原型模式在Spring框架中源码分析" class="headerlink" title="4.5.1、原型模式在Spring框架中源码分析"></a>4.5.1、原型模式在Spring框架中源码分析</h3><p><strong>Spring中原型bean的创建，就是原型模式的应用</strong></p>
<h3 id="4-5-2、浅拷贝和深拷贝"><a href="#4-5-2、浅拷贝和深拷贝" class="headerlink" title="4.5.2、浅拷贝和深拷贝"></a>4.5.2、浅拷贝和深拷贝</h3><p><strong>浅拷贝的介绍</strong></p>
<ol>
<li>对于数据类型是基本数据类型的成员变量，浅拷贝会直接进行值传递，也就是将该属性值复制一份给新的对象。</li>
<li>对于数据类型是引用数据类型的成员变量，比如说成员变量是某个数组，某个类的对象等，那么浅拷贝会进行引用传递，也就是只是将该成员变量的引用值（内存地址）复制一份给新的对象。因为实际上两个对象的该成员变量都指向同一个实例。在这种情况下，在一个对象中修改该成员变量会影响到另一个独享的该成员变量值。</li>
<li>前面我们的克隆羊就是浅拷贝</li>
<li>浅拷贝是使用默认的clone（）方法来实现</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sheep = (Sheep)<span class="keyword">super</span>.clone();</span><br></pre></td></tr></table></figure>

<p><strong>深拷贝的介绍</strong></p>
<ol>
<li>复制对象的所有基本数据类型的成员变量值</li>
<li>为所有引用数据类型的成员变量申请存储空间，并复制每个引用数据类型成员变量所引用的对象，直到该对象可达的所有对象。也就是说，对象进行深拷贝要对整个对象进行拷贝。</li>
<li>方法一深拷贝实现方式：重写clone方法来实现深拷贝</li>
<li>方法二深拷贝实现方式：通过对象序列化实现深拷贝</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式一</span></span><br><span class="line"><span class="comment">//先对基本数据类型进行处理，即对基本数据类型（属性）和String的克隆</span></span><br><span class="line">deep = supper.clone();</span><br><span class="line"><span class="comment">//对引用数据类型的属性，进行单独的处理。</span></span><br><span class="line"><span class="comment">//转类型.clone();</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方式二</span></span><br><span class="line"><span class="comment">//通过对象的序列化实现</span></span><br><span class="line"><span class="comment">//创建流对象</span></span><br><span class="line"><span class="comment">//序列化，将对象以流的方式输出</span></span><br><span class="line"><span class="comment">//反序列化，将对象读回来</span></span><br></pre></td></tr></table></figure>

<h3 id="4-5-3、原型模式的注意事项和细节"><a href="#4-5-3、原型模式的注意事项和细节" class="headerlink" title="4.5.3、原型模式的注意事项和细节"></a>4.5.3、原型模式的注意事项和细节</h3><ol>
<li>创建新的对象比较复杂时，可以利用原型模式简化对象的创建过程，同时也能够提高效率。</li>
<li>不用重新初始化对象，而是动态的获得对象运行时的状态。</li>
<li>如果原始对象发生变化（添加或者减少属性），其他克隆对象的也会发生相应的编号，无需修改代码。</li>
<li>在实现深克隆的时候可能会需要比较复杂的代码。</li>
<li><strong>缺点：</strong>需要为每一个类配备一个克隆方法，这对全新的类来说不是很难，但对已有的类进行改造时，需要修改其源代码，违背了ocp原则。</li>
</ol>
<h2 id="4-6、建造者模式"><a href="#4-6、建造者模式" class="headerlink" title="4.6、建造者模式"></a>4.6、建造者模式</h2><p><strong>盖房项目需求</strong></p>
<ol>
<li>需要建房子：这一过程为打桩，砌墙，封顶</li>
<li>房子各有各样的，比如普通房，高楼，别墅，各种房子的过程虽然一样，但是要求不要相同的</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210116160348988.png" alt="image-20210116160348988"></p>
<p><strong>传统方法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractHouse</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打地基</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">builderBasic</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//砌墙</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">builderWalls</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//封顶</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">build</span><span class="params">()</span></span>&#123;</span><br><span class="line">        builderBasic();</span><br><span class="line">        builderWalls();</span><br><span class="line">        roofed();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span> <span class="keyword">extends</span> <span class="title">AbstractHouse</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给普通房子打地基"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给普通房子砌墙"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给普通房子封顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> builder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        CommonHouse commonHouse = <span class="keyword">new</span> CommonHouse();</span><br><span class="line">        commonHouse.build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>传统方法解决盖房子需求问题分析</strong></p>
<ol>
<li>优点是比较好理解，简单易操作</li>
<li>设计的程序结构，过于简单，没有设计缓存层对象，对程序的扩展和维护不好，也就是说，这种设计方案，把产品（房子）和创建商品的过程（建房子过程）封装在一起，耦合性加强了。</li>
<li>解决方案：将产品和产品建造过程解耦—&gt;建造者模式</li>
</ol>
<h3 id="4-6-1、-建造者模式基本介绍"><a href="#4-6-1、-建造者模式基本介绍" class="headerlink" title="4.6.1、 建造者模式基本介绍"></a>4.6.1、 建造者模式基本介绍</h3><ol>
<li>建造者模式又叫生成器模式，是一种对象构建模式。它可以将复杂对象的建造过程抽象出来（抽象类别），使这个抽象过程的不同实现方法可以构造出不同表现（属性）的对象。</li>
<li>建造者模式是一步一步创建一个复杂的对象，它允许用户只通过指定复杂对象的类型和内容就可以构建他们，用户不需要知道内部的具体构建细节。</li>
</ol>
<p><strong>建造者模式的四个角色</strong></p>
<ol>
<li>Product（产品角色）：一个具体的产品对象。</li>
<li>Builder（抽象建造者）：创建一个Product对象的各个部件指定的接口/抽象类。</li>
<li>ConcreBuilder（具体建造者）：实现接口，构建和装配各个部件。</li>
<li>Director（指挥者）：构建一个使用Builder接口的对象。它主要适用于创建一个复杂的对象。它主要有两个作用，一是：隔离了客户与对象的生产过程。二是：负责控制产品对象的生产过程。</li>
</ol>
<h3 id="4-6-2、建造者模式应用实例"><a href="#4-6-2、建造者模式应用实例" class="headerlink" title="4.6.2、建造者模式应用实例"></a>4.6.2、建造者模式应用实例</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210116170912763.png" alt="image-20210116170912763"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> builder.improve;</span><br><span class="line"></span><br><span class="line"><span class="comment">//产品---&gt;Product</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">House</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String baise;</span><br><span class="line">    <span class="keyword">private</span> String wall;</span><br><span class="line">    <span class="keyword">private</span> String roofed;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getBaise</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> baise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getWall</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> wall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getRoofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> roofed;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setBaise</span><span class="params">(String baise)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.baise = baise;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWall</span><span class="params">(String wall)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.wall = wall;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setRoofed</span><span class="params">(String roofed)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.roofed = roofed;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> builder.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HighBuilding</span> <span class="keyword">extends</span> <span class="title">HouseBuilder</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"高楼的地基100米"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"高楼的砌墙20cm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"高楼的透明屋顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> builder.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CommonHouse</span>  <span class="keyword">extends</span> <span class="title">HouseBuilder</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderBasic</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"给普通房子打地基5米"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">builderWalls</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子砌墙10cm"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"普通房子屋顶"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> builder.improve;</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象的建造者</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseBuilder</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">protected</span> House house = <span class="keyword">new</span> House();</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//将建造流程写好，抽象的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">builderBasic</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">builderWalls</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">roofed</span><span class="params">()</span></span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//建造房子完成后，将产品（房子）返回</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">builderHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> house;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> builder.improve;</span><br><span class="line"><span class="comment">//指挥者，这里去动态的指定制作流程，返回产品</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HouseDirector</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    HouseBuilder houseBuilder = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器传入houseBuilder</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HouseDirector</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过setter传入houseBuilder</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHouseBuilder</span><span class="params">(HouseBuilder houseBuilder)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.houseBuilder = houseBuilder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如何处理建造房子的流程，交给指挥者</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> House <span class="title">constructHouse</span><span class="params">()</span></span>&#123;</span><br><span class="line">        houseBuilder.builderBasic();</span><br><span class="line">        houseBuilder.builderWalls();</span><br><span class="line">        houseBuilder.roofed();</span><br><span class="line">        <span class="keyword">return</span> houseBuilder.builderHouse();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> builder.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//盖普通的房子</span></span><br><span class="line">        CommonHouse commonHouse = <span class="keyword">new</span> CommonHouse();</span><br><span class="line">        <span class="comment">//准备创建房子的指挥者</span></span><br><span class="line">        HouseDirector houseDirector = <span class="keyword">new</span> HouseDirector(commonHouse);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//完成盖房子，返回产品（房子）</span></span><br><span class="line">        House house = houseDirector.constructHouse();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//System.out.println("输出流程");</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//盖高楼</span></span><br><span class="line">        HighBuilding highBuilding = <span class="keyword">new</span> HighBuilding();</span><br><span class="line">        <span class="comment">//重置建造者</span></span><br><span class="line">        houseDirector.setHouseBuilder(highBuilding);</span><br><span class="line">        <span class="comment">//完成盖房子，返回产品（高楼）</span></span><br><span class="line">        houseDirector.constructHouse();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-6-3、建造者模式在JDK的应用和源码分析"><a href="#4-6-3、建造者模式在JDK的应用和源码分析" class="headerlink" title="4.6.3、建造者模式在JDK的应用和源码分析"></a>4.6.3、建造者模式在JDK的应用和源码分析</h3><p><strong>java.lang.StringBuilder中的建造者模式</strong></p>
<p><strong>角色分析</strong></p>
<ul>
<li>Appendable接口中定义了多个append方法（抽象方法），即Appendable为抽象建造者，定义了抽象方法。</li>
<li>AbstractStringBuilder 实现了Appendable接口的方法，这里的AbstractStringBuilder已经是建造者，只是不能实例化。</li>
<li>StringBuilder 即充当了指挥者角色，同时又充当了具体的建造者，建造方法的实现是由AbstractStringBuilder完成。而StringBuilder继承了AbstractStringBuilder</li>
</ul>
<h3 id="4-6-4、建造者模式的注意事项和细节"><a href="#4-6-4、建造者模式的注意事项和细节" class="headerlink" title="4.6.4、建造者模式的注意事项和细节"></a>4.6.4、建造者模式的注意事项和细节</h3><ol>
<li><p>客户端（使用程序）不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，使得不同的创建过程可以创建不同的产品对象。</p>
</li>
<li><p>每一个具体创建者都相对独立，而与其他的具体建造者无关，因此可以很方便的替换具体建造者或者增加新的具体建造者，用户使用不同的具体建造者即可得到不同的产品对象。</p>
</li>
<li><p>可以更加精细的控制产品的创建过程。将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。</p>
</li>
<li><p>增加新的具体创造者无须修改原有类库的代码，指挥者类针对抽象建造者类编程，系统扩展方便，符合开闭原则。</p>
</li>
<li><p>建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，如果产品之间的差异性比较大，则不适合使用建造者模式，因此其使用范围收到一定的限制。</p>
</li>
<li><p>如果产品的内部变化复杂，可能会导致需要定义很多具体建造者类来实现这种变化，导致系统吧变得很庞大，因此在这种情况下，要考虑是否选择建造者模式。</p>
</li>
<li><p><strong>抽象工厂类和建造者模式</strong></p>
<p>抽象工厂类模式实现对产品家族的创建，一个产品家族是这样的一系列产品：具有不同分类维度的产品组合，采用抽象工厂模式不需要关心构建过程，只关心什么产品由什么工厂生产即可。而建造者模式则是要求按照指定的蓝图建造产品，它的主要目的是通过组装零配件而产生一个新产品。</p>
</li>
</ol>
<h2 id="4-7、适配器模式"><a href="#4-7、适配器模式" class="headerlink" title="4.7、适配器模式"></a>4.7、适配器模式</h2><h3 id="4-7-1、适配器基本介绍"><a href="#4-7-1、适配器基本介绍" class="headerlink" title="4.7.1、适配器基本介绍"></a>4.7.1、适配器基本介绍</h3><ol>
<li>适配器模式（Adapter  Pattern）将某个类的接口转换成客户端期望的另一个接口表示，主要的目的是兼容性，让原本因接口不能匹配不能工作的两个类可以协同工作，其别名叫包装器（Wrapper）</li>
<li>适配器模式属于结构型模式</li>
<li>主要分为三类：类适配器模式，对象适配器模式，接口适配器模式</li>
</ol>
<h3 id="4-7-2、适配器模式工作原理"><a href="#4-7-2、适配器模式工作原理" class="headerlink" title="4.7.2、适配器模式工作原理"></a>4.7.2、适配器模式工作原理</h3><ol>
<li>适配器模式：将一个类的接口转换成另一个接口，让原本接口不兼容的类可以兼容</li>
<li>从用户的角度看不到被适配者，是解耦的</li>
<li>用户调用适配器转换出来的目标接口方法，适配器再调用被适配者的相关接口方法。</li>
<li>用户收到反馈结果，感觉只是和目标接口交互，如图</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210119155046603.png" alt="image-20210119155046603"></p>
<h3 id="4-7-3、类适配器模式"><a href="#4-7-3、类适配器模式" class="headerlink" title="4.7.3、类适配器模式"></a>4.7.3、类适配器模式</h3><p><strong>类适配器模式介绍</strong></p>
<p>基本介绍：Adapter类，通过继承src类，实现dst类接口，完成src-&gt;dst的适配</p>
<p><strong>类适配器应用实例</strong></p>
<ol>
<li><p>应用实例说明</p>
<p>以生活中充电器的例子来讲解适配器，充电器本身相当于Adapter，220V交流电相当于src（即被适配者），我们的目的dst（即 目标）是5V直流电</p>
</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210119163516119.png" alt="image-20210119163516119"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.classadapter;</span><br><span class="line"><span class="comment">//被适配类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Voltage220V</span> </span>&#123;</span><br><span class="line">    <span class="comment">//输出220V电压</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output220V</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span> src = <span class="number">220</span>;</span><br><span class="line">        System.out.println(<span class="string">"电压="</span> + src + <span class="string">"伏"</span>);</span><br><span class="line">        <span class="keyword">return</span> src;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器类继承被适配的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">extends</span> <span class="title">Voltage220V</span> <span class="keyword">implements</span> <span class="title">IVoltage5V</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取到220V的电压</span></span><br><span class="line">        <span class="keyword">int</span> srcV = output220V();</span><br><span class="line">        <span class="keyword">int</span> dstV = srcV / <span class="number">44</span>;   <span class="comment">//转成5V</span></span><br><span class="line">        <span class="keyword">return</span> dstV;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//充电</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">charging</span><span class="params">(IVoltage5V iVoltage5V)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (iVoltage5V.output5V()==<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"电压5V，可以充电~~"</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (iVoltage5V.output5V()&gt;<span class="number">5</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"电压大于5V，不能充电"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.classadapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"======类适配器模式======="</span>);</span><br><span class="line"></span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        phone.charging(<span class="keyword">new</span> VoltageAdapter());</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>类适配器模式注意事项和细节</strong></p>
<ol>
<li>Java是单继承机制，所以类适配器需要继承src类这一点算是一个缺点，因为这要求dst必须是接口，有一定的局限性</li>
<li>src类的方法在Adapter中都会暴露出来，也增加了使用的成本。</li>
<li>由于其继承了src类，所以它可以根据需求重写src类的方法，使得Adapter的灵活性增强了。</li>
</ol>
<h3 id="4-7-4、对象适配器模式"><a href="#4-7-4、对象适配器模式" class="headerlink" title="4.7.4、对象适配器模式"></a>4.7.4、对象适配器模式</h3><p><strong>对象适配器模式介绍</strong></p>
<ol>
<li>基本思路和类的适配器模式相同，只是将Adapter类作修改，而不是继承src类，而是持有src类的实例，以解决兼容性的问题。即：持有src类，实现dst类接口，完成src–&gt;dst的适配。</li>
<li>根据“合成复用原则”，在系统中尽量使用关联来替代继承关系，因此大部分结构模型都是对象结构型模式。</li>
<li><strong>对象适配器模式是适配器模式常用的一种</strong></li>
</ol>
<p><strong>对象适配器模式应用实例</strong></p>
<ol>
<li>以生活中充电器的例子来讲解适配器，充电桩本身相当于Adapter，220V交流电相当于src（即被适配者），我们的目的dst（即目标）是5V直流电，使用<strong>对象适配器模式完成</strong></li>
<li>思路分析：只需要修改适配器即可，如下</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210119190653652.png" alt="image-20210119190653652"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="comment">//适配器类继承被适配的类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">VoltageAdapter</span> <span class="keyword">implements</span> <span class="title">IVoltage5V</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Voltage220V voltage220V;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过构造器，传入一个Voltage220V  实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">VoltageAdapter</span><span class="params">(Voltage220V voltage220V)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.voltage220V = voltage220V;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">output5V</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> dst = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">null</span> != voltage220V)&#123;</span><br><span class="line">            <span class="keyword">int</span> src = voltage220V.output220V();<span class="comment">//获取220V 电压</span></span><br><span class="line">            System.out.println(<span class="string">"使用对象适配器，进行适配~~"</span>);</span><br><span class="line"></span><br><span class="line">            dst = src / <span class="number">44</span>;</span><br><span class="line">            System.out.println(<span class="string">"适配完成，输出的电压="</span>+ dst);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> dst;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.objectadapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"======对象适配器模式======="</span>);</span><br><span class="line"></span><br><span class="line">        Phone phone = <span class="keyword">new</span> Phone();</span><br><span class="line">        phone.charging(<span class="keyword">new</span> VoltageAdapter(<span class="keyword">new</span> Voltage220V()));</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>对象适配器模式注意事项和细节</strong></p>
<ol>
<li><p>对象适配器和类适配器其实算是同一种思想，只不过是实现方式不同。</p>
<p>根据合成复用原则，使用组合来替代继承，所以它解决了类适配器必须继承src的局限性问题，也不再要求dst必须是接口。</p>
</li>
<li><p>使用成本更低，更灵活。</p>
</li>
</ol>
<h3 id="4-7-5、接口适配器模式"><a href="#4-7-5、接口适配器模式" class="headerlink" title="4.7.5、接口适配器模式"></a>4.7.5、接口适配器模式</h3><p><strong>接口适配器模式介绍</strong></p>
<ol>
<li>一些书籍称为：适配器模式或缺省适配器模式。</li>
<li>当不需要全部实现接口提供的方法时，可以先设计一个抽象类实现接口，并为该接口中每个方法提供一个默认实现（空方法），那么该抽象类的子类可有选择的覆盖父类的某些方法来实现需求。</li>
<li>适用于一个接口不想使用其所有方法的情况。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210120170102033.png" alt="image-20210120170102033"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.interfaceadapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Interface4</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.interfaceadapter;</span><br><span class="line"><span class="comment">//在Absadapter 我们将Interface4的方法进行默认实现</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Absadapter</span> <span class="keyword">implements</span> <span class="title">Interface4</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//默认实现</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m2</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m3</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m4</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> adapter.interfaceadapter;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Absadapter absadapter = <span class="keyword">new</span> Absadapter()&#123;</span><br><span class="line">           <span class="comment">//只需要去覆盖我们需要使用的接口方法</span></span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">m1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"使用了m1的方法"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        absadapter.m1();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-7-6、适配器模式在SpringMVC框架应用的源码分析"><a href="#4-7-6、适配器模式在SpringMVC框架应用的源码分析" class="headerlink" title="4.7.6、适配器模式在SpringMVC框架应用的源码分析"></a>4.7.6、适配器模式在SpringMVC框架应用的源码分析</h3><ol>
<li>SpringMVC中的HandlerAdapter，就是用了适配器模式</li>
<li>SpringMVC处理请求的流程回顾</li>
<li>使用HanderAdapter的原因分析</li>
</ol>
<p>可以看到处理器的类型不同，有多种实现方式，那么调用方式就不是确定的，如果需要就直接调用Controller方法，需要调用的时候就得不断使用if  else来进行判断是哪一种子类然后执行。那么如果后面要扩展Controller，就得修改原来的代码，这样违背了OCP原则。</p>
<ol start="4">
<li>动手写SpringMVC通过适配器设计模式获取到对应的Controller的源码。</li>
</ol>
<p><strong>说明</strong></p>
<ul>
<li>Spring定义了一个适配接口，使得每一种Controller有一种对应的适配器实现类。</li>
<li>适配器代替了controller执行相应的方法。</li>
<li>扩展Controller时，只需要增加一个适配器类就完成了SpringMVC的扩展了。</li>
</ul>
<h3 id="4-7-7、适配器模式的注意事项和细节"><a href="#4-7-7、适配器模式的注意事项和细节" class="headerlink" title="4.7.7、适配器模式的注意事项和细节"></a>4.7.7、适配器模式的注意事项和细节</h3><ol>
<li><p>三种命名方式，是根据src是以怎样的形式给到Adapter（在Adapter里的形式）来命名的。</p>
</li>
<li><p>类适配器：以类给到，在Adapter里，就是将src当做类，继承。</p>
<p>对象适配器：以对象给到，在Adapter里，将src作为一个对象，持有。</p>
<p>接口适配器：以接口给到，在Adapter里，将src作为一个接口，实现。</p>
</li>
<li><p>Adapter模式最大的作用还是将原本不兼容的接口融合到一起工作。</p>
</li>
<li><p>实际开发中，实现起来不拘泥于我们讲解的三种经典方式。</p>
</li>
</ol>
<h2 id="4-8、桥接模式"><a href="#4-8、桥接模式" class="headerlink" title="4.8、桥接模式"></a>4.8、桥接模式</h2><p><strong>手机操作问题</strong></p>
<p>现在对不同手机类型的不同手机品牌实现操作编程（比如：开机，关机，上网，打电话等）</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210120181500740.png" alt="image-20210120181500740"></p>
<p><strong>传统方案解决手机操作问题分析</strong></p>
<ol>
<li>扩展性问题（类爆炸），如果我们再增加手机的样式（旋转式），就需要增加各个品牌手机的类，同样如果我们增加一个手机品牌，也要在各个手机样式类下增加。</li>
<li>违反单一职责原则，当我们增加手机样式时，要同时增加所有品牌的手机，这样增加了代码维护版本。</li>
<li>解决方案–使用桥接模式。</li>
</ol>
<h3 id="4-8-1、桥接模式的基本介绍"><a href="#4-8-1、桥接模式的基本介绍" class="headerlink" title="4.8.1、桥接模式的基本介绍"></a>4.8.1、桥接模式的基本介绍</h3><ol>
<li>桥接模式（Bridge模式）是指：将实现与抽象放在两个不同的类的层次中，使两个层次可以独立改变。</li>
<li>是一种结构型设计模式。</li>
<li>Bridge模式基于类的最小设计原则，通过使用封装，聚合及继承等行为让不同的类承担不同的职责。它的主要特点是把抽象（Abstraction）与行为实现（implementation）分离开来，从而可以保持各部分的独立性以及对他们的功能扩展。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210120191608744.png" alt="image-20210120191608744"></p>
<h3 id="4-8-2、桥接模式实现案例"><a href="#4-8-2、桥接模式实现案例" class="headerlink" title="4.8.2、桥接模式实现案例"></a>4.8.2、桥接模式实现案例</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Brand</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">XiaoMi</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机开机了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机关机了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"小米手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Vivo</span> <span class="keyword">implements</span> <span class="title">Brand</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Vivo手机开机了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Vivo手机关机了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Vivo手机打电话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Phone</span> </span>&#123;</span><br><span class="line">    <span class="comment">//组合品牌</span></span><br><span class="line">    <span class="keyword">private</span> Brand brand;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Phone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand = brand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span>  <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.open();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.close();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.brand.call();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge;</span><br><span class="line"><span class="comment">//折叠式手机类，继承抽象类Phone</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FoldedPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FoldedPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">"折叠样式手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">"折叠样式手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">"折叠样式手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//获取折叠式手机（样式 + 品牌）</span></span><br><span class="line"></span><br><span class="line">        Phone phone1 = <span class="keyword">new</span> FoldedPhone(<span class="keyword">new</span> XiaoMi());</span><br><span class="line"></span><br><span class="line">        phone1.call();</span><br><span class="line">        phone1.open();</span><br><span class="line">        phone1.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"================================"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Phone phone2 = <span class="keyword">new</span> FoldedPhone(<span class="keyword">new</span> Vivo());</span><br><span class="line"></span><br><span class="line">        phone2.call();</span><br><span class="line">        phone2.open();</span><br><span class="line">        phone2.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>功能扩展，需要添加一个新的样式时</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> bridge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UpRightPhone</span> <span class="keyword">extends</span> <span class="title">Phone</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UpRightPhone</span><span class="params">(Brand brand)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(brand);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.open();</span><br><span class="line">        System.out.println(<span class="string">"直立样式手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.close();</span><br><span class="line">        System.out.println(<span class="string">"直立样式手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">call</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.call();</span><br><span class="line">        System.out.println(<span class="string">"直立样式手机"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-8-3、桥接模式在JDBC的源码剖析"><a href="#4-8-3、桥接模式在JDBC的源码剖析" class="headerlink" title="4.8.3、桥接模式在JDBC的源码剖析"></a>4.8.3、桥接模式在JDBC的源码剖析</h3><ol>
<li>jdbc的Driver接口，如果从桥接模式来看，Driver就是一个接口，下面可以有MySQL的Driver，Oracle的Driver，这些就可以当做实现类接口。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210121150137151.png" alt="image-20210121150137151"></p>
<h3 id="4-8-4、桥接模式的注意事项和细节"><a href="#4-8-4、桥接模式的注意事项和细节" class="headerlink" title="4.8.4、桥接模式的注意事项和细节"></a>4.8.4、桥接模式的注意事项和细节</h3><ol>
<li>实现了抽象和实现部分的分离，从而极大的提供了系统的灵活性，让抽象部分和实体部分独立开来，这有助于系统进行分层设计，从而产生更好的结构化系统。</li>
<li>对于系统的高层部分，只需要知道抽象部分和实现部分的接口就可以了，其他的部分由具体业务来完成。</li>
<li>桥接模式替代多层继承方案，可以减少子类的个数，降低系统的管理和维护成本。</li>
<li>桥接模式的引入增加了系统的理解和设计难度，由于聚合关联关系建立在抽象层，要求开发者对抽象进行设计和编程。</li>
<li>桥接模式要求正确识别出系统中两个独立变化的而维度，因此其使用范围有一定的的局限性，即需要有这样的应用场景。</li>
</ol>
<p><strong>桥接模式其他应用场景</strong></p>
<ol>
<li>对于那些不希望使用继承或因为多层次集成导致系统类的个数急剧增加的系统，桥接模式尤为适用。</li>
<li>常见的应用场景<ul>
<li>JDBC驱动程序</li>
<li>银行转账系统<ul>
<li>转账分类：网上转账，柜台转账，ATM转账</li>
<li>转账用户类型：普通用户，银卡用户，金卡用户</li>
</ul>
</li>
<li>消息管理<ul>
<li>消息类型：即时消息，延时消息</li>
<li>消息分类：手机短信，邮件信息，QQ消息</li>
</ul>
</li>
</ul>
</li>
</ol>
<h2 id="4-9、装饰者模式"><a href="#4-9、装饰者模式" class="headerlink" title="4.9、装饰者模式"></a>4.9、装饰者模式</h2><p><strong>项目需求：星巴克咖啡订单项目（咖啡馆）</strong></p>
<ol>
<li>咖啡种类/单品咖啡：Espresso（意大利浓咖啡），ShortBlack，LongBlack（美式咖啡），Decaf（无因咖啡）</li>
<li>调料：Milk，Soy（豆浆），Chocolate</li>
<li>要求在扩展新的咖啡种类时，具有良好的扩展性，改动方便，维护方便</li>
<li>使用OO的来计算不同种类咖啡的费用：客户可以点单品咖啡，也可以点单品咖啡+调料组合。</li>
</ol>
<p><strong>方案一：较差的方案</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210121155242620.png" alt="image-20210121155242620"></p>
<p><strong>方案一：解决星巴克咖啡订单问题分析</strong></p>
<ol>
<li>Drink是一个抽象类，表示饮料。</li>
<li>des是对咖啡的描述，比如咖啡的名字。</li>
<li>cost（）方法就是计算费用，Drink类中做成一个抽象方法。</li>
<li>Decaf就是单品咖啡，继承Drink，实现cost。</li>
<li>Espress&amp;&amp;Milk   就是单品咖啡+调料，这种和组合很多。</li>
<li>问题：这样设计，会有很多的类，当我们增加一个单品咖啡，或者一个新的调料，类的数量会剧增，造成类爆炸。</li>
</ol>
<p><strong>方案二：较好的方案</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210122130929692.png" alt="image-20210122130929692"></p>
<p><strong>方案二问题分析</strong></p>
<ol>
<li>方案2可以控制类的数量，不至于造成类爆炸问题。</li>
<li>在增加或者删除调料种类时，代码的维护量还是很大。</li>
<li>考虑到用户可以添加多份调料时，可以将hasMilk返回一个对应的int</li>
<li>考虑可以使用装饰者模式</li>
</ol>
<h3 id="4-9-1、装饰者模式的定义"><a href="#4-9-1、装饰者模式的定义" class="headerlink" title="4.9.1、装饰者模式的定义"></a>4.9.1、装饰者模式的定义</h3><ol>
<li>装饰者模式：动态的将新功能附加到对象上。在对象功能扩展方面，它比继承更有弹性，装饰者模式也体现了开闭原则（ocp）</li>
<li>这里提到的动态地将新功能附加到对象和ocp原则，在后面的应用实例上会以代码的形式体现，请同学们注意体会。</li>
</ol>
<h3 id="4-9-2、装饰者模式原理"><a href="#4-9-2、装饰者模式原理" class="headerlink" title="4.9.2、装饰者模式原理"></a>4.9.2、装饰者模式原理</h3><ol>
<li>装饰者模式就像打包一个快递。</li>
</ol>
<ul>
<li>主体：比如，陶瓷，衣服（Component）</li>
<li>包装：比如，报纸填充，塑料泡沫，纸板，木板（Decorator）</li>
</ul>
<ol start="2">
<li><p>Component</p>
<p>主体：比如类似前面的Drink</p>
</li>
<li><p>ConcreteComponent和DecoratorConcreteComponent：具体的主体，比如前面的各个单品咖啡。</p>
<p>Decorator：装饰者，比如各种调料。</p>
</li>
<li><p>在如图Component与ConcreteComponent之间，如果ConcreteComponent类很多，还可以设计一个缓冲层，将共有的部分提取出来，抽象层是一个类。</p>
</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210122133858614.png" alt="image-20210122133858614"></p>
<p><strong>用装饰者模式设计的方案</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210122134420759.png" alt="image-20210122134420759"></p>
<p><strong>装饰者模式下的订单：两份巧克力 + 一份牛奶的LongBlack</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210122134714083.png" alt="image-20210122134714083"></p>
<p><strong>说明：</strong></p>
<ol>
<li>Milk包含了LongBlack</li>
<li>一份Chocolate包含了（Milk + LongBlack）</li>
<li>一份Chocolate包含了（Chocolate + Milk + LongBlack）</li>
<li>这样不管是什么形式的单品咖啡 + 调料组合，通过递归方式可以方便的组合和维护。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Drink</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String des;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">float</span> price = <span class="number">0.0f</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">getPrice</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrice</span><span class="params">(<span class="keyword">float</span> price)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.price = price;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算费用的抽象方法</span></span><br><span class="line">    <span class="comment">//子类来实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Coffee</span> <span class="keyword">extends</span> <span class="title">Drink</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LongBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LongBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">"LongBlack"</span>);</span><br><span class="line">        setPrice(<span class="number">5.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Espresso</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Espresso</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">"意大利咖啡"</span>);</span><br><span class="line">        setPrice(<span class="number">6.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ShortBlack</span> <span class="keyword">extends</span> <span class="title">Coffee</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ShortBlack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        setDes(<span class="string">"ShortBlack"</span>);</span><br><span class="line">        setPrice(<span class="number">4.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Decorator</span> <span class="keyword">extends</span> <span class="title">Drink</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> Drink obj;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Decorator</span><span class="params">(Drink obj)</span> </span>&#123;<span class="comment">//组合</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">this</span>.obj = obj;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//obj.getDes() 输出被装饰者的信息</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.des + <span class="string">""</span> + <span class="keyword">super</span>.getPrice() + <span class="string">"&amp;&amp;"</span> + obj.getDes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">float</span> <span class="title">cost</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//getPrice 自己价格</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getPrice() + obj.cost();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Milk</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Milk</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">"牛奶"</span>);</span><br><span class="line">        setPrice(<span class="number">2.0f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Soy</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Soy</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">"豆浆"</span>);</span><br><span class="line">        setPrice(<span class="number">1.5f</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Chorolate</span> <span class="keyword">extends</span> <span class="title">Decorator</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Chorolate</span><span class="params">(Drink obj)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(obj);</span><br><span class="line">        setDes(<span class="string">"巧克力"</span>);</span><br><span class="line">        setPrice(<span class="number">3.0f</span>);<span class="comment">//调味品的价格</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> decorator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CoffeeBar</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//装饰者模式下的订单：2份巧克力 + 1份牛奶的LongBlack</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1. 点1份LongBlack</span></span><br><span class="line">        Drink order = <span class="keyword">new</span> LongBlack();</span><br><span class="line">        System.out.println(<span class="string">"费用1="</span> + order.cost());</span><br><span class="line">        System.out.println(<span class="string">"描述："</span> + order.getDes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.order加1份牛奶</span></span><br><span class="line">        order = <span class="keyword">new</span> Milk(order);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"order 加入1份牛奶费用= "</span> + order.cost());</span><br><span class="line">        System.out.println(<span class="string">"order 加入1份牛奶描述: "</span> + order.getDes());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//order 加入1份巧克力</span></span><br><span class="line">        order = <span class="keyword">new</span> Chorolate(order);</span><br><span class="line">        System.out.println(<span class="string">"order 加入1份牛奶 加入1份巧克力 费用 = "</span> + order.cost());</span><br><span class="line">        System.out.println(<span class="string">"order 加入1份牛奶 加入1份巧克力 描述 "</span> + order.getDes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//再加1份巧克力</span></span><br><span class="line">        order = <span class="keyword">new</span> Chorolate(order);</span><br><span class="line">        System.out.println(<span class="string">"order 加入1份牛奶 加入2份巧克力 费用 = "</span> + order.cost());</span><br><span class="line">        System.out.println(<span class="string">"order 加入1份牛奶 加入2份巧克力 描述 "</span> + order.getDes());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-9-3、装饰者模式在JDK应用中的源码分析"><a href="#4-9-3、装饰者模式在JDK应用中的源码分析" class="headerlink" title="4.9.3、装饰者模式在JDK应用中的源码分析"></a>4.9.3、装饰者模式在JDK应用中的源码分析</h3><ol>
<li>Java的IO结构，FilterInputStream就是一个装饰者</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210122161917360.png" alt="image-20210122161917360"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210122162839804.png" alt="image-20210122162839804"></p>
<h2 id="4-10、组合模式"><a href="#4-10、组合模式" class="headerlink" title="4.10、组合模式"></a>4.10、组合模式</h2><p><strong>学校院系展示需求</strong></p>
<p>编写程序展示一个学校院系结构：需求是这样，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。如图</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210122163320051.png" alt="image-20210122163320051"></p>
<p> 传统方案直接继承</p>
<p><strong>传统方案解决学校院系展示存在的问题分析</strong></p>
<ol>
<li>将学院看作是学校的子类，系使学员的子类，这样实际上是站在组织大小来进行分层次的</li>
<li>实际上我们的要求是：在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系，因此这种方案，不能很好地实现管理的操作，比如对学院，系的添加，删除，遍历等。</li>
<li>解决方案：把学校，院，系都看做是组织结构，他们之间没有继承的关系，而是一个树形结构，可以更好的实现管理操作–&gt;组合模式</li>
</ol>
<h3 id="4-10-1、组合模式的基本介绍"><a href="#4-10-1、组合模式的基本介绍" class="headerlink" title="4.10.1、组合模式的基本介绍"></a>4.10.1、组合模式的基本介绍</h3><p><strong>基本介绍</strong></p>
<ol>
<li>组合模式（Composite  Pattern），又叫部分整体模式，它创建了对象组的树形结构，将对象组合成树状结构以表示”整体–部分”的层次关系</li>
<li>组合模式依据树形结构来组合对象，用来表示部分及整体层次。</li>
<li>这种类型的设计模是属于结构型模式</li>
<li>组合模式使用的用户对单个对象和组合对象的访问具有一致性，即：组合能让客户一致的方式处理个别对象以及组合对象。</li>
</ol>
<p><strong>组合模式解决的问题</strong></p>
<ol>
<li>组合模式解决这样的问题，当我们的要处理的对象可以生成一颗树形结构，而我们要对树上的节点和叶子进行操作时，它能够提供一致的方式，而不用考虑它是节点还是叶子。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123095431829.png" alt="image-20210123095431829"></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123110116950.png" alt="image-20210123110116950"></p>
<h3 id="4-10-2、组合模式解决学校院系展示问题"><a href="#4-10-2、组合模式解决学校院系展示问题" class="headerlink" title="4.10.2、组合模式解决学校院系展示问题"></a>4.10.2、组合模式解决学校院系展示问题</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210122232754887.png" alt="image-20210122232754887"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">OrganizationComponent</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> String des;<span class="comment">//说明</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span></span>&#123;</span><br><span class="line">        <span class="comment">//默认实现</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span></span>&#123;</span><br><span class="line">        <span class="comment">//默认实现</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> UnsupportedOperationException();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OrganizationComponent</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDes</span><span class="params">(String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.des = des;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//方法print，做成抽象的,子类都需要实现</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">//University 就是Composite，可以管理College</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">University</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    List&lt;OrganizationComponent&gt; organizationComponents = <span class="keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">University</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, des);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写add</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">        organizationComponents.add(organizationComponent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写remove</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">        organizationComponents.remove(organizationComponent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写getName</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//print方法，就是输出University包含的学院</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---------"</span> + getName()+<span class="string">"---------"</span>);</span><br><span class="line">        <span class="comment">//遍历organizationComponents</span></span><br><span class="line">        <span class="keyword">for</span> (OrganizationComponent organizationComponent:organizationComponents</span><br><span class="line">             ) &#123;organizationComponent.print();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">College</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span></span>&#123;</span><br><span class="line">    <span class="comment">//List中存放的是Department</span></span><br><span class="line">    List&lt;OrganizationComponent&gt; organizationComponents = <span class="keyword">new</span> ArrayList&lt;OrganizationComponent&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">College</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, des);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写add</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//将来的实际业务中，Colleage的add方法和University的add不一定相同</span></span><br><span class="line">        organizationComponents.add(organizationComponent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写remove</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">(OrganizationComponent organizationComponent)</span> </span>&#123;</span><br><span class="line">        organizationComponents.remove(organizationComponent);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写getName</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//print方法，就是输出University包含的学院</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"---------"</span> + getName()+<span class="string">"---------"</span>);</span><br><span class="line">        <span class="comment">//遍历organizationComponents</span></span><br><span class="line">        <span class="keyword">for</span> (OrganizationComponent organizationComponent:organizationComponents</span><br><span class="line">        ) &#123;organizationComponent.print();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> <span class="keyword">extends</span> <span class="title">OrganizationComponent</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String des)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(name, des);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//add和remove就不用重写了</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getName();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDes</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">super</span>.getDes();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> composite;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从大到小创建对象</span></span><br><span class="line">         OrganizationComponent university= <span class="keyword">new</span> University(<span class="string">"清华大学"</span>,<span class="string">"中国顶级大学"</span>);</span><br><span class="line"></span><br><span class="line">         <span class="comment">//创建学院</span></span><br><span class="line">        OrganizationComponent computerCollege = <span class="keyword">new</span> College(<span class="string">"计算机学院"</span>,<span class="string">"计算机学院"</span>);</span><br><span class="line">        OrganizationComponent infoEngineerCollege = <span class="keyword">new</span> College(<span class="string">"信息工程学院"</span>,<span class="string">"信息工程学院"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建各个学院下的系（专业）</span></span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> Department(<span class="string">"软件工程"</span>,<span class="string">"软件工程不错"</span>));</span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> Department(<span class="string">"网络工程"</span>,<span class="string">"网络工程不错"</span>));</span><br><span class="line">        computerCollege.add(<span class="keyword">new</span> Department(<span class="string">"计算机科学与技术"</span>,<span class="string">"计算机科学与技术不错"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//</span></span><br><span class="line">        infoEngineerCollege.add(<span class="keyword">new</span> Department(<span class="string">"通信工程"</span>,<span class="string">"通信工程不好学"</span>));</span><br><span class="line">        infoEngineerCollege.add(<span class="keyword">new</span> Department(<span class="string">"信息工程"</span>,<span class="string">"信息工程好学"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将学院加入到学校</span></span><br><span class="line">        university.add(computerCollege);</span><br><span class="line">        university.add(infoEngineerCollege);</span><br><span class="line"></span><br><span class="line">        university.print();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-10-3、组合模式在JDK集合的源码分析"><a href="#4-10-3、组合模式在JDK集合的源码分析" class="headerlink" title="4.10.3、组合模式在JDK集合的源码分析"></a>4.10.3、组合模式在JDK集合的源码分析</h3><ol>
<li>Java的集合类 HashMap就使用了组合模式</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123102850710.png" alt="image-20210123102850710"></p>
<ul>
<li>Map就是一个抽象的构建（类似我们的Component）</li>
<li>HashMap是一个中间的构建（Composite），实现了相关的方法（put，putall）</li>
<li>Node是HashMap的静态内部类，类似Leaf叶子节点，没有put，putall方法。</li>
</ul>
<h3 id="4-10-4、组合模式的注意事项和字节"><a href="#4-10-4、组合模式的注意事项和字节" class="headerlink" title="4.10.4、组合模式的注意事项和字节"></a>4.10.4、组合模式的注意事项和字节</h3><ol>
<li>简化客户端操作。客户端只需要面对一致的对象而不用考虑整体部分或者节点叶子的问题。</li>
<li>具有较强的扩展性。当我们要更改组合对象时，我们只需要调整内部的层次关系，客户端不用做出任何改动</li>
<li>方便创建出复杂的层次结构，客户端不用理会组合里面的组成细节，容易添加节点或者叶子从而创建出复杂的树形结构。</li>
<li>需要遍历组织结构，或者处理的对象具有树形结构时，非常适合使用组合模式。</li>
<li>要求较高的抽象性，<strong>如果叶子节点和叶子有很多差异时，比如很多方法和属性都不一样</strong>，不适合使用组合模式。</li>
</ol>
<h2 id="4-11、外观模式"><a href="#4-11、外观模式" class="headerlink" title="4.11、外观模式"></a>4.11、外观模式</h2><p><strong>影院管理项目</strong></p>
<p>组建一个家庭影院：</p>
<p>DVD播放器，投影仪，自动屏幕，环绕立体声，爆米花机，要求完成使用家庭影院的功能，其过程为：</p>
<ul>
<li>直接用遥控器：统筹各类开关</li>
<li>开爆米花机</li>
<li>放下屏幕</li>
<li>开投影仪</li>
<li>开音响</li>
<li>开DVD，选dvd</li>
<li>去拿爆米花</li>
<li>调暗灯光</li>
<li>播放</li>
<li>观影结束后，关闭各种设备</li>
</ul>
<p><strong>传统方式解决影院管理</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123111041464.png" alt="image-20210123111041464"><strong>传统方式解决影院管理问题分析</strong></p>
<ol>
<li>在ClientTest的main方法中，创建各个子系统的对象，并直接去调用子系统（对象）相关方法，会造成调用过程混乱，没有清晰的过程。</li>
<li>不利于在ClientTest中，去维护对子系统的操作。</li>
<li>解决思路：定义一个高层接口，给子系统中的一组接口提供一个一致的界面（比如在高层接口提供四个方法ready，play，pause，end），用来访问子系统中的一群接口。</li>
<li>也就是说就是通过定义一个一致的接口（界面类），用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关心这个子系统的内部细节–&gt;外观模式</li>
</ol>
<h3 id="4-11-1、外观模式基本介绍"><a href="#4-11-1、外观模式基本介绍" class="headerlink" title="4.11.1、外观模式基本介绍"></a>4.11.1、外观模式基本介绍</h3><ol>
<li>外观模式（Facade），也叫“过程模式”：外观模式为子系统中的一组接口提供一个一致的界面，此模式定义了一个高层接口，这个接口使得一子系统更加容易使用。</li>
<li>外观模式通过定义一个一致的接口，用以屏蔽内部子系统的细节，使得调用端只需跟这个接口发生调用，而无需关系这个子系统的内部细节。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123112859703.png" alt="image-20210123112859703"></p>
<p><strong>原理类图说明</strong></p>
<ol>
<li>外观类（Facade）：为调用端提供统一的调用接口，外观类知道哪些子系统负责处理请求，从而将调用端的请求代理给适当子系统对象。</li>
<li>调用者（Client）：外观接口的调用者</li>
<li>子系统的集合：指模块或者子系统，处理Facade对象指派的任务，他是功能的提供者</li>
</ol>
<h3 id="4-11-2、外观模式解决影院管理"><a href="#4-11-2、外观模式解决影院管理" class="headerlink" title="4.11.2、外观模式解决影院管理"></a>4.11.2、外观模式解决影院管理</h3><ol>
<li>外观模式可以理解为转换一群接口，客户只要调用一个接口，而不用调用多个接口，而不用调用多个接口才可以达到目的。比如：在PC端安装软件的时候经常有一键安装选项（省去选择安装目录，安装的组件等等）还有就是手机的重启功能（把开机和关机合为一个操作）</li>
<li>外观模式就是解决多个复杂接口带来的使用困难，起到简化用户操作的作用。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DVDPlayer</span> </span>&#123;</span><br><span class="line">    <span class="comment">//使用单例模式（饿汉式）</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> DVDPlayer instance = <span class="keyword">new</span> DVDPlayer();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> DVDPlayer <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dvd on"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dvd off"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dvd is playing"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"dvd is pause"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Popcorn</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Popcorn instance = <span class="keyword">new</span> Popcorn();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Popcorn <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"popcorn on"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"popcorn off"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pop</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"popcorn is poping"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Projector</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Projector instance = <span class="keyword">new</span> Projector();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Projector <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"projector on"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"projector off"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">focus</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"projector is focus"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Screen</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Screen instance = <span class="keyword">new</span> Screen();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Screen <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"screen up"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">down</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"screen down"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stereo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Stereo instance = <span class="keyword">new</span> Stereo();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Stereo <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"stereo on"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"stereo off"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//立体声调大</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">up</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"stereo up"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TheaterLight</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> TheaterLight instance = <span class="keyword">new</span> TheaterLight();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> TheaterLight <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> instance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"theaterlight on"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"theaterlight off"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">dim</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"theaterlight dim"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bright</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"theaterlight bright"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HomeTheaterFacade</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义各个子系统对象</span></span><br><span class="line">    <span class="keyword">private</span> TheaterLight theaterLight;</span><br><span class="line">    <span class="keyword">private</span> Popcorn popcorn;</span><br><span class="line">    <span class="keyword">private</span> Stereo stereo;</span><br><span class="line">    <span class="keyword">private</span> Projector projector;</span><br><span class="line">    <span class="keyword">private</span> Screen screen;</span><br><span class="line">    <span class="keyword">private</span> DVDPlayer dvdPlayer;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">HomeTheaterFacade</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.theaterLight = TheaterLight.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.popcorn = Popcorn.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.stereo = Stereo.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.projector = Projector.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.screen = Screen.getInstance();</span><br><span class="line">        <span class="keyword">this</span>.dvdPlayer = DVDPlayer.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//操作分成4步</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">ready</span><span class="params">()</span></span>&#123;</span><br><span class="line">        popcorn.on();</span><br><span class="line">        popcorn.pop();</span><br><span class="line">        screen.down();</span><br><span class="line">        projector.on();</span><br><span class="line">        stereo.on();</span><br><span class="line">        dvdPlayer.on();</span><br><span class="line">        theaterLight.dim();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">play</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dvdPlayer.play();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">pause</span><span class="params">()</span></span>&#123;</span><br><span class="line">        dvdPlayer.pause();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">end</span><span class="params">()</span></span>&#123;</span><br><span class="line">        popcorn.off();</span><br><span class="line">        theaterLight.bright();</span><br><span class="line">        screen.up();</span><br><span class="line">        projector.off();</span><br><span class="line">        stereo.off();</span><br><span class="line">        dvdPlayer.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HomeTheaterFacade homeTheaterFacade = <span class="keyword">new</span> HomeTheaterFacade();</span><br><span class="line"></span><br><span class="line">        homeTheaterFacade.ready();</span><br><span class="line">        homeTheaterFacade.play();</span><br><span class="line">        homeTheaterFacade.pause();</span><br><span class="line">        homeTheaterFacade.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-11-3、外观模式在MyBatis框架应用的源码分析"><a href="#4-11-3、外观模式在MyBatis框架应用的源码分析" class="headerlink" title="4.11.3、外观模式在MyBatis框架应用的源码分析"></a>4.11.3、外观模式在MyBatis框架应用的源码分析</h3><ol>
<li>MyBatis中的Configguration去创建MetaObject对象使用到外观模式</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123142153566.png" alt="image-20210123142153566"></p>
<h3 id="4-11-4、外观模式的注意事项和细节"><a href="#4-11-4、外观模式的注意事项和细节" class="headerlink" title="4.11.4、外观模式的注意事项和细节"></a>4.11.4、外观模式的注意事项和细节</h3><ol>
<li>外观模式对外屏蔽了子系统的细节，因此外观模式降低了客户端对子系统使用的复杂度。</li>
<li>外观模式对客户端与子系统的耦合关系，让子系统内部的模块更容易维护和扩展。</li>
<li>通过合理的使用外观模式，可以帮我们更好地规划访问的层次</li>
<li>当系统需要进行分层设计时，可以考虑使用（外观模式）Facade模式</li>
<li>在维护一个一流的大型系统时可能这个系统已经变得非常难以维护和扩展，此时可以考虑为新系统与Facade类交互，提高复用性。</li>
<li>不能过多的或者不合理的使用外观模式，适应外观模式好，还是直接调用模块好。要以让系统有层次，有利于维护为目的。</li>
</ol>
<h2 id="4-12、享元模式"><a href="#4-12、享元模式" class="headerlink" title="4.12、享元模式"></a>4.12、享元模式</h2><p><strong>展示网站项目需求</strong></p>
<p>小型的外包项目，给客户A做一个产品展示网站，客户A的朋友感觉效果是不错的，也希望做这样的产品展会网站，但是要求都有些不同。</p>
<ol>
<li>有客户要求以新闻的形式发布</li>
<li>有客户要求以博客的形式发布</li>
<li>有客户希望以微信公众号的形式发布</li>
</ol>
<h3 id="4-12-1、传统方案解决网站展现问题"><a href="#4-12-1、传统方案解决网站展现问题" class="headerlink" title="4.12.1、传统方案解决网站展现问题"></a>4.12.1、传统方案解决网站展现问题</h3><ol>
<li>直接复制粘贴一份，然后根据客户不同要求，进行定制修改</li>
<li>给每个网站租用一个空间</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123144554642.png" alt="image-20210123144554642"></p>
<p><strong>传统方案解决网站展现项目分析</strong></p>
<ol>
<li>需要的网站结构相似度很高，而且都不是高访问量网站，如果分成多个虚拟空间来处理，相当于一个相同的网站的实例对象很多，造成服务器的资源浪费。</li>
<li>解决思路：<strong>整合到一个网站中，共享其相关的代码和数据，对于硬盘，内存，cpu，数据库空间等服务器资源都可以达到共享，减少服务器资源</strong>。</li>
<li>对于代码来说，由于是一份实例，维护和扩展都很容易。</li>
<li>上面说的解决思路就可以使用享元模式来解决。</li>
</ol>
<h3 id="4-12-2、享元模式的基本介绍"><a href="#4-12-2、享元模式的基本介绍" class="headerlink" title="4.12.2、享元模式的基本介绍"></a>4.12.2、享元模式的基本介绍</h3><ol>
<li>享元模式（Flyweight Pattern）也叫蝇量模式：运用共享技术有效的支持大量细粒度的对象。</li>
<li>常用于系统底层开发，解决系统的性能问题。像数据库连接池，里面都是创建好的连接对象，在这些连接对象中有我们需要的则直接拿来用，避免重新创建，如果没有我们需要的，则创建一个。</li>
<li>享元模式能够解决<strong>重复对象的内存浪费问题，当系统中有大量相似对象，需要缓冲池时，不需总是创建对象，可以从缓冲池里拿。这样可以降低系统内存，同时提高效率。</strong></li>
<li>享元模式经典的应用场景就是池技术了，<strong>String常量池，数据库连接池，缓冲池</strong>等等都是享元模式的应用，享元模式是池技术的重要实现方式。</li>
</ol>
<p><strong>享元模式的原理类图</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123152953104.png" alt="image-20210123152953104"></p>
<p><strong>说明</strong></p>
<ol>
<li>FlyWeight是抽象的享元角色，他是产品的抽象类，同时定义出对象的<strong>外部状态和内部状态</strong>的接口和实现</li>
<li>ConcreteFlyweight是具体的享元角色，是具体的产品类，实现抽象角色定义相关业务。</li>
<li>UnsharedconcreteFlyweight是不可共享的角色，一般不会出现在享元工厂。</li>
<li>FlyweightFactory 享元工厂类，用于构建一个池容器（集合），同时提供从池内获取对象方法。</li>
</ol>
<p><strong>内部状态和外部状态</strong></p>
<p>比如围棋，五子棋，跳棋，他们都有大量的棋子对象，围棋和五子棋只有黑白两色，跳棋颜色多一点，所以棋子颜色就是棋子的内部状态；而各个棋子之间的差别是位置的不同，当我们落子后，落子颜色是定的，但是位置是变化的，所以棋子坐标就是棋子的外部状态。</p>
<ol>
<li>享元模式提出了两个要求：细粒度和共享对象。这里就涉及到内部状态和外部状态了，即将对象的信息分为两个部分：<strong>内部状态和外部状态</strong>。</li>
<li>内部状态指对象共享出来的信息，存储在享元对象内部且不会随环境的改变而改变</li>
<li>外部状态指对象得以依赖的一个标记，是随环境改变而改变的，不可共享的状态。</li>
<li>举个例子：围棋理论上有361个空位可以放棋子，每盘棋都有可能有两三百个棋子对象产生，因为内存空间有限，一台服务器很难维持更多的玩家玩围棋游戏，如果用享元模式来处理棋子，那么棋子对象就可以减少到只有两个实例，这样就很好的解决了对象的开销问题。</li>
</ol>
<h3 id="4-12-3、享元模式解决网站展现项目"><a href="#4-12-3、享元模式解决网站展现项目" class="headerlink" title="4.12.3、享元模式解决网站展现项目"></a>4.12.3、享元模式解决网站展现项目</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123194158319.png" alt="image-20210123194158319"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSite</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(User user)</span></span>;<span class="comment">//抽象方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flyweight;</span><br><span class="line"></span><br><span class="line"><span class="comment">//具体的网站</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConcreteWebSite</span> <span class="keyword">extends</span> <span class="title">WebSite</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//共享的部分，内部状态</span></span><br><span class="line">    <span class="keyword">private</span> String type = <span class="string">""</span>;<span class="comment">//网站发布的形式（类型）</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ConcreteWebSite</span><span class="params">(String type)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.type = type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">(User user)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"网站的发布形式:"</span> +type + user.getName() +<span class="string">"在使用中.."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="comment">//网站工厂类，根据需求返回一个网站</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSiteFactory</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//集合，充当池的作用</span></span><br><span class="line">    <span class="keyword">private</span> HashMap&lt;String ,ConcreteWebSite&gt; pool = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//根据网站的类型，返回一个网站，如果没有就创建一个网站，并放入池中，并返回</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> WebSite <span class="title">getWebSiteCategory</span><span class="params">(String type)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!pool.containsKey(type))&#123;</span><br><span class="line">            <span class="comment">//就创建一个网站，并放入池中</span></span><br><span class="line">            pool.put(type,<span class="keyword">new</span> ConcreteWebSite(type));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> (WebSite)pool.get(type);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取网站分类的总数(池中有多少个网站类型)</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span>  <span class="title">getWebSiteCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> pool.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建一个工厂类</span></span><br><span class="line">        WebSiteFactory factory = <span class="keyword">new</span> WebSiteFactory();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以新闻形式发布的网站</span></span><br><span class="line">        WebSite webSite1 = factory.getWebSiteCategory(<span class="string">"新闻"</span>);</span><br><span class="line"></span><br><span class="line">        webSite1.use(<span class="keyword">new</span> User(<span class="string">"Tom"</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//客户要一个以博客形式发布的网站</span></span><br><span class="line">        WebSite webSite2 = factory.getWebSiteCategory(<span class="string">"博客"</span>);</span><br><span class="line">        webSite2.use(<span class="keyword">new</span> User(<span class="string">"Jack"</span>));</span><br><span class="line"></span><br><span class="line">        WebSite webSite3 = factory.getWebSiteCategory(<span class="string">"博客"</span>);</span><br><span class="line">        webSite2.use(<span class="keyword">new</span> User(<span class="string">"Smith"</span>));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"网站的分类共="</span> + factory.getWebSiteCount());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-12-4、享元模式在KDK-Interger的应用源码分析"><a href="#4-12-4、享元模式在KDK-Interger的应用源码分析" class="headerlink" title="4.12.4、享元模式在KDK-Interger的应用源码分析"></a>4.12.4、享元模式在KDK-Interger的应用源码分析</h3><ol>
<li>Interger中的享元模式</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210123195446898.png" alt="image-20210123195446898"></p>
<p><strong>小结</strong></p>
<ol>
<li>在valueOf方法中，先判断值是否在IntegerCache中，如果不在，就创建新的Integer（new），否则，就直接从缓存池中返回。</li>
<li>valueOf方法，就是使用到享元模式</li>
<li>如果使用valueOf方法，得到一个Integer实例，范围在-128–127之间，执行速度比new要快。</li>
</ol>
<h3 id="4-12-5、享元模式的注意事项和细节"><a href="#4-12-5、享元模式的注意事项和细节" class="headerlink" title="4.12.5、享元模式的注意事项和细节"></a>4.12.5、享元模式的注意事项和细节</h3><ol>
<li>在享元模式这样理解，“享”就是表示分享，“元”表示对象</li>
<li>系统中有大量对象，这些对象消耗大量内存，并且这些对象的状态大部分可以外部化是，我们就可以考虑使用享元模式</li>
<li>用唯一标识码判断，，如果内存中有，则返回这个唯一标志码所标识的对象，用HashMap/HashTable存储。</li>
<li>享元模式大大减少了对象的创建，降低了程序内存的占用，提高效率。</li>
<li>享元模式提高了系统的复杂度。<strong>需要分离出内部状态和外部状态，而外部状态具有固化特性，不应该随着内部状态的改变而改变，</strong>这是我们使用享元模式需要注意的地方。</li>
<li>使用享元模式时，<strong>注意划分内部状态和外部状态，并且需要有一个工厂类加以控制</strong>。</li>
<li>享元模式经典的应用场景是需要缓冲池的场景，比如String常量池，数据库连接池。</li>
</ol>
<h2 id="4-13、代理模式"><a href="#4-13、代理模式" class="headerlink" title="4.13、代理模式"></a>4.13、代理模式</h2><h3 id="4-13-1、代理模式的基本介绍"><a href="#4-13-1、代理模式的基本介绍" class="headerlink" title="4.13.1、代理模式的基本介绍"></a>4.13.1、代理模式的基本介绍</h3><ol>
<li>代理模式：为一个对象提供一个替身，以控制对这个对象的访问，即通过代理对象访问目标对象，这样做的好处是：可以在目标对象实现的基础上增强额外的功能操作，即扩展目标对象的功能。</li>
<li>被代理的对象可以是远程对象，创建开销大的对象或者需要安全控制的对象</li>
<li>代理模式有不同的形式，主要是三种：<strong>静态代理，动态代理，Cglib代理（可以在内存中动态创建对象，不需要实现接口）</strong></li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210124105501434.png" alt="image-20210124105501434"></p>
<h3 id="4-13-2、静态代理"><a href="#4-13-2、静态代理" class="headerlink" title="4.13.2、静态代理"></a>4.13.2、静态代理</h3><p><strong>静态代理模式的介绍</strong></p>
<p>静态代理在使用时，需要定义接口或者父类，被代理对象（即目标对象）与代理对象一起实现相同的接口或者继承相同的接口</p>
<p><strong>应用实例</strong></p>
<ol>
<li>定义一个接口ITeacherDao</li>
<li>目标对象TeacherDao实现接口ITeacherDAo</li>
<li>使用静态代理方式，就需要在代理对象TeacherDaoProxy中也实现ITeacherDao</li>
<li>调用的时候通过调用代理对象的方法来调用目标对象</li>
<li><strong>特别提醒：</strong>代理对象与目标对象要实现相同的接口，然后通过调用相同的的方法来调用目标对象的方法。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210124123713473.png" alt="image-20210124123713473"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> staticproxy;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师正在授课"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> staticproxy;</span><br><span class="line"><span class="comment">//代理对象，静态代理</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDaoProxy</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> ITeacherDao target;<span class="comment">//目标对象，通过接口来聚合</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TeacherDaoProxy</span><span class="params">(ITeacherDao target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"代理开始,完成某些操作...."</span>);</span><br><span class="line">        target.teach();</span><br><span class="line">        System.out.println(<span class="string">"提交...."</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> staticproxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建目标对象（被代理对象）</span></span><br><span class="line">        TeacherDao teacherDao = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建代理对象，同时将被代理对象传递给代理对象</span></span><br><span class="line">        TeacherDaoProxy teacherDaoProxy = <span class="keyword">new</span> TeacherDaoProxy(teacherDao);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理对象，调用到被代理对象的方法</span></span><br><span class="line">        <span class="comment">//即：执行的是代理对象的方法，代理对象再去调用目标对象的方法</span></span><br><span class="line">        teacherDaoProxy.teach();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>静态代理优缺点</strong></p>
<ol>
<li>优点：在不修改目标对象的功能前提下，能通过代理对象对目标功能扩展</li>
<li>缺点：因为代理模式需要与目标对象实现一样的借口，所以会有很多代理类</li>
<li>一旦接口增加方法，目标对象与代理对象都要维护</li>
</ol>
<h3 id="4-13-3、动态代理"><a href="#4-13-3、动态代理" class="headerlink" title="4.13.3、动态代理"></a>4.13.3、动态代理</h3><p><strong>动态代理模式的基本介绍</strong></p>
<ol>
<li>代理对象，不需要实现接口，但是目标对象要实现接口，否则不能用动态代理。</li>
<li>代理对象的生成，是利用JDK的API，动态的在内存中构建代理对象。</li>
<li>动态代理：JDK代理，接口代理</li>
</ol>
<p><strong>JDK中生成代理对象的API</strong></p>
<ol>
<li>代理类所在包：java.reflect.Proxy</li>
<li>JDK实现代理只需要使用newProxyInstance方法，但是该方法需要接受三个参数，完整的写法是：</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">static</span> Object <span class="title">newProxyInstance</span><span class="params">(ClassLoader loader,Class&lt;?&gt;[]interfaces,invocationHandler h)</span></span></span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210124140843142.png" alt="image-20210124140843142"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy.dynamic;</span><br><span class="line"><span class="comment">//接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span>  <span class="title">ITeacherDao</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span></span>;<span class="comment">//授课方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy.dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TeacherDao</span> <span class="keyword">implements</span> <span class="title">ITeacherDao</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">teach</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"老师在授课中"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy.dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.InvocationHandler;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Method;</span><br><span class="line"><span class="keyword">import</span> java.lang.reflect.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ProxyFactory</span> </span>&#123;</span><br><span class="line">    <span class="comment">//维护一个目标对象，Object</span></span><br><span class="line">    <span class="keyword">private</span> Object target;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器，对target进行初始化</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ProxyFactory</span><span class="params">(Object target)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.target = target;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给目标对象，生成一个代理对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getProxyInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        * 说明</span></span><br><span class="line"><span class="comment">        * public static Object newProxyInstance(ClassLoader loader,</span></span><br><span class="line"><span class="comment">                                          Class&lt;?&gt;[] interfaces,</span></span><br><span class="line"><span class="comment">                                          InvocationHandler h)</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        * 1.ClassLoader loader:指定当前目标对象使用的类加载器，获取加载器的方法固定</span></span><br><span class="line"><span class="comment">        * 2.Class&lt;?&gt;[] interfaces：目标对象实现的接口类型，使用泛型方法确认类型</span></span><br><span class="line"><span class="comment">        * 3.InvocationHandler h：事情处理，执行目标对象的方法时，会触发事情处理器方法，会把当前执行的目标对象方法作为参数传入。</span></span><br><span class="line"><span class="comment">        *</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Proxy.newProxyInstance(target.getClass().getClassLoader(), target.getClass().getInterfaces(), <span class="keyword">new</span> InvocationHandler() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> Object <span class="title">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"JDK代理开始~~"</span>);</span><br><span class="line">                <span class="comment">//反射机制调用目标对象的方法</span></span><br><span class="line">                Object returnVal = method.invoke(target,args);</span><br><span class="line">                System.out.println(<span class="string">"JDK代理提交"</span>);</span><br><span class="line">                <span class="keyword">return</span> returnVal;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Proxy.dynamic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建目标对象</span></span><br><span class="line">        ITeacherDao target = <span class="keyword">new</span> TeacherDao();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给目标对象,创建代理对象，可以转成ITeacherDao</span></span><br><span class="line">        ITeacherDao proxyInstance =(ITeacherDao) <span class="keyword">new</span> ProxyFactory(target).getProxyInstance();</span><br><span class="line">        <span class="comment">//proxyInstance = class com.sun.proxy.$Proxy0从这里看出，内存中动态生成的代理对象</span></span><br><span class="line">        System.out.println(<span class="string">"proxyInstance = "</span> +proxyInstance.getClass());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过代理对象，调用目标对象的方法</span></span><br><span class="line">        proxyInstance.teach();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-13-4、Cglib代理"><a href="#4-13-4、Cglib代理" class="headerlink" title="4.13.4、Cglib代理"></a>4.13.4、Cglib代理</h3><p><strong>Cglib代理模式的基本介绍</strong></p>
<ol>
<li>静态代理和JDK代理模式都要求目标对象是实现一个接口，但是有时候目标对象只是一个单纯的对象，并没有实现任何接口，这个时候可使用目标对象子类来实现代理。—-&gt;Chlib代理</li>
<li>Cglib代理也叫子类代理，它是在内存中构建一个子类对象从而实现对目标对象功能扩展，有些书也将Cglib代理归属到动态代理。</li>
<li>Cglib是一个强大的高性能的代码生成包，他可以在运行期扩展Java类与实现java接口。它广泛的被许多AOP的框架使用，例如Spring AOP，实现方法拦截。</li>
<li>在AOP编程中如何选择代理模式<ul>
<li>目标对象需要实现接口，用JDK代理</li>
<li>目标对象不需要实现接口，用Cglib代理</li>
</ul>
</li>
<li>Cglib包的底层是通过使用字节码处理框架ASM来转换字节码并生成新的类</li>
</ol>
<p><strong>Cglib代理模式实现步骤</strong></p>
<ol>
<li><p>需要引入Cglib的jar文件。</p>
</li>
<li><p>在内存中动态构建子类，注意代理的类不能为final，否则会报错（java.lang.IllegalArgumentException）</p>
</li>
<li><p>目标对象的方法如果为final/static,那么就不会被拦截，既不会执行目标对象额外的业务方法</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210125132608017.png" alt="image-20210125132608017"></p>
</li>
</ol>
<h3 id="4-13-5、代理模式（Proxy）的变体"><a href="#4-13-5、代理模式（Proxy）的变体" class="headerlink" title="4.13.5、代理模式（Proxy）的变体"></a>4.13.5、代理模式（Proxy）的变体</h3><p><strong>1. 防火墙代理</strong></p>
<p>内网通过代理穿透防火墙，实现对公司的访问。</p>
<p><strong>2. 缓存代理</strong></p>
<p>比如：当请求图片文件等资源时，先到缓存代理取，如果取到资源就OK，如果取不到资源，就去公网或者数据库取，然后缓存。</p>
<p><strong>3.远程代理</strong></p>
<p>远程对象的本地代表，通过它可以把远程对象当本地对象来调用。远程代理通过网络和真正的远程对象沟通信息。</p>
<p><strong>4. 同步代理</strong></p>
<p>主要使用在多线程编程中，完成对线程间同步工作。</p>
<h2 id="4-14、模板方法模式"><a href="#4-14、模板方法模式" class="headerlink" title="4.14、模板方法模式"></a>4.14、模板方法模式</h2><p><strong>豆浆制作问题</strong></p>
<ol>
<li>制作豆浆的流程  选材–&gt;添加配料–&gt;浸泡–&gt;放到豆浆机打碎</li>
<li>通过添加不同的配料，可以制作出不同口味的豆浆</li>
<li>选材，浸泡和放到豆浆机打碎这几个步骤对于制作每种口味的豆浆都是一样的。（红豆，花生豆）</li>
</ol>
<h3 id="4-14-1、模板方法模式基本介绍"><a href="#4-14-1、模板方法模式基本介绍" class="headerlink" title="4.14.1、模板方法模式基本介绍"></a>4.14.1、模板方法模式基本介绍</h3><ol>
<li>模板方法模式（Template Method Pattern）,又叫模板模式，在一个抽象类公开定义了执行它的方法的模板，它的子类可以按需重写方法实现，但调用将以抽象类中定义的方式进行。</li>
<li>简单说，模板方法模式定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构，就可以重定义该算法的某些特定步骤。</li>
<li>这种类型的设计模式属于行为型模式</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210125150616394.png" alt="image-20210125150616394"></p>
<p><strong>原理类图说明</strong></p>
<ol>
<li>AbstractClass抽象类，类中实现了模板方法，定义了算法的骨架，具体子类需要去实现其他的抽象方法 operationr2,3,4.</li>
<li>ConcreteClass实现抽象方法operationr2,3,4，以完成算法中特点子类的步骤</li>
</ol>
<h3 id="4-14-2、模板方法模式解决豆浆制作问题"><a href="#4-14-2、模板方法模式解决豆浆制作问题" class="headerlink" title="4.14.2、模板方法模式解决豆浆制作问题"></a>4.14.2、模板方法模式解决豆浆制作问题</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210125152246729.png" alt="image-20210125152246729"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Template;</span><br><span class="line"><span class="comment">//抽象类，表示豆浆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板方法，make，模板方法可以做成final，不让子类去覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        select();</span><br><span class="line">        addCondiments();</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第一步，选择好的新鲜的黄豆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加不同的配料，抽象方法,子类具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第三步，黄豆和配料开始浸泡，需要三个小时"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第四步，黄豆和配料放进豆浆机去打碎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RedBeanSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加入上好的红豆"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PeanutSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"加入上好的花生"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Template;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//制作红豆豆浆</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------制作红豆豆浆----"</span>);</span><br><span class="line"></span><br><span class="line">        SoyaMilk redBeanSoyaMilk = <span class="keyword">new</span> RedBeanSoyaMilk();</span><br><span class="line"></span><br><span class="line">        redBeanSoyaMilk.make();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//制作花生豆浆</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------制作花生豆浆----"</span>);</span><br><span class="line"></span><br><span class="line">        SoyaMilk peanutSoyaMilk  = <span class="keyword">new</span> PeanutSoyaMilk();</span><br><span class="line"></span><br><span class="line">        peanutSoyaMilk.make();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-14-2、模板方法模式的钩子方法"><a href="#4-14-2、模板方法模式的钩子方法" class="headerlink" title="4.14.2、模板方法模式的钩子方法"></a>4.14.2、模板方法模式的钩子方法</h3><p><strong>模板方法模式的钩子方法</strong></p>
<ol>
<li>在模板方法模式的父类中，我们可以定义一个方法，它默认不做任何事，子类可以视情况要不要覆盖它，该方法称为<strong>钩子</strong>。</li>
<li>还是用上面做豆浆的例子来讲解，比如，我们还希望制作纯豆浆，不添加任何的配料，请使用钩子方法对前面的模板方法进行改造。</li>
</ol>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Template.improve;</span><br><span class="line"><span class="comment">//抽象类，表示豆浆</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">SoyaMilk</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//模板方法，make，模板方法可以做成final，不让子类去覆盖</span></span><br><span class="line">    <span class="function"><span class="keyword">final</span> <span class="keyword">void</span> <span class="title">make</span><span class="params">()</span></span>&#123;</span><br><span class="line">        select();</span><br><span class="line">        <span class="keyword">if</span> (customerWantCondiments())&#123;</span><br><span class="line">            addCondiments();</span><br><span class="line">        &#125;</span><br><span class="line">        soak();</span><br><span class="line">        beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//选材料</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">select</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第一步，选择好的新鲜的黄豆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加不同的配料，抽象方法,子类具体实现</span></span><br><span class="line">    <span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//浸泡</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">soak</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第三步，黄豆和配料开始浸泡，需要三个小时"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"第四步，黄豆和配料放进豆浆机去打碎"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//钩子方法，决定是否需要添加配料</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customerWantCondiments</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Template.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PureSoyaMilk</span> <span class="keyword">extends</span> <span class="title">SoyaMilk</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">addCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//空实现</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">boolean</span> <span class="title">customerWantCondiments</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> Template.improve;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//制作红豆豆浆</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------制作红豆豆浆----"</span>);</span><br><span class="line"></span><br><span class="line">        SoyaMilk redBeanSoyaMilk = <span class="keyword">new</span> RedBeanSoyaMilk();</span><br><span class="line"></span><br><span class="line">        redBeanSoyaMilk.make();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//制作花生豆浆</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-------制作花生豆浆----"</span>);</span><br><span class="line"></span><br><span class="line">        SoyaMilk peanutSoyaMilk  = <span class="keyword">new</span> PeanutSoyaMilk();</span><br><span class="line"></span><br><span class="line">        peanutSoyaMilk.make();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//制作纯豆浆</span></span><br><span class="line">        System.out.println(<span class="string">"-------制作纯豆浆----"</span>);</span><br><span class="line"></span><br><span class="line">        SoyaMilk pureSoyaMilk = <span class="keyword">new</span> PureSoyaMilk();</span><br><span class="line"></span><br><span class="line">        pureSoyaMilk.make();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-14-3、模板方法在Spring框架应用的源码分析"><a href="#4-14-3、模板方法在Spring框架应用的源码分析" class="headerlink" title="4.14.3、模板方法在Spring框架应用的源码分析"></a>4.14.3、模板方法在Spring框架应用的源码分析</h3><p>Spring   IOC容器初始化时运用到的模板方法模式</p>
<h3 id="4-14-4、模板方法模式的注意事项和细节"><a href="#4-14-4、模板方法模式的注意事项和细节" class="headerlink" title="4.14.4、模板方法模式的注意事项和细节"></a>4.14.4、模板方法模式的注意事项和细节</h3><ol>
<li>基本思想是：算法只存在于一个地方，也就是在父类中，容易修改，需要修改算法时，只需要修改父类的模板方法或者已经实现的某些步骤，子类就会继承这些修改</li>
<li>实现了最大化代码复用。父类模板方法和已实现的某些步骤会被子类继承而直接使用。</li>
<li>即统一了算法，也提供了很大的灵活性。父类的模板方法确保了算法的结构保持不变，同时由子类提供部分步骤的实现。</li>
<li>该模式的不足之处：每一个不同的实现都需要一个子类实现，导致类的个数增加，使得系统更加庞大。</li>
<li>一般模板方法都加上final关键字，防止子类重写模板方法。</li>
<li>模板方法模式使用场景：当要完成在某个过程，该过程执行一系列步骤，这一系列步骤的步骤基本相同，但是个别步骤在实现时可能不同，通常考虑用模板方法模式来处理。</li>
</ol>
<h2 id="4-15、命令模式"><a href="#4-15、命令模式" class="headerlink" title="4.15、命令模式"></a>4.15、命令模式</h2><p><strong>项目需求</strong></p>
<ol>
<li>我们买了一套智能家电，有照明灯，风扇，冰箱，洗衣机，我们只要在手机上安装app就可以控制对这些家电工作。</li>
<li>这些智能家电来自不同的厂家，我们不想针对每一种家电都安装一个app，分别控制，我们希望只要一个app就可以控制全部智能家电。</li>
<li>要实现一个app控制所有智能家电的需要，则每个智能家电厂家都要提供一个统一的接口给app调用，这时就可以考虑使用命令模式。</li>
<li>命令模式可将“动作的请求者“ 从”动作的执行者“对象中解耦出来</li>
<li>在我们的例子中，动作的请求者是手机app，动作的执行者是每个厂商的一个家电产品。</li>
</ol>
<h3 id="4-15-1、命令模式的基本介绍"><a href="#4-15-1、命令模式的基本介绍" class="headerlink" title="4.15.1、命令模式的基本介绍"></a>4.15.1、命令模式的基本介绍</h3><ol>
<li>命令模式（Command Pattern）：在软件设计中，我们经常需要像某些对象发送请求，但是并不知道请求接收者是谁，也不知道被请求的操作是哪个，我们只需在程序运行时指定具体的请求接收者即可，此时，可以使用命令模式来进行设计。</li>
<li>命令模式使得请求发送者与请求接收者消除彼此之间的耦合，让对象之间的调用关系更加灵活，实现解耦。</li>
<li>在命名模式中，会将一个请求封装为一个对象，以便使用不同参数来表示不同的请求（即命名），同时命令模式也支持可撤销的操作。</li>
<li>通俗易懂的理解，将军发布命令，士兵去执行其中有几个角色，将军（命令发布者），士兵（命令的具体执行者），命令（连接将军和士兵）</li>
<li>Invoker是调用者（将军），Receiver是被调用者（士兵），MyCommand是命令，实现了Command接口，持有接收对象</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210126131553574.png" alt="image-20210126131553574"></p>
<p><strong>原理类图说明</strong></p>
<ol>
<li>Invoker是调用者角色</li>
<li>Command是命令角色，需要执行的所有命令都在这里，可以是接口或者抽象类。</li>
<li>Receiver：接收者角色，知道如何实施和执行一个请求相关的操作。</li>
<li>ConcreteCommand：将一个接收者对象与一个动作，调用接收者相应的操作，实现execute。</li>
</ol>
<h3 id="4-15-2、命令模式解决智能生活项目"><a href="#4-15-2、命令模式解决智能生活项目" class="headerlink" title="4.15.2、命令模式解决智能生活项目"></a>4.15.2、命令模式解决智能生活项目</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210126134630061.png" alt="image-20210126134630061"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"><span class="comment">//创建命令接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">    <span class="comment">//执行动作（操作）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="comment">//撤销动作（某个操作）</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合LightReceiver</span></span><br><span class="line">    LightReceiver light;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOnCommand</span><span class="params">(LightReceiver light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        light.on();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        light.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合LightReceiver</span></span><br><span class="line">    LightReceiver light;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">LightOffCommand</span><span class="params">(LightReceiver light)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.light = light;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        light.off();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        light.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*没有任何命令，即空执行：用于初始化每个按钮，当调用空命令时，对象什么也不做</span></span><br><span class="line"><span class="comment">其实这也是一种设计模式，可以省掉对空命令的判断</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LightReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" 电灯打开了 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" 电灯关闭了 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RemoteController</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开 按钮的命令数组</span></span><br><span class="line">    Command[] onCommands;</span><br><span class="line">    Command[] offCommands;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//执行撤销命令</span></span><br><span class="line">    Command undocommand;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//构造器，完成对按钮的初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">RemoteController</span><span class="params">()</span></span>&#123;</span><br><span class="line">        onCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line">        offCommands = <span class="keyword">new</span> Command[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">            onCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">            offCommands[i] = <span class="keyword">new</span> NoCommand();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给按钮设置需要的命令</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCommand</span><span class="params">(<span class="keyword">int</span> no,Command onCommand,Command offCommand)</span></span>&#123;</span><br><span class="line">        onCommands[no] = onCommand;</span><br><span class="line">        offCommands[no] = offCommand;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下开按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到你按下的开的按钮，并调用其方法</span></span><br><span class="line">        onCommands[no].excute();</span><br><span class="line">        <span class="comment">//记录这次的操作，用于撤销</span></span><br><span class="line">        undocommand  = onCommands[no];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//按下关按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">offButtonWasPushed</span><span class="params">(<span class="keyword">int</span> no)</span></span>&#123;</span><br><span class="line">        <span class="comment">//找到你按下的关的按钮，并调用其方法</span></span><br><span class="line">        offCommands[no].excute();</span><br><span class="line">        <span class="comment">//记录这次的操作，用于撤销</span></span><br><span class="line">        undocommand  = offCommands[no];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按下撤销按钮</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undoButtonWasPushed</span><span class="params">()</span></span>&#123;</span><br><span class="line">        undocommand.undo();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用命令模式，完成通过遥控器，对电灯的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建电灯的对象（接受者）</span></span><br><span class="line">        LightReceiver lightReceiver = <span class="keyword">new</span> LightReceiver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建点灯开关的开关命令</span></span><br><span class="line">        LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(lightReceiver);</span><br><span class="line">        LightOffCommand lightOffCommand = <span class="keyword">new</span> LightOffCommand(lightReceiver);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要一个遥控器</span></span><br><span class="line">        RemoteController remoteController = <span class="keyword">new</span> RemoteController();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给我们的遥控器设置命令。比如no = 0是对点灯的开和关的操作</span></span><br><span class="line">        remoteController.setCommand(<span class="number">0</span>,lightOnCommand,lightOffCommand);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------按下灯的开的按钮--------"</span>);</span><br><span class="line">        remoteController.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------按下灯的关的按钮---------"</span>);</span><br><span class="line">        remoteController.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------按下撤销按钮------"</span>);</span><br><span class="line">        remoteController.undoButtonWasPushed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>增加一个TV的控制</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVReceiver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">on</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" 电视打开了 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">off</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">" 电视关闭了 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVOffCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合TVReceiver</span></span><br><span class="line">    TVReceiver tv;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOffCommand</span><span class="params">(TVReceiver tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tv.off();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tv.on();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TVOnCommand</span> <span class="keyword">implements</span> <span class="title">Command</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//聚合TVReceiver</span></span><br><span class="line">    TVReceiver tv;</span><br><span class="line">    <span class="comment">//构造器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TVOnCommand</span><span class="params">(TVReceiver tv)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.tv = tv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">excute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tv.on();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//调用接收者的方法</span></span><br><span class="line">        tv.off();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用命令模式，完成通过遥控器，对电灯的操作</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建电灯的对象（接受者）</span></span><br><span class="line">        LightReceiver lightReceiver = <span class="keyword">new</span> LightReceiver();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建点灯开关的开关命令</span></span><br><span class="line">        LightOnCommand lightOnCommand = <span class="keyword">new</span> LightOnCommand(lightReceiver);</span><br><span class="line">        LightOffCommand lightOffCommand = <span class="keyword">new</span> LightOffCommand(lightReceiver);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//需要一个遥控器</span></span><br><span class="line">        RemoteController remoteController = <span class="keyword">new</span> RemoteController();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给我们的遥控器设置命令。比如no = 0是对点灯的开和关的操作</span></span><br><span class="line">        remoteController.setCommand(<span class="number">0</span>,lightOnCommand,lightOffCommand);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------按下灯的开的按钮--------"</span>);</span><br><span class="line">        remoteController.onButtonWasPushed(<span class="number">0</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------按下灯的关的按钮---------"</span>);</span><br><span class="line">        remoteController.offButtonWasPushed(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------按下撤销按钮------"</span>);</span><br><span class="line">        remoteController.undoButtonWasPushed();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//操作TV</span></span><br><span class="line">        System.out.println(<span class="string">"使用遥控器操作电视机"</span>);</span><br><span class="line">        TVReceiver tvReceiver = <span class="keyword">new</span> TVReceiver();</span><br><span class="line"></span><br><span class="line">        TVOffCommand tvOffCommand = <span class="keyword">new</span> TVOffCommand(tvReceiver);</span><br><span class="line">        TVOnCommand tvOnCommand = <span class="keyword">new</span> TVOnCommand(tvReceiver);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//给遥控器设置命令，比如no=1 是电视的开和关操作</span></span><br><span class="line">        remoteController.setCommand(<span class="number">1</span>,tvOnCommand,tvOffCommand);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"-----------按下电视机的开的按钮--------"</span>);</span><br><span class="line">        remoteController.onButtonWasPushed(<span class="number">1</span>);</span><br><span class="line">        System.out.println(<span class="string">"-----------按下电视机的关的按钮---------"</span>);</span><br><span class="line">        remoteController.offButtonWasPushed(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"------按下撤销按钮------"</span>);</span><br><span class="line">        remoteController.undoButtonWasPushed();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-15-3、Spring框架JdbcTemplate应用的源码分析"><a href="#4-15-3、Spring框架JdbcTemplate应用的源码分析" class="headerlink" title="4.15.3、Spring框架JdbcTemplate应用的源码分析"></a>4.15.3、Spring框架JdbcTemplate应用的源码分析</h3><ol>
<li>Spring框架的JdbcTemplate就是用到了命令模式</li>
</ol>
<h3 id="4-15-4、命令模式的注意事项和细节"><a href="#4-15-4、命令模式的注意事项和细节" class="headerlink" title="4.15.4、命令模式的注意事项和细节"></a>4.15.4、命令模式的注意事项和细节</h3><ol>
<li>将发起请求的对象与执行请求的对象解耦。发起请求的对象是调用者，调用者只要调用命令对象的execute()方法就可以让接收者工作，而不必知道具体的接收者对象是谁，是如何实现的，命令对象会负责让接收者执行请求的动作，也就是说：“发起请求者” 和“请求执行者”之间的解耦是通过命令对象实现的，命令对象起到了纽带桥梁的作用。</li>
<li>容易设计一个命令队列。只要把命令对象放到队列，就可以多线程的执行命令</li>
<li>容易实现对请求的撤销和重做</li>
<li>命令模式的不足：可能导致某些系统有过多的具体命令类，增加了系统的复杂度，者点在使用的时候要注意。</li>
<li>空命令也是一种设计模式，他为我们省去了判空的操作，在上面的事例中，如果没有空命令，我们每按下一个按键都要判空，这给我们的编码带来了一定的麻烦。</li>
<li>命令模式经典的应用场景：界面的一个按钮都是一条命令，模拟CMD（DOS命令）订单的撤销恢复，触发-反馈机制。</li>
</ol>
<h2 id="4-16、访问模式"><a href="#4-16、访问模式" class="headerlink" title="4.16、访问模式"></a>4.16、访问模式</h2><p><strong>测评系统的需求</strong></p>
<ol>
<li>将人分为男人和女人，对歌手进行测评，当看完某个歌手表演后，得到他们对该歌手的评价（评价 有不同的种类，比如成功失败等）</li>
<li>传统方案：男人女人继承Person ，通过判断确定评价</li>
</ol>
<p><strong>传统方式的问题分析</strong></p>
<ol>
<li>如果系统比较小，还是ok的，但是考虑系统增加越来越多新的功能时，对代码改动较大，违反了ocp原则。</li>
<li>扩展性不好，比如 增加了新的人员类型，或者管理方法，都不好做。</li>
<li>引出我们新的设计模式—&gt;访问者模式</li>
</ol>
<h3 id="4-16-1、访问者模式基本介绍"><a href="#4-16-1、访问者模式基本介绍" class="headerlink" title="4.16.1、访问者模式基本介绍"></a>4.16.1、访问者模式基本介绍</h3><p><strong>访问者模式基本介绍</strong></p>
<ol>
<li>访问者模式（Visitor Pattern），封装一些作用于某种数据结构的各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作。</li>
<li>主要将数据结构与数据操作分离，解决数据结构和操作耦合性问题。</li>
<li><strong>访问者模式的基本工作原理是：在被访问的类里面加一个对外提供接待访问者的接口。</strong></li>
<li><strong>访问者模式主要应用场景：需要对一个对象结构中的对象进行很多不同操作</strong>（这些操作彼此没有关联），同时需要避免让这些操作“污染”这些对象的类，可以选用访问者模式解决。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210127141449146.png" alt="image-20210127141449146"></p>
<p><strong>访问者模式的角色和职责</strong></p>
<ol>
<li>Visitor是抽象访问者，为该对象结构中的ConcreteElement的每一个类声明一个visit操作。</li>
<li>ConcreteElement：是一个具体的访问值，实现每个有Visitor声明的操作，是每个操作实现的部分。</li>
<li>ObjectStructure：能枚举它的元素，可以提供一个高层的接口，用来允许访问者访问的元素。</li>
<li>Element：定义一个accept方法，接收一个访问者对象。</li>
<li>concreteElement：为具体元素，实现了accept方法。</li>
</ol>
<h3 id="4-16-2、访问者模式应用实例"><a href="#4-16-2、访问者模式应用实例" class="headerlink" title="4.16.2、访问者模式应用实例"></a>4.16.2、访问者模式应用实例</h3><p><strong>应用实例要求</strong></p>
<p>将人分为男人和女人，对歌手进行评测，当看完某个歌手表演后，得到他们对该歌手不同的评价（评价 有不同的种类，比如 成功，失败等），请使用访问者模式来说实现。</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210127150957421.png" alt="image-20210127150957421"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="comment">//得到男性的测评</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//得到女性的测评</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">getWomanResult</span><span class="params">(Woman woman)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Man</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">        action.getManResult(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"><span class="comment">//说明：</span></span><br><span class="line"><span class="comment">//1.这里我们是用到了双分派，即首先在客户端程序中，将具体状态作为参数传递给Woman中（第一次分派）</span></span><br><span class="line"><span class="comment">//2.然后Woman类调用作为参数的“具体方法”中方法getWomanResult，将自己（this）作为参数传入，完成了第二次分派</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Woman</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Action action)</span> </span>&#123;</span><br><span class="line">        action.getWomanResult(<span class="keyword">this</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//提供一个方法，让访问者可以访问</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">accept</span><span class="params">(Action action)</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Success</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男人给的评价是好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomanResult</span><span class="params">(Woman woman)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女人给的评价是好"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fail</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男人给的评价是差"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomanResult</span><span class="params">(Woman woman)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女人给的评价是差"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"><span class="comment">//数据结构，管理很多人（man，woman）</span></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ObjectStructure</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//维护了一个集合</span></span><br><span class="line">    <span class="keyword">private</span> List&lt;Person&gt; persons = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加到list</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attach</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">        persons.add(p);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//移除</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">detach</span><span class="params">(Person p)</span></span>&#123;</span><br><span class="line">        persons.remove(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示测评情报</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">(Action action)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (Person p:persons) &#123;</span><br><span class="line">            p.accept(action);</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ObjectStructure</span></span><br><span class="line">        ObjectStructure objectStructure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line"></span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Man());</span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Woman());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//成功</span></span><br><span class="line">        Success success = <span class="keyword">new</span> Success();</span><br><span class="line">        objectStructure.display(success);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Fail fail = <span class="keyword">new</span> Fail();</span><br><span class="line">        objectStructure.display(fail);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>应用案例小结</strong></p>
<ul>
<li>上面提到的双分派，所谓双分派是指不管类怎么变化，我们都能找到期望的方法运行。双分派意味着得到执行的操作取决于请求的种类和两个接收者的类型</li>
<li>假设我们要添加一个NoBat的状态类，考察Man类和Woman类的反映，由于使用了双分派，只需要增加一个Action子类即可在客户端调用，不需要改动任何其他类的代码。</li>
</ul>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210127171011926.png" alt="image-20210127171011926"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建ObjectStructure</span></span><br><span class="line">        ObjectStructure objectStructure = <span class="keyword">new</span> ObjectStructure();</span><br><span class="line"></span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Man());</span><br><span class="line">        objectStructure.attach(<span class="keyword">new</span> Woman());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//成功</span></span><br><span class="line">        Success success = <span class="keyword">new</span> Success();</span><br><span class="line">        objectStructure.display(success);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Fail fail = <span class="keyword">new</span> Fail();</span><br><span class="line">        objectStructure.display(fail);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"========给的是待定的测评======"</span>);</span><br><span class="line"></span><br><span class="line">        Wait wait = <span class="keyword">new</span> Wait();</span><br><span class="line">        objectStructure.display(wait);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> visitor;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Wait</span> <span class="keyword">extends</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getManResult</span><span class="params">(Man man)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"男人给的评价是该歌手待定"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getWomanResult</span><span class="params">(Woman woman)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"女人给法人评价是该歌手待定"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-16-3、访问者模式的注意事项和细节"><a href="#4-16-3、访问者模式的注意事项和细节" class="headerlink" title="4.16.3、访问者模式的注意事项和细节"></a>4.16.3、访问者模式的注意事项和细节</h3><p><strong>优点</strong></p>
<ol>
<li>访问者模式符合单一职责原则，让程序具有优秀的扩展性，灵活性非常高。</li>
<li>访问者模式可以对功能进行统一，可以做报表，UI，拦截器与过滤器，适用于数据结构相对稳定的系统。</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>具体元素对访问者公布细节，也就是说访问者关注了其他类的内部细节，这是迪米特法则所不建议的，这样造成了具体元素变得更比较困难。</li>
<li>违背了依赖倒转原则，访问者依赖的是具体的元素，而不是抽象元素。</li>
<li>因此，如果一个系统有比较稳定的数据结构，又有经常变化的功能需求，那么访问这模式是比较合适的。</li>
</ol>
<h2 id="4-17、迭代器模式"><a href="#4-17、迭代器模式" class="headerlink" title="4.17、迭代器模式"></a>4.17、迭代器模式</h2><p><strong>具体需求</strong></p>
<p>编写程序展示一个学校院系结构：需求是这样的，要在一个页面中展示出学校的院系组成，一个学校有多个学院，一个学院有多个系。</p>
<p><strong>传统方式的问题分析</strong></p>
<ol>
<li>将学校看作是学校的子类，系是学院的子类，这样实际上是站在组织大小来进行分层次的。</li>
<li>实际上我们的要求是：在一个页面中展示出学校的院系组成，一个学校有多少个学院，一个学校有多少个系，因此这种方案，不能很好体现的遍历的操作。</li>
<li>解决方案：—&gt;迭代器</li>
</ol>
<h3 id="4-17-1、迭代器模式的基本介绍"><a href="#4-17-1、迭代器模式的基本介绍" class="headerlink" title="4.17.1、迭代器模式的基本介绍"></a>4.17.1、迭代器模式的基本介绍</h3><p><strong>基本介绍</strong></p>
<ol>
<li>迭代器模式（Iterator  Pattern）是常用的设计模式，属于行为型模式。</li>
<li>如果我们的集合元素是用不同的方式实现的，有数组，还有Java的集合类，或者还有其他方式，当客户端要遍历这些集合元素的时候就要适用多种遍历方式而且还会暴露元素的内部结构，可以考虑使用迭代器模式解决。</li>
<li>迭代器模式，提供一种遍历集合元素的统一接口，用一致的方法去遍历集合元素，不需要知道集合对象的底层表示，即：不暴露其内部结构。</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210128115820823.png" alt="image-20210128115820823"></p>
<p><strong>迭代器模式的角色和职责</strong></p>
<ol>
<li>Iterator：迭代器接口，是系统提供，hasNext，next，remove。</li>
<li>ConcreteIterator：具体的迭代器类，管理迭代。</li>
<li>Aggregate：一个统一的聚合接口，将客户端和具体聚合解耦。</li>
<li>ConcreteAggregate：具体的聚合持有对象，并提供一个方法，返回一个迭代器，该迭代器可以正确遍历集合。</li>
<li>Client：客户端，通过Iterator和Aggregate依赖子类。</li>
</ol>
<h3 id="4-17-2、以迭代器模式实现案例"><a href="#4-17-2、以迭代器模式实现案例" class="headerlink" title="4.17.2、以迭代器模式实现案例"></a>4.17.2、以迭代器模式实现案例</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2021/01/07/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/image-20210128123356781.png" alt="image-20210128123356781"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator;</span><br><span class="line"><span class="comment">//系</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Department</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String desc;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Department</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDesc</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> desc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDesc</span><span class="params">(String desc)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.desc = desc;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerCollegeIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里我们需要知道Department是以怎样的方式存放==&gt;数组</span></span><br><span class="line"></span><br><span class="line">    Department[] departments;</span><br><span class="line">    <span class="keyword">int</span> position = <span class="number">0</span>;<span class="comment">//遍历的位置</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerCollegeIterator</span><span class="params">(Department[] department)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departments = departments;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是否还有下一个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (position &gt;= departments.length || departments[position] == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Department department = departments[position];</span><br><span class="line">        position += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">return</span> department;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//删除的方法，默认空实现</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoColleageIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Department&gt; departmentList;<span class="comment">//信息工程学院是以List方式存放系</span></span><br><span class="line">    <span class="keyword">int</span> index = -<span class="number">1</span>;<span class="comment">//索引</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoColleageIterator</span><span class="params">(List&lt;Department&gt; departmentList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.departmentList = departmentList;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//判断list中还有没有下一个元素</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (index &gt;=departmentList.size()-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            index += <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> departmentList .get(index);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">remove</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">College</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加系的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(String name,String desc)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//增加一个迭代器，遍历</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ComputerCollege</span> <span class="keyword">implements</span> <span class="title">College</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Department[] departments ;</span><br><span class="line">    <span class="keyword">int</span> numOfDepartment = <span class="number">0</span>;<span class="comment">//保存当前数组的对象个数</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">ComputerCollege</span><span class="params">()</span></span>&#123;</span><br><span class="line">        departments = <span class="keyword">new</span> Department[<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">        addDepartment(<span class="string">"Java专业"</span>,<span class="string">"Java专业"</span>);</span><br><span class="line">        addDepartment(<span class="string">"PHP专业"</span>,<span class="string">"PHP专业"</span>);</span><br><span class="line">        addDepartment(<span class="string">"大数据专业"</span>,<span class="string">"大数据专业"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"计算机学院"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Department department = <span class="keyword">new</span> Department(name, desc);</span><br><span class="line">        departments[numOfDepartment ] = department ;</span><br><span class="line">        numOfDepartment  += <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> ComputerCollegeIterator(departments );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">InfoCollege</span> <span class="keyword">implements</span> <span class="title">College</span></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    List&lt;Department&gt; departmentList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">InfoCollege</span><span class="params">()</span></span>&#123;</span><br><span class="line">        departmentList = <span class="keyword">new</span> ArrayList&lt;Department&gt;();</span><br><span class="line"></span><br><span class="line">        addDepartment(<span class="string">"信息安全专业"</span>,<span class="string">"信息安全专业"</span>);</span><br><span class="line">        addDepartment(<span class="string">"网络安全专业"</span>,<span class="string">"网络安全专业"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"信息工程学院"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addDepartment</span><span class="params">(String name, String desc)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Department department = <span class="keyword">new</span> Department(name, desc);</span><br><span class="line">        departmentList .add(department);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Iterator <span class="title">createIterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InfoColleageIterator(departmentList);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">OutPutImpl</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//学院集合</span></span><br><span class="line">    List&lt;College&gt; collegeList;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">OutPutImpl</span><span class="params">(List&lt;College&gt; collegeList)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.collegeList = collegeList;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//遍历所有学院，然后再调用printDepartment  输出各个学院的系</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printCollege</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//从collegeList中取出所有学院</span></span><br><span class="line">        Iterator&lt;College&gt; iterator = collegeList.iterator();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (iterator .hasNext())&#123;</span><br><span class="line">            College college = iterator.next();</span><br><span class="line">            System.out.println(<span class="string">"===="</span>+college.getName() +<span class="string">"======="</span>);</span><br><span class="line">            printDepartment(college.createIterator());</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出 学院输出系</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printDepartment</span><span class="params">(Iterator iterator)</span></span>&#123;</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Department  d = (Department) iterator.next();</span><br><span class="line">            System.out.println(d.getName());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Client</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建学院</span></span><br><span class="line">        List&lt;College&gt; collegeList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        ComputerCollege computerCollege = <span class="keyword">new</span> ComputerCollege();</span><br><span class="line">        InfoCollege infoCollege  = <span class="keyword">new</span> InfoCollege();</span><br><span class="line"></span><br><span class="line">        collegeList.add(computerCollege);</span><br><span class="line">        collegeList.add(infoCollege);</span><br><span class="line"></span><br><span class="line">        OutPutImpl outPutImpl = <span class="keyword">new</span> OutPutImpl(collegeList);</span><br><span class="line">        outPutImpl.printCollege();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="4-17-3、迭代器模式在集合应用的源码分析"><a href="#4-17-3、迭代器模式在集合应用的源码分析" class="headerlink" title="4.17.3、迭代器模式在集合应用的源码分析"></a>4.17.3、迭代器模式在集合应用的源码分析</h3><ol>
<li>JDK的ArrayList集合中就用使用了迭代器模式</li>
</ol>
<h3 id="4-17-4、迭代器模式的注意事项和细节"><a href="#4-17-4、迭代器模式的注意事项和细节" class="headerlink" title="4.17.4、迭代器模式的注意事项和细节"></a>4.17.4、迭代器模式的注意事项和细节</h3><p><strong>优点</strong></p>
<ol>
<li>提供一个统一的方法遍历对象，客户不用再考虑聚合的类型，使用一种方法就可以遍历对象了。</li>
<li>隐藏了聚合的内部结构，客户端要遍历聚合的时候只能取到迭代器，而不会知道聚合的具体组成。</li>
<li>提供了一种设计思想，就是一个类应该只有一个引起变化的原因（叫做单一责任原则）。聚合类中，我们把迭代器分开，就是要把管理对象集合和遍历对象集合的责任分开，这样一来就集合改变的话，只影响到聚合对象。而如果遍历方式改变的话，只影响到迭代器。</li>
<li>当要展示一组相似对象，或者遍历一组相同对象时使用，适合用到迭代器模式。</li>
</ol>
<p><strong>缺点</strong></p>
<ol>
<li>每个聚合对象都要一个迭代器，会生成多个迭代器不好管理。</li>
</ol>
]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
</search>
