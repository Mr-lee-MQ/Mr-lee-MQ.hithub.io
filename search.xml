<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>CSS3</title>
    <url>/Mr-lee-MQ.hithub.io/2020/07/15/CSS3/</url>
    <content><![CDATA[<h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS<a id="more"></a></h1><h2 id="发展史"><a href="#发展史" class="headerlink" title="发展史"></a>发展史</h2><ul>
<li>CSS1.0</li>
<li>CSS2.0   DIV（块） +   CSS，HTML 和CSS结构分离的思想，网页变得简单，SEO</li>
<li>CSS2.1   浮动，定位</li>
<li>CSS3.0   圆角，阴影，动画    浏览器兼容性</li>
</ul>
<h2 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h2><ul>
<li>style    存放CSS代码<ul>
<li>选择器{ 声明1；声明2…….   }</li>
<li>单独写一个CSS文件，在HTML中用link引入</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">     我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"CSS/CSS1.css"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">h1</span>&#123;</span><br><span class="line">    <span class="attribute">color</span>: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="CSS的优势"><a href="#CSS的优势" class="headerlink" title="CSS的优势"></a>CSS的优势</h2><ul>
<li>内容和表现分离</li>
<li>网页结构表现统一，可以实现复用</li>
<li>样式十分的丰富</li>
<li>建立使用独立于html的css文件</li>
<li>利用SEO，容易被搜索引擎收录</li>
</ul>
<h2 id="CSS的四种引入方式"><a href="#CSS的四种引入方式" class="headerlink" title="CSS的四种引入方式"></a>CSS的四种引入方式</h2><p>优先级：就近原则，谁离代码近，谁的优先级越高</p>
<ul>
<li>行内样式：在元素标签中，编写一个style属性，编写样式即可</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">style</span>=<span class="string">"color: red"</span> &gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>内部样式：</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h1 &#123;</span><br><span class="line">       color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>外部样式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">     我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"CSS/CSS1.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h1&#123;</span><br><span class="line">    color: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>拓展：外部样式两种写法</p>
<ul>
<li>链接式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">     我是标题</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">"stylesheet"</span> <span class="attr">href</span>=<span class="string">"CSS/CSS1.css"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">h1&#123;</span><br><span class="line">    color: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>导入式</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="keyword">@import</span> url <span class="string">"CSS/CSS1.css"</span>;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>lalalal<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">h1&#123;</span><br><span class="line">    color: aquamarine;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="选择器"><a href="#选择器" class="headerlink" title="选择器"></a>选择器</h2><p>作用：选择页面上的某一个或者某一类元素</p>
<h3 id="基本选择器"><a href="#基本选择器" class="headerlink" title="基本选择器"></a>基本选择器</h3><p>不遵循就近原则。id选择器&gt;类选择器&gt;标签选择器</p>
<ul>
<li>标签选择器：选择同种类型标签，只能对同一类标签进行操作</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    h1&#123;</span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line">    p&#123;</span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    第一行</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span></span><br><span class="line">    第二行</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">  第三行</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>类选择器： （.class名称{})      为标签定义class    可以多个标签归类，是同一个class，可以复用。</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.one</span>&#123;</span></span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.two</span>&#123;</span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-class">.three</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"two"</span>&gt;</span></span><br><span class="line">    第二行</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"three"</span>&gt;</span></span><br><span class="line">    第三行</span><br><span class="line"><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"one"</span>&gt;</span></span><br><span class="line">    第一行</span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>id选择器：    (#id名称{})     id保证全局唯一</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#abc</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#bca</span>&#123;</span></span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="css">    <span class="selector-id">#cba</span>&#123;</span></span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"abc"</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"bca"</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"cba"</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="层次选择器"><a href="#层次选择器" class="headerlink" title="层次选择器"></a>层次选择器</h3><ul>
<li>后代选择器：在某个元素的后面。<ul>
<li>body（层次） 标签{    }</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body h1&#123;</span><br><span class="line">        color: pink;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>子选择器：只有一代（仅下一个层次）<ul>
<li>body（层次）&gt;标签{      }</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    body &gt;h1&#123;</span><br><span class="line">        color: aqua;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>相邻兄弟选择器：同一层次，只有一个（仅对下）</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span> +<span class="selector-tag">h1</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>.（class值） +  标签{         }</p>
</li>
<li><p>通用兄弟选择器：同一层次，向下所有</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>~ <span class="selector-tag">h1</span>&#123;</span></span><br><span class="line">        color: red;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>.(class值) ~  标签{        }</li>
</ul>
<h3 id="结构伪类选择器"><a href="#结构伪类选择器" class="headerlink" title="结构伪类选择器"></a>结构伪类选择器</h3><p>伪类：条件</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">选取第一个li元素</span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:first-child</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line">选取最后一个li元素</span><br><span class="line"><span class="css">        <span class="selector-tag">ul</span> <span class="selector-tag">li</span><span class="selector-pseudo">:last-child</span>&#123;</span></span><br><span class="line">            background: aqua;</span><br><span class="line">        &#125;</span><br><span class="line">选中第一个p元素</span><br><span class="line">    </span><br><span class="line"><span class="css">    <span class="selector-tag">p</span><span class="selector-pseudo">:nth-child(1)</span>&#123;</span></span><br><span class="line">       background: red;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>第一行<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>第二行<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">P</span>&gt;</span>第三行<span class="tag">&lt;/<span class="name">P</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>122o<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>2ih<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">li</span>&gt;</span>3pkom<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="属性选择器"><a href="#属性选择器" class="headerlink" title="属性选择器"></a>属性选择器</h3><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-class">.damo</span> <span class="selector-tag">a</span>&#123;</span></span><br><span class="line">            float: left;</span><br><span class="line">            display: block;</span><br><span class="line">            height: 50px;</span><br><span class="line">            width: 50px;</span><br><span class="line">            border-radius: 10px;</span><br><span class="line">            background: aquamarine;</span><br><span class="line">            text-align: center;</span><br><span class="line">            color: pink;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            margin-right: 5px;</span><br><span class="line">            font: bold 20px/52px Arial;</span><br><span class="line">        &#125;</span><br><span class="line">        /* 属性值，属性值 = 属性值（正则）</span><br><span class="line">        =绝对等于</span><br><span class="line">        *=包含这个元素</span><br><span class="line">        ^=以这个开头</span><br><span class="line">        $=以这个结尾</span><br><span class="line">         */</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        /*</span><br><span class="line">        存在id属性的元素   a[]&#123;&#125;*/</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id]</span>&#123;</span></span><br><span class="line">            background: aqua;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*id=first的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[id=first]</span>&#123;</span></span><br><span class="line">            background: red;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*class中有links的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[class*=<span class="string">"links"</span>]</span>&#123;</span></span><br><span class="line">            background: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*选中href中以http开头的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href^=http]</span>&#123;</span></span><br><span class="line">            background: cornflowerblue;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="comment">/*选中href中以为jpg结尾的元素*/</span></span></span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-attr">[href$=jpg]</span>&#123;</span></span><br><span class="line">            background: cyan;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"damo"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://www.baidu.com"</span><span class="attr">class</span>=<span class="string">"links check-menu-item first"</span><span class="attr">id</span>=<span class="string">"first"</span>&gt;</span>1<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"http://blog.kuangstudy.com"</span><span class="attr">class</span>=<span class="string">"links item active"</span><span class="attr">target</span>=<span class="string">"_blank"</span><span class="attr">title</span>=<span class="string">"text"</span>&gt;</span>2<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/123.html"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>3<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/123.png"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>4<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"images/123.jpg"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>5<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abc"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>6<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/a.pdf"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>7<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/abc.pdf"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>8<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abc.doc"</span><span class="attr">class</span>=<span class="string">"links item"</span>&gt;</span>9<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"abcd.doc"</span><span class="attr">class</span>=<span class="string">"links item last"</span>&gt;</span>10<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="美化网页元素"><a href="#美化网页元素" class="headerlink" title="美化网页元素"></a>美化网页元素</h2><h3 id="为什么要美化网页"><a href="#为什么要美化网页" class="headerlink" title="为什么要美化网页"></a>为什么要美化网页</h3><ul>
<li>有效的传递页面信息</li>
<li>美化页面，页面漂亮，才能吸引用户</li>
<li>凸显页面主题</li>
<li>提高用户的体验</li>
</ul>
<p>span标签:重点突出的字，用span套起来。</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Title<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#sp</span> &#123;</span></span><br><span class="line">            font-size: 20px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">欢迎学习<span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"sp"</span>&gt;</span>JAVA<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="字体样式"><a href="#字体样式" class="headerlink" title="字体样式"></a>字体样式</h3><ul>
<li>font-family: “Adobe 楷体 Std R”;       字体风格</li>
<li>font-size: 20px;        字号</li>
<li>font-weight: 100;      字体粗细</li>
<li>color: aqua;          字体颜色</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">       body&#123;</span><br><span class="line">           font-family: "Adobe 楷体 Std R";</span><br><span class="line">           font-size: 20px;</span><br><span class="line">           &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.zw</span>&#123;</span></span><br><span class="line">          color: aqua;</span><br><span class="line">            font-weight: 100;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>这是标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"zw"</span>&gt;</span>正文第一段<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本样式"><a href="#文本样式" class="headerlink" title="文本样式"></a>文本样式</h3><ul>
<li><p>颜色   color</p>
<ul>
<li>单词</li>
<li>RGB  0~F</li>
<li>RGBA     A：透明度   0~1</li>
</ul>
</li>
<li><p>对齐的方式   text-align   </p>
<ul>
<li>center    排版，居中</li>
</ul>
</li>
<li><p>首行缩进</p>
<ul>
<li>text-indent：2em；  段落首行缩进2字母    </li>
</ul>
</li>
<li><p>行高</p>
<ul>
<li>hight    块的高度 </li>
<li>line-height     行高</li>
<li>块的高度和行高相同，就可以上下居中</li>
</ul>
</li>
<li><p>装饰  text-decoration</p>
<ul>
<li>下划线    underline</li>
<li>中划线     line-through</li>
<li>上划线      overline</li>
<li>超链接去下划线      a   { text-decoration :    none}</li>
</ul>
</li>
<li><p>文本图片水平对齐    参照物 a，b</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line">    a,b&#123;</span><br><span class="line"><span class="css">        <span class="selector-tag">vertical-align</span><span class="selector-pseudo">:middle</span></span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="文本阴影和超链接伪类"><a href="#文本阴影和超链接伪类" class="headerlink" title="文本阴影和超链接伪类"></a>文本阴影和超链接伪类</h3><ul>
<li>超链接去下划线      </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-decoration：none            </span><br><span class="line">color:#000;</span><br></pre></td></tr></table></figure>

<ul>
<li>鼠标悬浮状态</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line">	<span class="attribute">color</span>:orange;</span><br><span class="line">	<span class="attribute">font-size</span>:<span class="number">50px</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>鼠标按住未释放的状态</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:green;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:<span class="number">#ff008a</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>阴影颜色(阴影颜色，水平偏移，垂直偏移，阴影半径)</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">text-shadow:#3cc7f5 10px 10px  2px</span><br></pre></td></tr></table></figure>

<h3 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h3><ul>
<li>去掉列表前的点</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">list-style</span>: <span class="selector-tag">none</span>	去掉原点</span><br><span class="line">			<span class="selector-tag">circle</span>	空心圆</span><br><span class="line">			<span class="selector-tag">decimal</span>	数字</span><br><span class="line">			<span class="selector-tag">square</span>	正方形</span><br></pre></td></tr></table></figure>

<h3 id="背景图像应用及渐变"><a href="#背景图像应用及渐变" class="headerlink" title="背景图像应用及渐变"></a>背景图像应用及渐变</h3><ul>
<li>背景图片</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:url("</span>    ");图片地址</span><br><span class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:repeat-x</span>    在<span class="selector-tag">x</span>轴上平铺</span><br><span class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:repeat-y</span>	  在<span class="selector-tag">y</span>轴上平铺</span><br><span class="line"><span class="selector-tag">background-repeat</span><span class="selector-pseudo">:none-repeat</span> 不平铺</span><br></pre></td></tr></table></figure>

<ul>
<li>颜色，图片，图片位置</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background</span>: <span class="selector-tag">red</span> <span class="selector-tag">url</span>("    ") 250<span class="selector-tag">px</span>,100<span class="selector-tag">px</span> <span class="selector-tag">no-repeat</span></span><br></pre></td></tr></table></figure>

<ul>
<li>渐变</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">background-color</span>:<span class="selector-id">#21D4FD</span>;</span><br><span class="line"><span class="selector-tag">background-image</span><span class="selector-pseudo">:linear-gradient(19deg</span>,<span class="selector-id">#21D4FD</span> 0%，<span class="selector-id">#B721FF</span> 100%);</span><br></pre></td></tr></table></figure>

<h2 id="盒子模型"><a href="#盒子模型" class="headerlink" title="盒子模型"></a>盒子模型</h2><ul>
<li><p>#box   {  }</p>
</li>
<li><p>margin：外边距  （body有默认的外边距）</p>
</li>
<li><p>padding：内边距</p>
</li>
<li><p>border：边框      border：1px,solid,red;</p>
<ul>
<li>边框的粗细（width）</li>
<li>边框的样式（solid虚线      deshed实线）</li>
<li>边框的颜色</li>
</ul>
</li>
</ul>
<h3 id="内外边距及div居中"><a href="#内外边距及div居中" class="headerlink" title="内外边距及div居中"></a>内外边距及div居中</h3><p>盒子的计算方式：margin + border + padding + 内容宽度</p>
<ul>
<li>内外边距   上右下左（顺时针）</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">padding</span><span class="selector-pseudo">:0</span> 0 0 0;(上右下左)</span><br><span class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> 0 0 0;</span><br></pre></td></tr></table></figure>

<ul>
<li>div居中</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">margin</span><span class="selector-pseudo">:0</span> <span class="selector-tag">aoto</span>;   居中</span><br></pre></td></tr></table></figure>

<p>要求：块元素，块元素有固定的宽度</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&lt;div style="width: 50px;</span><br><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">block</span>;     </span><br><span class="line"><span class="selector-tag">text-align</span>: <span class="selector-tag">center</span>"&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure>



<h3 id="圆角边框"><a href="#圆角边框" class="headerlink" title="圆角边框"></a>圆角边框</h3><p>4个角</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">            <span class="attribute">border</span>: <span class="number">1px</span> solid red;</span><br><span class="line">            <span class="attribute">border-radius</span>: <span class="number">50px</span> <span class="number">20px</span> <span class="number">10px</span> <span class="number">5px</span>;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p>左上右上      右下左下（主次对角线）顺时针方向</p>
<ul>
<li>圆： border-radius: 50px                      圆角   =   半径<ul>
<li>100*100 则四个角设置为50；</li>
</ul>
</li>
</ul>
<h3 id="阴影"><a href="#阴影" class="headerlink" title="阴影"></a>阴影</h3><ul>
<li>box-shadow:10px    10px    100px    yellow;</li>
</ul>
<h2 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h2><ul>
<li>标准文档流</li>
</ul>
<p>块级元素：独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">h1~h6    p     div  列表</span><br></pre></td></tr></table></figure>

<p>行内元素：不独占一行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">span   a    img</span><br></pre></td></tr></table></figure>

<p>行内元素可以被包含在块级元素中。</p>
<ul>
<li><p>display</p>
<ul>
<li>block：    块元素</li>
<li>inline       行内元素</li>
<li>inline-block     是块元素，但可以内联，在一行    </li>
<li>none     </li>
</ul>
</li>
<li><p>浮动     float</p>
</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">float</span>: <span class="selector-tag">right</span>;</span><br><span class="line"><span class="selector-tag">float</span>: <span class="selector-tag">left</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>clear</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:right</span>;      右侧不允许有浮动元素</span><br><span class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:left</span>;       左侧不允许有浮动元素</span><br><span class="line"><span class="selector-tag">clear</span><span class="selector-pseudo">:both</span>;       两侧都不允许有</span><br></pre></td></tr></table></figure>

<h3 id="父级边框塌陷问题-解决方案："><a href="#父级边框塌陷问题-解决方案：" class="headerlink" title="父级边框塌陷问题    解决方案："></a>父级边框塌陷问题    解决方案：</h3><ul>
<li>增加父级元素的高度</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span>&#123;</span><br><span class="line">    <span class="attribute">bored</span>:<span class="number">1px</span> <span class="number">#000</span> solid;</span><br><span class="line">    <span class="attribute">height</span>:<span class="number">800px</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>增加一个空的div标签，清除浮动</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">&lt;div class="clear"&gt;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.clear</span>&#123;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">    <span class="attribute">margin</span>:<span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>:<span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>在父级元素中加一个   overflow（自动溢出）<ul>
<li>hidden   隐藏</li>
</ul>
</li>
<li>父类增加一个伪类：after</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-id">#father</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line">	<span class="attribute">content</span>:<span class="string">''</span>;</span><br><span class="line">    <span class="attribute">display</span>:block;</span><br><span class="line">    <span class="attribute">clear</span>:both;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="小结："><a href="#小结：" class="headerlink" title="小结："></a>小结：</h3><ul>
<li>浮动元素后面加空div</li>
</ul>
<p>简单，代码中尽量避免空div</p>
<ul>
<li>设置父级元素的高度</li>
</ul>
<p>简单，元素假设有了固定的高度，就会被限制</p>
<ul>
<li>overflow</li>
</ul>
<p>简单，下拉的一些场景避免使用</p>
<ul>
<li>父级添加一个伪类：after（推荐）</li>
</ul>
<p>写法稍微复杂，但是没有缺点</p>
<h3 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h3><ul>
<li>display</li>
</ul>
<p>方向不可控制</p>
<ul>
<li>float</li>
</ul>
<p>浮动起来会脱离标准文档流</p>
<h2 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h2><h3 id="相对定位"><a href="#相对定位" class="headerlink" title="相对定位"></a>相对定位</h3><p>position:relative;</p>
<ul>
<li>相对于自己原来的位置进行偏移,仍然在标准文档流中。原来的位置会被保留。</li>
</ul>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">top</span><span class="selector-pseudo">:-20px</span>;</span><br><span class="line"><span class="selector-tag">left</span><span class="selector-pseudo">:20px</span>;</span><br><span class="line"><span class="selector-tag">bottom</span><span class="selector-pseudo">:-10px</span>;</span><br><span class="line"><span class="selector-tag">right</span><span class="selector-pseudo">:20px</span>;</span><br></pre></td></tr></table></figure>

<figure class="highlight"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">position</span><span class="selector-pseudo">:relative</span>;   <span class="comment">/*相对定位：上下左右*/</span></span><br><span class="line"></span><br><span class="line">&lt;<span class="selector-tag">style</span>&gt;</span><br><span class="line">        <span class="selector-tag">body</span>&#123;</span><br><span class="line">           <span class="attribute">padding</span>:<span class="number">20px</span>;</span><br><span class="line">       &#125;</span><br><span class="line">        <span class="selector-tag">div</span>&#123;</span><br><span class="line">            <span class="attribute">padding</span>: <span class="number">5px</span>;</span><br><span class="line">            <span class="attribute">margin</span>: <span class="number">10px</span>;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0000ff</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#first</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0000ff</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: aqua;</span><br><span class="line">            <span class="attribute">position</span>:relative;   <span class="comment">/*相对定位：上下左右*/</span></span><br><span class="line">            <span class="attribute">top</span>:-<span class="number">20px</span>;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#second</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0000ff</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: cyan;</span><br><span class="line">            <span class="attribute">position</span>:relative;</span><br><span class="line">            <span class="attribute">left</span>:<span class="number">20px</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="selector-id">#third</span>&#123;</span><br><span class="line">            <span class="attribute">border</span>:<span class="number">1px</span> solid <span class="number">#0000ff</span>;</span><br><span class="line">            <span class="attribute">background-color</span>: antiquewhite;</span><br><span class="line">        &#125;</span><br><span class="line">    &lt;/style&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;<span class="selector-tag">body</span>&gt;</span><br><span class="line">&lt;div id="father"&gt;</span><br><span class="line">    &lt;div id="first"&gt;第一个盒子&lt;/div&gt;</span><br><span class="line">    &lt;div id="second"&gt;第二个盒子&lt;/div&gt;</span><br><span class="line">    &lt;div id="third"&gt;第三个盒子&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line">&lt;/body&gt;</span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/07/15/CSS3/sp200723_182303.png" alt></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="css">        <span class="selector-id">#box</span>&#123;</span></span><br><span class="line">            border: 1px solid red;</span><br><span class="line">            height: 300px;</span><br><span class="line">            width: 300px;</span><br><span class="line">            padding: 10px;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        a&#123;</span><br><span class="line">            height: 100px;</span><br><span class="line">            width: 100px;</span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-id">#ff55fa</span>;</span></span><br><span class="line">            text-align: center;</span><br><span class="line">            line-height: 100px;</span><br><span class="line">            text-decoration: none;</span><br><span class="line">            display: block;</span><br><span class="line">            color: white;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span></span><br><span class="line"><span class="css">            <span class="selector-tag">background</span>: <span class="selector-tag">rgba</span>(0, 0, 255, 0<span class="selector-class">.98</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a2</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            left: 200px;</span><br><span class="line">            top: -100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a4</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line">            right: -200px;</span><br><span class="line">            top: -100px;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="css">        <span class="selector-class">.a5</span>&#123;</span></span><br><span class="line">            position: relative;</span><br><span class="line"><span class="css">            <span class="selector-tag">right</span><span class="selector-pseudo">:-100px</span>;</span></span><br><span class="line">            top: -300px;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a1"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接一<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a2"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接二<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a3"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接三<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a4"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接四<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"a5"</span> <span class="attr">href</span>=<span class="string">"#"</span>&gt;</span>链接五<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h3><p>position:absolute</p>
<ul>
<li>定位：基于xxx定位，上下左右<ul>
<li>没有父级元素定位的前提下，相对于浏览器定位</li>
<li>假设父级元素存在定位，我们通常会相对于父级元素进行偏移</li>
<li>在父级元素范围内移动</li>
</ul>
</li>
<li>相对于父级或浏览器的位置，进行指定的偏移，绝对定位的话，他不在标准文档流中，原来的位置也不会被保留。</li>
</ul>
<h3 id="固定定位"><a href="#固定定位" class="headerlink" title="固定定位"></a>固定定位</h3><p>position:fixed;</p>
<p>元素的位置相对于浏览器窗口是固定位置。即使窗口是滚动的它也不会移动。fixed表示脱离了正常的文档流。</p>
<h3 id="z-index"><a href="#z-index" class="headerlink" title="z-index"></a>z-index</h3><p>层级:最低是0，最高无限</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">z-index:max;</span><br></pre></td></tr></table></figure>

<p>opactity:0.5      背景透明度</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>GUI</title>
    <url>/Mr-lee-MQ.hithub.io/2020/10/05/GUI/</url>
    <content><![CDATA[<h1 id="GUI编程"><a href="#GUI编程" class="headerlink" title="GUI编程"></a>GUI编程<a id="more"></a></h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><ul>
<li>窗口</li>
<li>弹窗</li>
<li>面板</li>
<li>文本框</li>
<li>列表框</li>
<li>按钮</li>
<li>图片</li>
<li>监听事件</li>
<li>鼠标事件</li>
<li>键盘事件</li>
<li>破解工具</li>
</ul>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Gui的核心技术：Swing   AWT</p>
<ul>
<li>因为界面不美观</li>
<li>需要Jre环境</li>
</ul>
<p>为何学习</p>
<ul>
<li>可以写出自己的小工具</li>
<li>工作时候，也可能需要维护swing界面，概率极小。</li>
<li>了解MVC架构，了解监听。</li>
</ul>
<h2 id="AWT"><a href="#AWT" class="headerlink" title="AWT"></a>AWT</h2><h3 id="Awt介绍"><a href="#Awt介绍" class="headerlink" title="Awt介绍"></a>Awt介绍</h3><ul>
<li><p>包含了很多类和接口。Gui：图形界面编程</p>
</li>
<li><p>元素：窗口，按钮，文本框</p>
</li>
<li><p>java.awt包</p>
</li>
</ul>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/10/05/GUI/sp201005_135135.png" alt="sp201005_135135"> </p>
<h3 id="组件和容器"><a href="#组件和容器" class="headerlink" title="组件和容器"></a>组件和容器</h3><h3 id="Frame"><a href="#Frame" class="headerlink" title="Frame"></a>Frame</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Frame.JDK。</span></span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">"我的第一个Java图像界面窗口"</span>);</span><br><span class="line">        <span class="comment">//需要设置可见性</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置窗口大小</span></span><br><span class="line">        frame.setSize(<span class="number">400</span>,<span class="number">400</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置背景颜色</span></span><br><span class="line">        frame.setBackground(<span class="keyword">new</span> Color(<span class="number">85</span>, <span class="number">159</span>, <span class="number">68</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//弹出的初始位置</span></span><br><span class="line">        frame.setLocation(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置大小固定</span></span><br><span class="line">        frame.setResizable(<span class="keyword">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//封装上面的窗口</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFrame2</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//展示多个窗口</span></span><br><span class="line">        MyFrame myFrame1 = <span class="keyword">new</span> MyFrame(<span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>, <span class="number">200</span>, Color.blue);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">int</span> id = <span class="number">0</span>;  <span class="comment">//可能存在多个窗口，我们需要一个计数器</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span> <span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> w, <span class="keyword">int</span> h, Color color)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(<span class="string">"Myframe+"</span>+(++id));</span><br><span class="line">        setBackground(color);</span><br><span class="line">        setBound(x, y, w, h);</span><br><span class="line">        setVisble(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="面板Panel"><a href="#面板Panel" class="headerlink" title="面板Panel"></a>面板Panel</h3><p>Panel可以看成一个空间，但是不能单独存在</p>
<p>解决了关闭事件</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Panel可以看成一个空间，但是不能单独存在</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPanel</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        Panel panel = <span class="keyword">new</span> Panel();</span><br><span class="line">        <span class="comment">//设置布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">null</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//坐标</span></span><br><span class="line">        frame.setBounts(<span class="number">300</span>, <span class="number">300</span>, <span class="number">500</span>, <span class="number">500</span>);</span><br><span class="line">        frame.setbackground(<span class="keyword">new</span> Color(<span class="number">193</span>, <span class="number">161</span>, <span class="number">35</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//panel设置坐标，相对于frame</span></span><br><span class="line">        panel.setBounds(<span class="number">50</span>, <span class="number">50</span>, <span class="number">400</span>, <span class="number">400</span>);</span><br><span class="line">        panel.setBackground(newColor(<span class="number">193</span>, <span class="number">15</span>, <span class="number">60</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//frame.add(panel)</span></span><br><span class="line">        frame.add(panel);</span><br><span class="line">        </span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//监听事件，监听窗口关闭事件 System.exit(0)</span></span><br><span class="line">        <span class="comment">//适配器模式:</span></span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter)&#123;</span><br><span class="line">            <span class="comment">//窗口点击关闭的时候需要做的事情</span></span><br><span class="line">            <span class="meta">@override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowCloseing</span><span class="params">(WindowEvent e)</span></span>&#123;</span><br><span class="line">                <span class="comment">//结束程序</span></span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="布局管理器"><a href="#布局管理器" class="headerlink" title="布局管理器"></a>布局管理器</h3><ul>
<li>流式布局</li>
<li>东西南北中</li>
<li>表格布局</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//流式布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestFlowLayout</span></span>&#123;</span><br><span class="line">    <span class="function">publiic <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//组件-按钮</span></span><br><span class="line">        Button button1 = <span class="keyword">new</span> Button(<span class="string">"button1"</span>);</span><br><span class="line">        Button button2 = <span class="keyword">new</span> Button(<span class="string">"button2"</span>);</span><br><span class="line">        Button button3 = <span class="keyword">new</span> Button(<span class="string">"button3"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置流式布局</span></span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> FlowLayout());</span><br><span class="line">        frame.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayle.LEFT));</span><br><span class="line">         frame.setLayout(<span class="keyword">new</span> FlowLayout(FlowLayle.RIGHT));</span><br><span class="line">        </span><br><span class="line">        frame.setSize(<span class="number">200</span>, <span class="number">200</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加按钮</span></span><br><span class="line">        frame.add(button1);</span><br><span class="line">        frame.add(button2);</span><br><span class="line">        frame.add(button3);</span><br><span class="line">        </span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//东西南北中布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestBorderLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">"TestBorderLayout"</span>);</span><br><span class="line">        </span><br><span class="line">        Button east = <span class="keyword">new</span> Button(<span class="string">"East"</span>);</span><br><span class="line">        Button west = <span class="keyword">new</span> Button(<span class="string">"West"</span>);</span><br><span class="line">        Button south = <span class="keyword">new</span> Button(<span class="string">"South"</span>);</span><br><span class="line">        Button north = <span class="keyword">new</span> Button(<span class="string">"North"</span>);</span><br><span class="line">        Button center = <span class="keyword">new</span> Button(<span class="string">"Center"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        frame.add(east.BorderLayout.EAST);</span><br><span class="line">        frame.add(west.BorderLayout.WEST);</span><br><span class="line">        frame.add(south.BorderLayout.SOUTH);</span><br><span class="line">        frame.add(north.BorderLayout.NORTH);</span><br><span class="line">        frame.add(cencer.BorderLayout.CENCER);</span><br><span class="line">        </span><br><span class="line">        frame.setSize(<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//表格布局</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestGridLayout</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Frame frame = <span class="keyword">new</span> Frame(<span class="string">"TestGridLayout"</span>);</span><br><span class="line">        </span><br><span class="line">        Button btn1 = <span class="keyword">new</span> Button(<span class="string">"btn1"</span>);</span><br><span class="line">        Button btn2 = <span class="keyword">new</span> Button(<span class="string">"btn2"</span>);</span><br><span class="line">        Button btn3 = <span class="keyword">new</span> Button(<span class="string">"btn3"</span>);</span><br><span class="line">        Button btn4 = <span class="keyword">new</span> Button(<span class="string">"btn4"</span>);</span><br><span class="line">        Button btn5 = <span class="keyword">new</span> Button(<span class="string">"btn5"</span>);</span><br><span class="line">        Button btn6 = <span class="keyword">new</span> Button(<span class="string">"btn6"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        frame.add(btn1);</span><br><span class="line">        frame.add(btn2);</span><br><span class="line">        frame.add(btn3);</span><br><span class="line">        frame.add(btn4);</span><br><span class="line">        frame.add(btn5);</span><br><span class="line">        frame.add(btn6);</span><br><span class="line">        </span><br><span class="line">        frame.pack();<span class="comment">//java函数</span></span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br></pre></td></tr></table></figure>



<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActionEvent</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">//按下按钮，触发一些事件</span></span><br><span class="line">    Frame frame = <span class="keyword">new</span> Frame();</span><br><span class="line">    Button button = <span class="keyword">new</span> Button();</span><br><span class="line">    <span class="comment">//因为，addActionListener()需要一个ActionListener,所以我们需要构造一个ActionListener</span></span><br><span class="line">    </span><br><span class="line">    MyActionListener myActionListener = <span class="keyword">new</span> MyActionListener();</span><br><span class="line">    button.addActionListener(myActionLIstener);</span><br><span class="line">    </span><br><span class="line">    frame.add(button,BorderLayout.CENTER);</span><br><span class="line">    frame.pack();</span><br><span class="line">        </span><br><span class="line">    windowClose(frame);<span class="comment">//关闭窗口    </span></span><br><span class="line">    frame.setVisible(<span class="keyword">true</span>);  </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//关闭窗体事件</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">windowClose</span><span class="params">(Frame frame)</span></span>&#123;</span><br><span class="line">        frame.addWindowListener(<span class="keyword">new</span> WindowAdapter()) &#123;</span><br><span class="line">           <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(windowEvent e)</span></span>&#123;</span><br><span class="line">                System.exit(<span class="number">0</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListrener</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformd</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"aaa"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//两个按钮，实现一个监听</span></span><br><span class="line"><span class="comment">//开始，  停止</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestActionTwo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	Frame frame = <span class="keyword">new</span> Frame(<span class="string">"开始-停止"</span>);</span><br><span class="line">    	Button button1 = <span class="keyword">new</span> Button(<span class="string">"start"</span>);</span><br><span class="line">        Button button2 = <span class="keyword">new</span> Button(<span class="string">"stop"</span>);</span><br><span class="line">        </span><br><span class="line">        button2.setActionCommand(<span class="string">"button2-stop"</span>);</span><br><span class="line">        </span><br><span class="line">        MyMonitor myMonitor = <span class="keyword">new</span> MyMonitor();</span><br><span class="line">        </span><br><span class="line">        button1.addActionListener(myMonitor);</span><br><span class="line">        button2.addActionListener(myMonitor);</span><br><span class="line">        </span><br><span class="line">        frame.add(button1,BorderLayout.NORTH);</span><br><span class="line">        frame.add(button2,BorderLayout.SOUTH);</span><br><span class="line">        </span><br><span class="line">        frame.pack();</span><br><span class="line">        frame.setVisible(<span class="keyword">true</span>);</span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyMonitor</span> <span class="title">implement</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"按钮被点击了: msg"</span>+e.getActionCommand());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="输入框事件监听"><a href="#输入框事件监听" class="headerlink" title="输入框事件监听"></a>输入框事件监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestText01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//启动</span></span><br><span class="line">        <span class="keyword">new</span> MyFrame();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        TextField textField = <span class="keyword">new</span> TestField();</span><br><span class="line">        add(tsxtField);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//监听这个文本框输入的文字</span></span><br><span class="line">        MyActionListener2 myActionListener2 = <span class="keyword">new</span> MyActionListener2();</span><br><span class="line">        textField.addActionListener(myActionListener2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//设置替换编码</span></span><br><span class="line">        textField.setEchoChar(<span class="string">'*'</span>);</span><br><span class="line">        </span><br><span class="line">        setVIsible(<span class="keyword">true</span>);</span><br><span class="line">        pack();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyActionListener2</span> <span class="keyword">implements</span> <span class="title">ActionListener</span></span>&#123;</span><br><span class="line">    <span class="meta">@OVerride</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span></span>&#123;</span><br><span class="line">        TextField field = (TextField) e.getSource();</span><br><span class="line">        <span class="comment">//获得一些资源，返回一个对象</span></span><br><span class="line">        System.out.println(field.getText());<span class="comment">//获得输入框的文本</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="画笔"><a href="#画笔" class="headerlink" title="画笔"></a>画笔</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestPaint</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> MyPint().loadFrame();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPaint</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">loadFrame</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">600</span>, <span class="number">500</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//画笔</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//画笔，需要有颜色，画笔可以画画</span></span><br><span class="line">        g.setColor(Color.red);</span><br><span class="line">        g.drawOval(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        </span><br><span class="line">        g.fillOval(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>);<span class="comment">//实心的圆</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="鼠标监听"><a href="#鼠标监听" class="headerlink" title="鼠标监听"></a>鼠标监听</h3><p>目的：想要使用鼠标画画</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//鼠标监听事件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMouseListener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//自己的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span></span>&#123;</span><br><span class="line">    <span class="comment">//画画需要画笔，需要监听鼠标当前的位置，需要集合来存储这个点</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">MyFrame</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(title);</span><br><span class="line">        setBounds(<span class="number">200</span>, <span class="number">200</span>, <span class="number">400</span>, <span class="number">300</span>);</span><br><span class="line">        <span class="comment">//存鼠标点击的点</span></span><br><span class="line">        points = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//鼠标监听器,对于这个窗口</span></span><br><span class="line">        <span class="keyword">this</span>.addMouselistener(<span class="keyword">new</span> MymouseListener());</span><br><span class="line">        </span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//画画，监听鼠标的事件</span></span><br><span class="line">        Iterator iterator = points.iterator();</span><br><span class="line">        <span class="keyword">while</span> (iterator.hasNext())&#123;</span><br><span class="line">            Point point = (Point) iterator.next();</span><br><span class="line">            g.setColor(Color.BLUE);</span><br><span class="line">            g.fillOval(point.x, point.y, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//添加一个点到界面上</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addPaint</span><span class="params">(Point point)</span></span>&#123;</span><br><span class="line">        points.add(point);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">psint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">        <span class="comment">//画画，监听鼠标的事件</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//适配器模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">MyMouseListener</span> <span class="keyword">extends</span> <span class="title">MouseAdapter</span></span>&#123;</span><br><span class="line">        <span class="comment">//鼠标  按下，弹起，按住不放</span></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mousePressed</span><span class="params">(MouseEvent e)</span></span>&#123;</span><br><span class="line">            MyFream fream = (MyFream) e.getSource();</span><br><span class="line">            <span class="comment">//这个我们点击的时候，就会在界面上产生一个点</span></span><br><span class="line">            <span class="comment">//这个点就是鼠标的点</span></span><br><span class="line">            frame.addPaint(<span class="keyword">new</span> Point(e.getX(),e.getY()));</span><br><span class="line">            </span><br><span class="line">            fream.addPaint(<span class="keyword">new</span> Point(e.getX(),e.getY()));</span><br><span class="line">            </span><br><span class="line">            <span class="comment">//每次点击鼠标都需要重新画一遍</span></span><br><span class="line">            fream.repaint();<span class="comment">//刷新</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="键盘监听"><a href="#键盘监听" class="headerlink" title="键盘监听"></a>键盘监听</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//键</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestKeyListener</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">new</span> KeyFream();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KeyFream</span> <span class="keyword">extends</span> <span class="title">Fream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">KeyFream</span><span class="params">()</span></span>&#123;</span><br><span class="line">        setBounds(<span class="number">1</span>, <span class="number">2</span>, <span class="number">100</span>, <span class="number">100</span>);</span><br><span class="line">        setVisible(<span class="keyword">true</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">this</span>.addKeyListener(<span class="keyword">new</span> KeyAdapter)&#123;</span><br><span class="line">            <span class="comment">//键盘按下</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">keyPressed</span><span class="params">(KeyEvent e)</span></span>&#123;</span><br><span class="line">                <span class="comment">//获得键盘下的键是哪一个，当前的码</span></span><br><span class="line">                <span class="keyword">int</span> keyCode = e.getKeyCode();</span><br><span class="line">                <span class="comment">//不需要去记录这个数值，直接使用静态属性 VK_XXX</span></span><br><span class="line">                System.out.println(keyCode);</span><br><span class="line">                <span class="keyword">if</span>(keyCode == keyEvent.VK_UP)&#123;</span><br><span class="line">                    System.out.println(<span class="string">"你按下了上键"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//根据按下不同的操作，选择不同的结果</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Swing"><a href="#Swing" class="headerlink" title="Swing"></a>Swing</h2><h3 id="窗口，面板"><a href="#窗口，面板" class="headerlink" title="窗口，面板"></a>窗口，面板</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JFreamDemo</span></span>&#123;</span><br><span class="line">    <span class="comment">//init(); 初始化</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        JFream jf = <span class="keyword">new</span> JFream(<span class="string">"这是一个JFream窗口"</span>);</span><br><span class="line">        jf.setVisible(<span class="keyword">true</span>);</span><br><span class="line">        jf.setBounds(<span class="number">100</span>, <span class="number">100</span>, <span class="number">100</span>, <span class="number">200</span>);</span><br><span class="line">        jf.setBackground(Color.cyan);</span><br><span class="line">        <span class="comment">//设置文字 JLabel</span></span><br><span class="line">        JLabel label = <span class="keyword">new</span> JLabel(<span class="string">"我们来到狂神说Java节目"</span>);</span><br><span class="line">        </span><br><span class="line">        jf.add(label);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//容器实例化</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//关闭事件</span></span><br><span class="line">        jf.setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);</span><br><span class="line">        </span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//建立一个窗口</span></span><br><span class="line">        <span class="keyword">new</span> JFreamDemo().init();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言基础</title>
    <url>/Mr-lee-MQ.hithub.io/2020/06/17/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="C语言基础"><a href="#C语言基础" class="headerlink" title="C语言基础"></a>C语言基础<a id="more"></a></h1><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;                        //这是编译预处理指令</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span>                               <span class="comment">//定义主函数</span></span></span><br><span class="line"><span class="function"></span>&#123;                                        <span class="comment">//函数开始的标志</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"This is C program.\n"</span>);      <span class="comment">//输出所指定的一行信息     </span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;                            <span class="comment">//函数执行完毕时返回函数值0  </span></span><br><span class="line">&#125;                                        <span class="comment">//函数结束的标志</span></span><br></pre></td></tr></table></figure>

<ul>
<li>main是函数的名字，表示“主函数”；每一个C语言程序必须有一个main函数</li>
<li>main函数前面的int表示此函数的类型是int类型（整型），即在执行主函数后会得到一个值（即函数值），其值为整型。</li>
<li>return0；的作用是当main函数执行结束前将整数0作为函数值，返回到调用函数处。</li>
<li>函数体用{}括起来。</li>
<li>printf是C编译系统提供的函数库中的输出函数。printf函数中双引号内的字符串“This is a C program”。”安原样输出。\n是换行符，即在输出“This is a C program”后，显示屏上的光标位置移到下一行的开头。</li>
<li>每一个语句最后都有一个分号，表示语句结束。</li>
<li>.h 头文件。</li>
<li>#include&lt;stdio.h&gt;预处理指令</li>
</ul>
<p><strong>注释</strong>     </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;第一行注释</span><br><span class="line">&#x2F;&#x2F;继续注释</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;*一整块</span><br><span class="line">都是注释*&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li>在字符串中的//和/*都不作为注释的开始。而是作为字符串的一部分。</li>
</ul>
<p><strong>求两个整数之和</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a,b,sun;</span><br><span class="line">	a=<span class="number">123</span>;</span><br><span class="line">	b=<span class="number">456</span>;</span><br><span class="line">	sum=a+b;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"sum is %d \n"</span>,sum);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>比较两个整数中的较大者</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;            <span class="comment">//对被调用函数max的声明</span></span><br><span class="line">	<span class="keyword">int</span> a,b,c;</span><br><span class="line">	<span class="built_in">scanf</span>(<span class="string">"%d%d"</span>&amp;a,&amp;b);</span><br><span class="line">	c=<span class="built_in">max</span>(a,b);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"max=%d\n"</span>,c);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span></span><br><span class="line"><span class="function"></span>&#123;	</span><br><span class="line">	<span class="keyword">int</span> z;</span><br><span class="line">	<span class="keyword">if</span>(x&gt;z)z=x;</span><br><span class="line">	<span class="keyword">else</span> z=y;</span><br><span class="line">	<span class="keyword">return</span> (z);			</span><br><span class="line">	&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>max(a,b)调用max函数，在调用时将a和b作为max函数的实际参数（在主函数负责传送值）的值传送给max函数中的形式参数（在子函数中负责接收值） </li>
</ul>
<p><strong>C语言程序的结构</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/06/17/C%E8%AF%AD%E8%A8%80%E5%9F%BA%E7%A1%80/sp200618_004749.png" alt></p>
<p><strong>C程序运行步骤</strong></p>
<p>编辑 源程序.c        编译目标程序.obj          编译成功转为可执行目标程序.exe文件</p>
<p><strong>求9开算术平方根</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> x=<span class="number">9</span>,y;</span><br><span class="line">	y=<span class="built_in">sqrt</span>(x); 															</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d"</span>,y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>sqrt()函数为math的一个函数。</li>
</ul>
<p><strong>数据类型及其运算</strong></p>
<ul>
<li><p>基本类型</p>
<ul>
<li><p>整型类型</p>
<ul>
<li>基本类型  int                                 2B         </li>
<li>短整型  short  int</li>
<li>长整型  long  int                           4B</li>
<li>双长整型  long  long  int</li>
<li>字符型  char                                 1B                                 char默认值为无符号的，若%u输出负数，结果异常                  （-128~127）</li>
<li>希尔型  bool           默认为0</li>
</ul>
</li>
<li><p>浮点类型</p>
<ul>
<li><p>单精度浮点型  float                        4B</p>
</li>
<li><p>双精度浮点型   double                   8B</p>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<ul>
<li><p>枚举类型enum</p>
</li>
<li><p>空类型void</p>
</li>
<li><p>派生类型</p>
<ul>
<li>指针类型 *</li>
<li>数组类型[]</li>
<li>结构体类型union</li>
<li>函数类型</li>
</ul>
</li>
</ul>
<p><strong>常量与变量</strong></p>
<ul>
<li><p>整数常量</p>
<ul>
<li>整型常量：十进制，八进制（0作为前缀）十六进制（0X或0x作为前缀）U（unsigned  无符号整数）L（long  长整数）后缀可大写，也可小写。</li>
</ul>
</li>
<li><p>实型常量</p>
<ul>
<li>小数形式： 123.123456</li>
<li>指数形式：<ul>
<li>必须包含小数点</li>
<li>指数（E或e后的数字）</li>
<li>带符号的指数是用e或E引入的（e或E后不能有小数点或小数）</li>
</ul>
</li>
</ul>
</li>
<li><p>字符常量</p>
<ul>
<li><p>一个普通的字符   ‘x’</p>
</li>
<li><p>转义字符</p>
</li>
<li><pre><code>\\              \字符
\a                \警报铃声
\b                \退格键
\f                \换页符
\n                \换行符
\r                \回车
\t                \水平制表符
\v                \垂直制表符
\ooo            \一到三位的八进制数
\xhh...            \一个或多个数字的十六进制数
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  + 字符串常量    “123”     “boy”</span><br><span class="line"></span><br><span class="line">  + 符号常量     #define  PI   3.1416                 \\注意行末没有分号</span><br><span class="line"></span><br><span class="line">+ 变量（变量名由字母，数字，下划线组成。必须是字母或下划线开头）</span><br><span class="line"></span><br><span class="line">  + C区分大小写</span><br><span class="line"></span><br><span class="line">**标识符**</span><br><span class="line"></span><br><span class="line">关键字</span><br><span class="line"></span><br><span class="line">![](sp200618_020047.png)</span><br><span class="line"></span><br><span class="line">**原，反，补码**</span><br><span class="line"></span><br><span class="line">原码-反码：   除符号位外，其他数按位取反。</span><br><span class="line"></span><br><span class="line">反码-补码：   最后一位   +1。</span><br><span class="line"></span><br><span class="line">补码-原码：   对该补码再求补码 </span><br><span class="line"></span><br><span class="line">+ 0的反码不唯一</span><br><span class="line">+ 0的补码唯一 </span><br><span class="line"></span><br><span class="line">**运算符和表达式**</span><br><span class="line"></span><br><span class="line">运算符：用来表示不同运算的符号</span><br><span class="line"></span><br><span class="line">表达式：由运算符和操作数组成的式子9&gt;5？ 100:200</span><br><span class="line"></span><br><span class="line">优先级：指当不同的运算符进行混合运算时，运算顺序由运算符的优先级决定。</span><br><span class="line"></span><br><span class="line">综合性：指运算符可以和左边的表达式结合，也可以跟右边的表达式结合</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">**运算符优先级**</span><br><span class="line"></span><br><span class="line">1.第一优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ []			数组下标							 </span><br><span class="line">+ ()             圆括号                		      </span><br><span class="line">+ .              成员选择（对象）     </span><br><span class="line">+ -&gt;            成员选择（指针）             </span><br><span class="line"></span><br><span class="line">2.第二优先级（右到左）</span><br><span class="line"></span><br><span class="line">+ －　        负号运算符                  </span><br><span class="line">+   type       强制类型转换       </span><br><span class="line">+ ++              自增运算符    </span><br><span class="line">+ －－           自减运算符</span><br><span class="line">+ ＊　　　　取值运算符</span><br><span class="line">+ &amp;                 取地址运算符</span><br><span class="line">+ ！                逻辑非运算符</span><br><span class="line">+ ~                   按位取反运算符</span><br><span class="line">+ sizeof          长度运算符</span><br><span class="line"></span><br><span class="line">3.第三优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ &#x2F;                    除</span><br><span class="line">+ ＊　　　　　乘</span><br><span class="line">+ %                    取余</span><br><span class="line"></span><br><span class="line">4.第四优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ ＋　　　　　加</span><br><span class="line">+ －　　　　　减</span><br><span class="line"></span><br><span class="line">5.第五优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ &lt;&lt;                    左移</span><br><span class="line">+ ＞＞                右移</span><br><span class="line"></span><br><span class="line">6.第六优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ ＞</span><br><span class="line">+ ＞＝</span><br><span class="line">+ ＜</span><br><span class="line">+ ＜＝</span><br><span class="line"></span><br><span class="line">7.第七优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ &#x3D;&#x3D;                    等于</span><br><span class="line">+ ！&#x3D;                  不等于</span><br><span class="line"></span><br><span class="line">8.第八优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ &amp;                      按位与</span><br><span class="line"></span><br><span class="line">9.第九优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ ^                          按位异或</span><br><span class="line"></span><br><span class="line">10.第十优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ |                          按位或</span><br><span class="line"></span><br><span class="line">11.第十一优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ &amp;&amp;                      逻辑与</span><br><span class="line"></span><br><span class="line">12.第十二优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ ||                        逻辑或</span><br><span class="line"></span><br><span class="line">13.第十三优先级（右到左）</span><br><span class="line"></span><br><span class="line">+ ？：                     条件运算符</span><br><span class="line"></span><br><span class="line">14.第十四优先级（右到左）</span><br><span class="line"></span><br><span class="line">+ &#x3D;                           赋值运算符</span><br><span class="line">+ &#x2F;&#x3D;                          除后赋值</span><br><span class="line">+ *&#x3D;                         乘后赋值</span><br><span class="line">+ %&#x3D;                        取余后赋值</span><br><span class="line">+ +&#x3D;                         加后赋值</span><br><span class="line">+ -&#x3D;                          减后赋值</span><br><span class="line">+ &lt;&lt;&#x3D;                       左移后赋值</span><br><span class="line">+ ＞＞&#x3D;                   右移后赋值</span><br><span class="line">+ &amp;&#x3D;                         按位与后赋值</span><br><span class="line">+ ^&#x3D;                         按位异或后赋值</span><br><span class="line">+ |&#x3D;                          按位或后赋值</span><br><span class="line"></span><br><span class="line">15.第十五优先级（左到右）</span><br><span class="line"></span><br><span class="line">+ ，                            逗号运算符</span><br><span class="line"></span><br><span class="line">**sizeof长度运算符和strlen（）**</span><br><span class="line"></span><br><span class="line">+ **sizeof**   操作符以字节形式给出了其操作数的存储大小。操作数的存储大小由操作数的类型决定。操作数可以是一个表达式或者括在括号里的类型名</span><br><span class="line"></span><br><span class="line">  + &#96;&#96;&#96;c</span><br><span class="line">    #include&lt;stdio.h&gt;</span><br><span class="line">    int main()</span><br><span class="line">    &#123;</span><br><span class="line">    	printf(&quot;%d&quot;,sizeof(int));                 &#x2F;&#x2F;输出为4</span><br><span class="line">    	return 0;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li>
<li><pre><code class="c"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span>
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>
<span class="function"></span>{
    <span class="keyword">int</span> a[<span class="number">50</span>];
    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,<span class="keyword">sizeof</span>(a));                  <span class="comment">//输出为200</span>
    <span class="keyword">int</span> *b = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">50</span>];

</code></pre>
</li>
</ul>
</li>
</ul>
<pre><code>    printf(&quot;%d&quot;,sizeof(*b));                  //输出为4
    return 0;

}
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">+ **strlen()**         求字符串长度</span><br><span class="line"></span><br><span class="line">+ &#96;&#96;&#96;c</span><br><span class="line">  #include&lt;stdio.h&gt;</span><br><span class="line">  #include&lt;string.h&gt;</span><br><span class="line">  int main()</span><br><span class="line">  &#123;</span><br><span class="line">  	char arr1[] &#x3D;&quot;abcdef&quot;;				&#x2F;&#x2F;字符串</span><br><span class="line">  	char arr2[] &#x3D;&#123;‘a’‘b’‘c’‘d’‘e’‘f’&#125;;  &#x2F;&#x2F;6个字符。没有\0.</span><br><span class="line">  	</span><br><span class="line">  	printf(&quot;%d\n&quot;,sizeof(arr1)); 		&#x2F;&#x2F;结果为7，arr1为数组名</span><br><span class="line">      									&#x2F;&#x2F;放进去求的是数组的总大小</span><br><span class="line">      									&#x2F;&#x2F;arr1中的字符串还包括\0。</span><br><span class="line">  	printf(&quot;%d\n&quot;,sizeof(arr2));		&#x2F;&#x2F;结果为6</span><br><span class="line">  	</span><br><span class="line">  	</span><br><span class="line">  	printf(&quot;%d\n&quot;,strlen(arr1));		&#x2F;&#x2F;结果为6，\0不统计</span><br><span class="line">  	printf(&quot;%d\n&quot;,strlen(arr2));		&#x2F;&#x2F;结果为6，没有\0。</span><br><span class="line">  	return 0;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></code></pre><p><strong>算数运算符和表达式</strong>     （+ -   *   /    %）</p>
<ul>
<li><p>“%”运算符两侧的运算分量<strong>必须是整型数据</strong>，且<strong>运算结果的正负号与“%”左边的运算分量</strong>相同</p>
</li>
<li><p>＊　／　％的优先级高于+  -  ，结合性均为从左到右。</p>
</li>
<li><p>＋　－　*    /     运算的两个数中，如果其中一个为实数，则结果是double型       （整数  int    实数  float（单精度）  double（双精度），字符   char）</p>
</li>
<li><p>当“/”的两个运算分量均为整数时，计算结果也必须为整数。</p>
</li>
<li><pre><code class="c"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span>
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>
<span class="function"></span>{
    <span class="keyword">int</span> x;
    <span class="keyword">double</span> y;
    x=<span class="number">20</span>/<span class="number">3</span>*<span class="number">3</span>;
    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);                <span class="comment">//20/3=6   6*3=18</span>
    x=<span class="number">20</span>/<span class="number">3.0</span>*<span class="number">3</span>;                        <span class="comment">//出现小数点默认double类型  30/6=6.66                                        //6.66*3=19.9=20    四舍五入</span>
    <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,x);                <span class="comment">//以%d输出结果仍为整数</span>
    y=<span class="number">20</span>/<span class="number">3.0</span>*<span class="number">3</span>;                        <span class="comment">//默认为double</span>
    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>,y);                <span class="comment">//%f输出20.000000</span>
    y=<span class="number">20</span>/<span class="number">3</span>*<span class="number">3</span>;
    <span class="built_in">printf</span>(<span class="string">"%f\n"</span>,y);                <span class="comment">//18.000000</span>
}
&lt;!--￼<span class="number">8</span>--&gt;

**逻辑与**

当逻辑与前面为假时，逻辑与后面的表达式被短路

**逻辑或**

当逻辑或前面的值为真时，逻辑或后的表达式被短路

逻辑非

！真=假

！假=真

！<span class="number">0</span> = <span class="number">1</span>
</code></pre>
</li>
</ul>
<p><strong>赋值运算符和表达式</strong>   </p>
<ul>
<li>赋值表达式的格式为：变量=表达式。</li>
<li>赋值表达式的值等于右边表达式的值，而结果的类型由左边变量的类型决定。</li>
<li>a+=b+c等价于a=a+(b+c)             a-=b+c等价于a=a-(b+c)               a* =b+c等价于 a= a*(b+c)</li>
</ul>
<p><strong>条件运算符和表达式</strong></p>
<p>“? :  “   是C语言里面唯一的一个三目运算符。</p>
<p>“表达式1 ？表达式2：表达式3”，先计算表达式1的值，若为真则返回表达式2的值作为整个条件表达式的值，否则返回条件表达式3的值。</p>
<p><strong>自增自减运算符</strong></p>
<p>++i ：先自增1，在使用i</p>
<p>i++ ：先使用i，再自增1</p>
<p><strong>逗号表达式</strong></p>
<p>逗号既可以作为函数参数列表的分隔符，也可以作为运算符。</p>
<ul>
<li>逗号表达式格式为：表达式1，表达式2，表达式3……….表达式n；</li>
<li>结合性从左到右，整个函数表达式的值就是表达式n（即为最后一个表达式的值）；</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> a =(a=<span class="number">100</span>,<span class="number">20</span>,<span class="number">200</span>);</span><br><span class="line">	<span class="keyword">int</span> b =(b=<span class="number">100</span>,<span class="number">20</span>,b+<span class="number">300</span>);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,a);				<span class="comment">//200</span></span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%d\n"</span>,b);				<span class="comment">//400</span></span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>*<em>不同数据类型间的混合运算 *</em></p>
<p><strong>自动类型转换</strong></p>
<p>如果一个运算符两侧的数据类型不同，则先自动进行类型转换，使二者成为一种数据类型，然后进行运算。整型，实型，字符型，数据间可以进行混合运算。规律为：</p>
<ul>
<li>+、-、*、/运算的两个数中有一个数为float或double型，结果是 double 型，因为系统将所有 float 型数据都先转换为 double 型，然后进行运算。</li>
<li>如果int型与float或double型数据进行运算， 先把int型和float型数据转换为 double 型，然后进行运算，结果是 double 型。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> i=<span class="number">3</span>,j;</span><br><span class="line">	<span class="keyword">float</span> f=<span class="number">2.5</span>;</span><br><span class="line">	<span class="keyword">double</span> d =<span class="number">7.5</span>;</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">"%1f"</span>,<span class="number">10</span>+<span class="string">'a'</span>+i*f-d/<span class="number">3</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>进行 10+′a′的运算，′a′的值是整数 97，运算结果为 107。</li>
<li>由于“ * ”比“+”优先级高，先进行 i*f 的运算。先将 i 与 f 都转成 double 型，运算结果为 7.5，double 型。</li>
<li>整数 107 与ｉ*ｆ的积相加。先将整数 107 转换成双精度数，相加结果为 114.5，double 型。</li>
<li>进行d/3 的运算， 先将3 转换成 double 型， d/3 结果为 2.5， double型。</li>
<li>将10+′a′+i*f的结果114.5与d/3的商2.5相减， 结果为112.0，double 型。</li>
</ul>
<p><strong>强制类型转换</strong></p>
<p>（类型名）（表达式）</p>
<p>（int）（x+y）         将x+y的值转换为int</p>
<p>（int）x+y                  将x的值转换为int，然后再加上y</p>
<p><strong>C语句</strong></p>
<ul>
<li>if（）…else…（条件语句）</li>
<li>for（）…（循环语句）</li>
<li>while（）…（循环语句）</li>
<li>do…while  ()   (循环语句)</li>
<li>continue（结束本次循环语句）</li>
<li>break（中止执行switch或循环语句）</li>
<li>switch（多分支选择结构）</li>
<li>return（从函数返回语句）</li>
</ul>
<p><strong>函数调用语句</strong>   </p>
<p>函数调用语句由一个函数调用加一个分号构成。</p>
<p>其中printf(“This is a C statement.”)是一个函数调用，加一个分号成为一个语句。</p>
<p><strong>表达式语句</strong></p>
<p>表达式语句是由一个表达式加一个分号构成，最典型的是由赋值语句表达式构成一个赋值语句。</p>
<p><strong>；   只有一个分号的语句叫空语句</strong>。</p>
<p><strong>输入输出</strong></p>
<p>C语言本身不提供输入输出语句，提供输入输出语句的是C标准函数库即（#include&lt;stdio.h&gt;）</p>
<p>​        <strong>printf函数</strong></p>
<ul>
<li><p>printf（格式控制，输出列表）</p>
</li>
<li><p>“格式控制”是对双引号括起来的一个字符串，称为格式控制字符串，简称格式字符串。</p>
<ul>
<li>格式声明。格式声明由“%”和格式字符组成。作用是将输出的数据转换为指定的格式后输出。</li>
<li>普通字符。普通字符即需要在输出是原样输出的字符。</li>
</ul>
</li>
<li><p>输出列表是程序需要输出的一些数据，可以是常量，变量或表达式。</p>
<ul>
<li>%d   十进制整数</li>
<li>%o   八进制整数</li>
<li>%x   十六进制整型</li>
<li>%f    单精度实型，默认小数点后6位，超出6位，四舍五入</li>
<li>%lf   双精度类型     最多15位有效数字</li>
<li>%c   输出一个字符</li>
<li>%s   输出一个字符串</li>
<li>%u    无符号十进制形式输出整数</li>
</ul>
</li>
<li><p><strong>宽度精度控制输出</strong></p>
<ul>
<li><pre><code>#include&lt;stdio.h&gt;
int main()
{
    int a =1234;        //四个宽度
    printf(&quot;%d,%2d,%6d&quot;,a,a,a);        //1234,1234,  1234
}
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">  + %**2**d  宽度     </span><br><span class="line">    + 实际宽度&gt;所求宽度         按原值输出</span><br><span class="line">    + 实际宽度&lt;所求宽度        原值前补空格</span><br><span class="line">    + %**n.m**f   宽度加精度。    m：宽度     n：精度     %.**mf**</span><br><span class="line">    + 先求精度再看宽度</span><br><span class="line"></span><br><span class="line">+ **scanf函数**</span><br><span class="line"></span><br><span class="line">  +  scanf 函数中的格式控制后面应当是变量地址，而不是变量名。</span><br><span class="line">  + 如果在格式控制字符串中除了格式声明以外还有其他字符，则在输入数据时在对应的位置上应输入与这些字符相同的字符。</span><br><span class="line">  + 在用“％c”格式声明输入字符时，空格字符和“转义字符”中的字符都作为有效字符输入。</span><br><span class="line">  + 在输入数值数据时，如输入空格、回车、Tab 键或遇非法字符(不属于数值的字符)，认为该数据结束。</span><br><span class="line"></span><br><span class="line">+ **putchar函数**</span><br><span class="line"></span><br><span class="line">  + putchar 函数既可以输出可显示字符，也可以输出控制字符和转义字符。putchar(c)中的 c 可以是字符常量、整型常量、字符变量或整型变量。（其值在ASCII码之内）</span><br><span class="line"></span><br><span class="line">  + &#96;&#96;&#96;c</span><br><span class="line">    #include&lt;stdio.h&gt;</span><br><span class="line">    int main()</span><br><span class="line">    &#123;</span><br><span class="line">    	char a&#x3D; &#39;B&#39;,b&#x3D;&#39;O&#39;,c&#x3D;&#39;Y&#39;;    &#x2F;&#x2F;定义3个字符常量并初始化</span><br><span class="line">    	putchar(a);					&#x2F;&#x2F;向显示器输出字符B</span><br><span class="line">    	putchar(b);					&#x2F;&#x2F;向显示器输出字符O</span><br><span class="line">    </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></code></pre></li>
</ul>
</li>
<li><p><strong>getchar函数</strong></p>
<ul>
<li><p>函数没有参数</p>
</li>
<li><p>函数的值就是从输入设备得到的字符。</p>
</li>
<li><p>只能接收一个字符。</p>
</li>
<li><pre><code class="c"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span>
<span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>
<span class="function"></span>{

    <span class="keyword">int</span> a=<span class="number">66</span>,b=<span class="number">79</span>,c=<span class="number">89</span>;
    <span class="built_in">putchar</span>(a);         <span class="comment">//ASCII码为字母B</span>
    <span class="built_in">putchar</span>(b);            <span class="comment">//ASCII码为字母O</span>
    <span class="built_in">putchar</span>(c);            <span class="comment">//ASCII码为字母Y</span>
    <span class="built_in">putchar</span> (<span class="string">'\n'</span>);
    <span class="keyword">return</span> <span class="number">0</span>;
}

&lt;!--￼<span class="number">12</span>--&gt;
<span class="keyword">if</span>（表达式） 语句<span class="number">1</span>
&lt;!--￼<span class="number">13</span>--&gt;
<span class="keyword">if</span>（表达式）    语句<span class="number">1</span>
    <span class="keyword">else</span> 语句<span class="number">2</span>
&lt;!--￼<span class="number">14</span>--&gt;
<span class="keyword">if</span>(表达式 <span class="number">1</span>) 语句 <span class="number">1</span>
<span class="keyword">else</span> <span class="keyword">if</span>(表达式 <span class="number">2</span>) 语句 <span class="number">2</span>
<span class="keyword">else</span> <span class="keyword">if</span>(表达式 <span class="number">3</span>) 语句 <span class="number">3</span>  
 
<span class="keyword">else</span> <span class="keyword">if</span>(表达式 m) 语句 m
<span class="keyword">else</span> 语句 m+<span class="number">1</span>
&lt;!--￼<span class="number">15</span>--&gt;
<span class="keyword">if</span>()
    <span class="keyword">if</span>() 语句 <span class="number">1</span>                 <span class="comment">//内嵌 if</span>
    <span class="keyword">else</span> 语句 <span class="number">2</span>
<span class="keyword">else</span>
    <span class="keyword">if</span>() 语句 <span class="number">3</span>                 <span class="comment">//内嵌 if</span>
    <span class="keyword">else</span> 语句 <span class="number">4</span>

&lt;!--￼<span class="number">16</span>--&gt;
<span class="keyword">switch</span>(表达式)
{
  <span class="keyword">case</span> 常量 <span class="number">1</span>: 语句 <span class="number">1</span>
  <span class="keyword">case</span> 常量 <span class="number">2</span>: 语句 <span class="number">2</span> 
  <span class="keyword">case</span> 常量 n: 语句 n
  <span class="keyword">default</span>: 语句 n+<span class="number">1</span> 
}</code></pre>
</li>
<li><p>和最多一个以 default 开头的行</p>
</li>
<li><p>可以没有 default 标号</p>
</li>
<li><p>每一个 case 常量必须互不相同</p>
</li>
<li><p>连带向下，可用break终止</p>
</li>
<li><p>最后一个 case 子句(今为 default 子句)中可不加 break 语句。</p>
</li>
</ul>
</li>
<li><p><strong>while循环语句</strong></p>
<ul>
<li>while（表达式） 语句</li>
<li>表达式为真时，则执行 while 循环语句。while 循环的特点是先判断条件表达式，后执行循环体语句</li>
</ul>
</li>
<li><p><strong>do…while语句</strong></p>
<ul>
<li>do<br>语句<br>while(表达式);</li>
<li>先无条件地执行循环体，然后判断循环条件是否成立。 <strong>循环至少执行 1 次</strong></li>
</ul>
</li>
<li><p><strong>for循环</strong>                    （while能实现的，for均可实现）</p>
<ul>
<li>for(表达式 1；表达式 2；表达式 3）<ul>
<li>表达式 1: 设置初始条件，只执行一次。可以为零个、一个或多个变量设置初值。</li>
<li>表达式 2: 是循环条件表达式，用来判定是否继续循环。在每次执行循环体前先执行此表达式，决定是否继续执行循环。</li>
<li>表达式 3: 作为循环的调整，例如使循环变量增值，它是在执行完循环体后才进行的。 一般用于知道循环次数用 for 循环。 </li>
</ul>
</li>
<li><strong>for语句执行过程</strong><ul>
<li>求解表达式 1。 </li>
<li>求解表达式 2，若此条件表达式的值为真(非 0)，则执行 for 语句中的循环体，然后执行第(3)步。 若为假(0)，则结束循环，转到第(5)步。 </li>
<li>求解表达式 3。 </li>
<li>转回步骤(2)继续执行。 </li>
<li>循环结束，执行 for 语句下面的一个语句。</li>
</ul>
</li>
<li><strong>for循环注意</strong><ul>
<li>在执行完循环体后，循环变量的值“超过”循环终值，循环结束。</li>
<li>“表达式 1”可以省略，即不设置初值，但表达式 1 后的分号不能省略。<strong>注意</strong>     应在 for 语句之 前给循环变量赋以初值。</li>
<li>表达式 2 也可以省略，即不用表达式 2 来作为循环条件表达式，不设置和检查循环的条件。此时循环 无终止地进行下去,也就是认为表达式 2 始终为真。 <strong>（死循环）</strong></li>
<li>表达式 3 也可以省略</li>
<li>分号不能省略。</li>
</ul>
</li>
<li>改变循环执行的状态    <strong>break 和continun</strong><ul>
<li><strong>break</strong><ul>
<li><strong>用break语句提前终止循环</strong></li>
<li>作用：使流程跳到循环体之外，接着执行循环体下面的语句。 </li>
<li>break 语句只能用于循环语句和 switch 语句之中，而不能单独使用。 </li>
</ul>
</li>
<li><strong>continue</strong><ul>
<li><strong>用 continue 语句提前结束本次循环</strong> </li>
<li>作用：结束本次循环，即跳过循环体中下面尚未执行的语句，转到循环体结束点之前，接着执行 for 语句中的“表达式 3”，然后进行下一次是否执行循环的判定。</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h2><p><strong>怎样定义一维数组</strong></p>
<ul>
<li>数组是一组有序数据的集合。下标代表数据在数组中的序号。</li>
<li>数组中的每一个元素都属于同一个数据类型。</li>
<li>数组必须先定义再使用。</li>
<li>类型符   数组名  [常量表达式]                int a[10]         下标0~9</li>
</ul>
<p><strong>怎样引用一维数组元素</strong></p>
<ul>
<li>数组名 [下标]</li>
<li>只能单个引用，不能一次调用全部元素的值（可用干循环结构一个一个调用）</li>
</ul>
<p><strong>一维数组的赋值</strong></p>
<ul>
<li>用赋值语句对数组元素逐个赋值</li>
<li>采用初始化赋值   （在编译时段定义）int a {，，，，，}<ul>
<li>可以对全部元素赋初值</li>
<li>可以只给部分元素赋初值</li>
</ul>
</li>
<li>动态赋值（scanf（））</li>
<li></li>
</ul>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Git</title>
    <url>/Mr-lee-MQ.hithub.io/2020/06/10/Git/</url>
    <content><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git<a id="more"></a></h1><h2 id="idea安装Git"><a href="#idea安装Git" class="headerlink" title="idea安装Git"></a>idea安装Git</h2><ul>
<li><p>[下载地址]:<a href="https://git-scm.com/download/win" target="_blank" rel="noopener">https://git-scm.com/download/win</a></p>
</li>
<li><p>安装默认</p>
</li>
<li><p>运行测试：win+r,cmd  打开控制台，输入git指令，看到下图即表示安装成功</p>
</li>
<li><p><img src="https://stepimagewm.how2j.cn/5793.png" alt="运行测试"></p>
</li>
</ul>
<h2 id="配置git"><a href="#配置git" class="headerlink" title="配置git"></a>配置git</h2><ul>
<li><p>菜单-&gt;settings-&gt;Version Control-&gt;Git-&gt;Path to Git executable: 设置为<a href="https://how2j.cn/k/idea/idea-git-install/1359.html" target="_blank" rel="noopener">安装git</a>中所安装的git.exe</p>
</li>
<li><p><img src="https://stepimagewm.how2j.cn/5794.png" alt="为IDEA指定git路径"></p>
</li>
<li><p>接下来为github设置账号密码：<br>菜单-&gt;settings-&gt;Version Control-&gt;GitHub-&gt;Create API Token</p>
</li>
<li><p><img src="https://stepimagewm.how2j.cn/5795.png" alt="设置github账号"></p>
</li>
</ul>
<h2 id="idea-pull项目"><a href="#idea-pull项目" class="headerlink" title="idea pull项目"></a>idea pull项目</h2><ul>
<li>checkout：菜单-&gt;VCS-&gt;Chekout from Version Control-&gt;GitHub</li>
<li><img src="https://stepimagewm.how2j.cn/5797.png" alt="checkout"></li>
<li>输入项目参数：Git Repositor URL:<a href="https://github.com/how2j/higit.git" target="_blank" rel="noopener">https://github.com/how2j/higit.git</a><br>Parent Directory: e:\project<br>Directory Name: higit<br>然后点击 Clone</li>
<li><img src="https://stepimagewm.how2j.cn/5798.png" alt="输入项目参数"></li>
</ul>
]]></content>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
  <entry>
    <title>HTML5</title>
    <url>/Mr-lee-MQ.hithub.io/2020/07/13/HTML5/</url>
    <content><![CDATA[<h1 id="HTML详解"><a href="#HTML详解" class="headerlink" title="HTML详解"></a>HTML详解<a id="more"></a></h1><h2 id="初识HTML"><a href="#初识HTML" class="headerlink" title="初识HTML"></a>初识HTML</h2><ul>
<li>Hper Text Markup Language(超文本标记语言)</li>
<li>W3C     万维网联盟</li>
<li>W3C标准包括<ul>
<li>结构化标准语言（HTML    XML）</li>
<li>表现标准语言（CSS）</li>
<li>行为标准（DOM，ECMAScript）</li>
</ul>
</li>
</ul>
<h2 id="HTML的基本结构"><a href="#HTML的基本结构" class="headerlink" title="HTML的基本结构"></a>HTML的基本结构</h2><p>网页头部</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>主体部分</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li><p>&lt; body&gt;  ，&lt; /body&gt;等成对出现的标签（&lt; body&gt; 为开放标签     &lt; /body&gt;为闭合标签 ）</p>
</li>
<li><p>&lt; meta charset=”UTF-8”&gt;为自闭合标签</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE：      &gt;</span>      <span class="comment">&lt;!--告诉浏览器要使用什么规范--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>我的第一个程序<span class="tag">&lt;/<span class="name">title</span>&gt;</span>    <span class="comment">&lt;!--网页的标题--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span>      <span class="comment">&lt;!--mate 描述性标签，用来描述网站的信息，可做SEO--&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;meta  name &#x3D;&quot;keywords&quot; content&#x3D;&quot;西部开源&quot; &gt;</span><br><span class="line">&lt;meta name&#x3D;&quot;description&quot; content&#x3D;&quot;可以学JAVA&quot; &gt;	&lt;！--网站描述--&gt;</span><br></pre></td></tr></table></figure>

<h2 id="网页基本标签"><a href="#网页基本标签" class="headerlink" title="网页基本标签"></a>网页基本标签</h2><ul>
<li><p>标题标签</p>
<ul>
<li>（&lt; h1&gt;一级标签&lt; /h1&gt;）</li>
<li>（&lt; h2&gt;一级标签&lt; /h2&gt;）</li>
<li>（&lt; h3&gt;一级标签&lt; /h3&gt;）</li>
</ul>
</li>
<li><p>段落标签</p>
<ul>
<li>（&lt; p&gt;段落&lt; /p&gt;）</li>
</ul>
</li>
<li><p>换行标签</p>
<ul>
<li>（br  换行）自闭合标签</li>
</ul>
</li>
<li><p>水平线标签</p>
<ul>
<li>（&lt; /hr&gt;）</li>
</ul>
</li>
<li><p>字体样式标签</p>
<ul>
<li>粗体（&lt; stong&gt;  &lt; /stong&gt;）</li>
<li>斜体（&lt; em&gt;&lt; /em&gt;）</li>
</ul>
</li>
<li><p>特殊符号（&amp;     ）</p>
<ul>
<li>空格（&amp;nbsp；）</li>
<li>大于号   (&amp;gt ;）</li>
<li>小于号   (&amp;lt ;)</li>
<li>版权符号（&amp;copy；）</li>
</ul>
</li>
</ul>
<h2 id="图像标签"><a href="#图像标签" class="headerlink" title="图像标签"></a>图像标签</h2><ul>
<li>img标签学习<ul>
<li>&lt; img src&gt;<ul>
<li>src     图片地址<ul>
<li>相对地址（常用）../      –上一级目录</li>
<li>绝对地址</li>
</ul>
</li>
<li>alt     图片名字</li>
<li>title     鼠标悬停显示的文字</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="链接标签"><a href="#链接标签" class="headerlink" title="链接标签"></a>链接标签</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;a href&#x3D;&quot;&quot;&gt;&lt;&#x2F;a&gt;       &lt;!--必填，表示要跳转的网址</span><br></pre></td></tr></table></figure>

<ul>
<li><p>target     以何种方式打开窗口</p>
<ul>
<li>blank     在一个新的网页中打开</li>
<li>self         在本网页中打开</li>
</ul>
</li>
<li><p>锚链接</p>
<ul>
<li>需要一个锚标记</li>
<li>#加标记name </li>
</ul>
</li>
<li><p>功能性链接</p>
<ul>
<li><p>邮件链接： mailto</p>
</li>
<li><p>QQ链接：</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">target</span>=<span class="string">"_blank"</span> <span class="attr">href</span>=<span class="string">"http://wpa.qq.com/msgrd?v=3&amp;uin=&amp;site=qq&amp;menu=yes"</span>&gt;</span><span class="tag">&lt;<span class="name">img</span> <span class="attr">border</span>=<span class="string">"0"</span> <span class="attr">src</span>=<span class="string">"http://wpa.qq.com/pa?p=2::52"</span> <span class="attr">alt</span>=<span class="string">"点击我"</span> <span class="attr">title</span>=<span class="string">"点击我"</span>/&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="行内元素和块元素"><a href="#行内元素和块元素" class="headerlink" title="行内元素和块元素"></a>行内元素和块元素</h2><ul>
<li>块元素<ul>
<li>无论内容多少，该元素独占一行</li>
<li>（p、h1-h6）</li>
</ul>
</li>
<li>行内元素<ul>
<li>内容撑开宽度，左右都是行元素的可以排在一行</li>
<li>（a.strong.em…..）</li>
</ul>
</li>
</ul>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><ul>
<li>无序列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ol&gt;</span><br><span class="line">	&lt;li&gt;JAVA&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;前端&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;C语言&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;ol&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>有序列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;ul&gt;</span><br><span class="line">	&lt;li&gt;JAVA&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;前端&lt;&#x2F;li&gt;</span><br><span class="line">	&lt;li&gt;C语言&lt;&#x2F;li&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;ul&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>自定义列表</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl&gt;</span><br><span class="line">    &lt;dt&gt;学科&lt;&#x2F;dt&gt;</span><br><span class="line">    &lt;dd&gt;JAVA&lt;&#x2F;dd&gt;</span><br><span class="line">    &lt;dd&gt;Linux&lt;&#x2F;dd&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br></pre></td></tr></table></figure>

<h2 id="表格标签"><a href="#表格标签" class="headerlink" title="表格标签"></a>表格标签</h2><ul>
<li><p>表格标签table</p>
<ul>
<li><p>行标签   tr</p>
</li>
<li><p>列标签   td</p>
</li>
<li><p>边框   border</p>
</li>
<li><p>跨列   colspan</p>
</li>
</ul>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;td colspan&#x3D;&quot;4&quot;&gt;1-1&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>跨行  rowspan</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;td rowspan&#x3D;&quot;2&quot;&gt;2-1&lt;&#x2F;td&gt;</span><br></pre></td></tr></table></figure>

<h2 id="视频和音频"><a href="#视频和音频" class="headerlink" title="视频和音频"></a>视频和音频</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;video src&#x3D;&quot;..&#x2F;resources&#x2F;video&#x2F;NOGIZAKA46_&gt;&lt;&#x2F;video&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>src     资源路径</li>
<li>controls    控制条 </li>
<li>autoplay    自动播放</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;audio src&#x3D;&quot;..&#x2F;resources&#x2F;audio&#x2F;LOSER%20-%20米津玄師.mp3&quot;&gt;&lt;&#x2F;audio&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>controls    控制条 </li>
<li>autoplay    自动播放</li>
</ul>
<h2 id="页面结构分析"><a href="#页面结构分析" class="headerlink" title="页面结构分析"></a>页面结构分析</h2><ul>
<li>header    标题头部区域的内容</li>
<li>footer     标题脚部区域的内容</li>
<li>section    Web页面中的一块独立区域</li>
<li>article      独立的文章内容</li>
<li>aside      相关内容或应用</li>
<li>nav      导航类辅助内容</li>
</ul>
<h2 id="iframe内联框架"><a href="#iframe内联框架" class="headerlink" title="iframe内联框架"></a>iframe内联框架</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">""</span> <span class="attr">height</span>=<span class="string">""</span> <span class="attr">width</span>=<span class="string">""</span>&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>src    地址</li>
<li>w-h    高度宽度   </li>
</ul>
<h2 id="表单语法"><a href="#表单语法" class="headerlink" title="表单语法"></a>表单语法</h2><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;form action&#x3D;&quot;&quot;&gt;&lt;&#x2F;form&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>action   表单提交的位置，可以是网站，也可以是一个请求处理的地址</li>
<li>method    post，get 提交方式<ul>
<li>get     信息可以在url中看到，不安全，高速</li>
<li>post    比较安全，传输大文件</li>
</ul>
</li>
</ul>
<p>文本输入框    input</p>
<ul>
<li>type     指定元素类型<ul>
<li>text  文本框</li>
<li>password    密码框</li>
<li>submit    提交</li>
<li>reset    重置</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>注册<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">"我的第一个程序.html"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>用户户名：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span><span class="attr">name</span>=<span class="string">"username"</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>密码：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password "</span><span class="attr">name</span>=<span class="string">"psd"</span> &gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"reset"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="表单元素格式"><a href="#表单元素格式" class="headerlink" title="表单元素格式"></a>表单元素格式</h3><ul>
<li>type    指定元素类型      （都需要name属性）<ul>
<li>text   文本框（默认）</li>
<li>password    密码框</li>
<li>checkbox   单选框</li>
<li>radio   单选框       必须有初值，且单选框的name需一致</li>
<li>submit    按钮提交</li>
<li>reset    按钮重置</li>
<li>file     文件域</li>
<li>hidden 隐藏域</li>
<li>image   图片点击</li>
<li>button   按钮</li>
</ul>
</li>
<li>name    指定表单元素的名称</li>
<li>value    元素的初始值      type为radio时必须指定一个值</li>
<li>size   指定表单元素的初始宽度。当type为text或password时，表单元素的大小以字符为单位。对于其它类型，宽度以像素为单位</li>
<li>maxlength    type为text或password时，输入的最大字符</li>
<li>checked     type为radio或checkbox时，指定按钮是否被选中</li>
</ul>
<p>单选框   radio</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span><span class="attr">value</span>=<span class="string">"boy"</span>  <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span>男</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span><span class="attr">value</span>=<span class="string">"girl"</span> <span class="attr">name</span>=<span class="string">"sex"</span> /&gt;</span>女</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>多选框    checkbox</p>
<ul>
<li>checked    默认选中</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"game"</span><span class="attr">name</span>=<span class="string">"hobby"</span> &gt;</span>游戏</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"go"</span><span class="attr">name</span>=<span class="string">"hobby"</span> <span class="attr">checked</span>&gt;</span>逛街</span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"hua"</span><span class="attr">name</span>=<span class="string">"hobby"</span> &gt;</span>化妆</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>按钮  button</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span><span class="attr">name</span>=<span class="string">"but1"</span> <span class="attr">value</span>=<span class="string">"点击"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"image"</span><span class="attr">src</span>=<span class="string">"../resources/image/mmexport1564926230808.jpg"</span><span class="attr">alt</span>=<span class="string">"tutu"</span><span class="attr">width</span>=<span class="string">"200"</span><span class="attr">height</span>=<span class="string">"200"</span>/&gt;</span></span><br></pre></td></tr></table></figure>

<p>下拉框/列表框      select</p>
<ul>
<li><p>select    列表</p>
</li>
<li><p>option  value=“      ”     选项的值</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">"列表名称"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"china"</span>&gt;</span>中国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"ruishi"</span>&gt;</span>瑞士<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"deguo"</span>&gt;</span>德国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"meiguo"</span>&gt;</span>美国<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文本域   textarea</p>
<ul>
<li>cols   长度</li>
<li>rows   宽度</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">name</span>=<span class="string">"textarea"</span> <span class="attr">cols</span>=<span class="string">"10"</span> <span class="attr">rows</span>=<span class="string">"10"</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文件域    file</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">name</span>=<span class="string">"files"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">name</span>=<span class="string">"bon1"</span> <span class="attr">value</span>=<span class="string">"上传"</span> &gt;</span></span><br></pre></td></tr></table></figure>

<p>邮件验证     email</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;email&quot;name&#x3D;&quot;email&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>URL验证   url</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;url&quot; name&#x3D;&quot;url&quot;&gt;</span><br></pre></td></tr></table></figure>

<p>数字验证  number</p>
<ul>
<li>max</li>
<li>min</li>
<li>step     递增或递减</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;input type&#x3D;&quot;number&quot;name&#x3D;&quot;number&quot; max&#x3D;&quot;100&quot;min&#x3D;&quot;10&quot;step&#x3D;&quot;1&quot; &gt;</span><br></pre></td></tr></table></figure>

<p>滑块     range</p>
<ul>
<li>max</li>
<li>min</li>
<li>step    递增或递减 </li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"range"</span><span class="attr">name</span>=<span class="string">"huakuai"</span><span class="attr">max</span>=<span class="string">"100"</span><span class="attr">min</span>=<span class="string">"1"</span><span class="attr">step</span>=<span class="string">"1"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>搜索框   search</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"search"</span><span class="attr">name</span>=<span class="string">"sousuo"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单的应用"><a href="#表单的应用" class="headerlink" title="表单的应用"></a>表单的应用</h2><ul>
<li><p>只读域   readonly</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span><span class="attr">value</span>=<span class="string">"boy"</span>  <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">readonly</span>/&gt;</span>男</span><br></pre></td></tr></table></figure>
</li>
<li><p>禁用域    disabled</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">value</span>=<span class="string">"game"</span><span class="attr">name</span>=<span class="string">"hobby"</span>  <span class="attr">disabled</span>&gt;</span>游戏</span><br></pre></td></tr></table></figure>

<ul>
<li>隐藏域   hidden</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password "</span><span class="attr">name</span>=<span class="string">"psd"</span> <span class="attr">hidden</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>增强鼠标的可用性   lable<ul>
<li>for=“进入某个id中”</li>
</ul>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"mark"</span>&gt;</span>你点我试试<span class="tag">&lt;<span class="name">label</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="表单初级验证"><a href="#表单初级验证" class="headerlink" title="表单初级验证"></a>表单初级验证</h2><ul>
<li>提示信息：placeholder=“请输入用户名”</li>
<li>非空判断：required</li>
<li>正则表达式:    pattern     百度可得</li>
</ul>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo的搭建</title>
    <url>/Mr-lee-MQ.hithub.io/2020/05/24/Hexo%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="软件安装部署及更新"><a href="#软件安装部署及更新" class="headerlink" title="软件安装部署及更新"></a>软件安装部署及更新<a id="more"></a></h1><h2 id="hexo-github-搭建的个人博客"><a href="#hexo-github-搭建的个人博客" class="headerlink" title="hexo + github 搭建的个人博客"></a>hexo + github 搭建的个人博客</h2><p>源于 <a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Yb411a7ty</a></p>
<h2 id="hexo-gitee-搭建的个人博客"><a href="#hexo-gitee-搭建的个人博客" class="headerlink" title="hexo + gitee 搭建的个人博客"></a>hexo + gitee 搭建的个人博客</h2><p>源于 <a href="https://ouwen666.gitee.io/2020/01/29/Hexo+Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="noopener">https://ouwen666.gitee.io/2020/01/29/Hexo+Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more</a></p>
<h2 id="搭建完成后更换主题"><a href="#搭建完成后更换主题" class="headerlink" title="搭建完成后更换主题"></a>搭建完成后更换主题</h2><ul>
<li>安装主题</li>
</ul>
<p>git clone –depth=1 <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus.git" target="_blank" rel="noopener">https://github.com/JoeyBling/hexo-theme-yilia-plus.git</a> ./yilia-plus</p>
<ul>
<li>配置</li>
</ul>
<p>修改hexo根目录下的 _config.yml ➡️ theme: yilia-plus</p>
<ul>
<li>更新</li>
</ul>
<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>
<p>源于 <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">https://github.com/JoeyBling/hexo-theme-yilia-plus</a></p>
<p>用Hexo写一篇博客</p>
<pre><code>$ hexo n &quot;我的第一篇博客&quot;
INFO  Created: E:\bolg\source\_posts\我的第一篇博客.md</code></pre><p>编辑完保存文件，重启Hexo服务</p>
<pre><code> hexo clean          # 清除所有记录 
$ hexo generate       # 生成静态网页 简写：hexo g
$ hexo server         # 启动服务 简写：hexo s</code></pre><p>或者用&amp;&amp;连接起来也可以</p>
<pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre><h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><h3 id="2020年8月4日11-36-49"><a href="#2020年8月4日11-36-49" class="headerlink" title="2020年8月4日11:36:49"></a>2020年8月4日11:36:49</h3><ul>
<li><p>将图片存放在同名文件夹中，放到图床上，然后将Markdown的详细链接放到博客中即可插入图片</p>
</li>
<li><p>网易云音乐更换音乐<a href="https://music.163.com/#，选择外链id后进入主题下config文件下更改音乐id" target="_blank" rel="noopener">https://music.163.com/#，选择外链id后进入主题下config文件下更改音乐id</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/Mr-lee-MQ.hithub.io/2020/07/24/JavaScript/</url>
    <content><![CDATA[<h1 id="JavaScript"><a href="#JavaScript" class="headerlink" title="JavaScript"></a>JavaScript<a id="more"></a></h1><p>JavaScript是一门世界上最流行的脚本语言。</p>
<p>严格区分大小写。</p>
<h2 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h2><h3 id="引入JavaScript"><a href="#引入JavaScript" class="headerlink" title="引入JavaScript"></a>引入JavaScript</h3><ul>
<li>内部标签使用</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">       alert(<span class="string">"Hello,JavaScript"</span>)</span><br><span class="line">   &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>外部引入</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">alert(<span class="string">"Hello,JavaScript"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;script src=<span class="string">"js.js"</span>&gt;&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br></pre></td></tr></table></figure>

<h3 id="基本语法入门"><a href="#基本语法入门" class="headerlink" title="基本语法入门"></a>基本语法入门</h3><ul>
<li>定义变量</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">变量类型    变量名 = 变量值；</span><br><span class="line"><span class="keyword">var</span> num = <span class="number">1</span>；</span><br><span class="line"><span class="keyword">var</span> name = <span class="string">"liminqiang"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>条件控制</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="number">2</span>&gt;<span class="number">1</span>)&#123;</span><br><span class="line">alert(<span class="string">"true"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>注释</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*     */</span></span><br></pre></td></tr></table></figure>

<ul>
<li>打印变量</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">console.log(score)		&#x2F;*在浏览器的控制台打印变量相当于sout*&#x2F;</span><br></pre></td></tr></table></figure>

<ul>
<li>控制台调试JavaScript<ul>
<li>Elements   :HTML和CSS代码</li>
<li>Console   :控制台（可写JavaScript代码）</li>
<li>Sources   :当前的源码目录<ul>
<li>打断点<ul>
<li>在Sources的源码中点击左侧行数即打断点，然后刷新页面</li>
<li>右上角上下箭头选择</li>
</ul>
</li>
</ul>
</li>
<li>Neteork :网络请求 </li>
<li>Application：相当于web里的数据库</li>
</ul>
</li>
</ul>
<h3 id="数据类型概述"><a href="#数据类型概述" class="headerlink" title="数据类型概述"></a>数据类型概述</h3><p>数值，文本，图形，音频，视频……</p>
<ul>
<li>number</li>
</ul>
<p>js不区分小数跟整数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="number">123</span><span class="comment">//整数123</span></span><br><span class="line"><span class="number">123.3</span><span class="comment">// 浮点数123.3</span></span><br><span class="line"><span class="number">1.12e3</span><span class="comment">//科学计数法</span></span><br><span class="line"><span class="number">-99</span> <span class="comment">//复数</span></span><br><span class="line"><span class="literal">NaN</span>  <span class="comment">//not a number</span></span><br><span class="line"><span class="literal">Infinity</span>  <span class="comment">//表示无限大</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'abc'</span></span><br><span class="line"><span class="string">"abc"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>布尔值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="literal">true</span> </span><br><span class="line"><span class="literal">false</span></span><br></pre></td></tr></table></figure>

<ul>
<li>逻辑运算</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&amp;&amp; 两个都为真，结果为真</span><br><span class="line">||一个为真，结果为真</span><br><span class="line">!真既假，假即真</span><br></pre></td></tr></table></figure>

<ul>
<li>比较运算符</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x3D;   赋值</span><br><span class="line">&#x3D;&#x3D;   等于（类型不一样，值一样，也会判断为true）</span><br><span class="line">&#x3D;&#x3D;&#x3D;&#x3D;   绝对等于（类型一样，值一样，则为true）</span><br></pre></td></tr></table></figure>

<p>特殊：NaN===NaN，NaN与所有值都不相等，包括自己。</p>
<p>​            只能通过isNaN(NaN)来判断这个数是否是NaN</p>
<p>浮点数问题：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log((<span class="number">1</span>/<span class="number">3</span>)===(<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<p>尽量避免使用浮点数进行运算，存在精度问题。</p>
<p>可用Math.abs解决</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Math</span>.abs(<span class="number">1</span>/<span class="number">3</span>-(<span class="number">1</span><span class="number">-2</span>/<span class="number">3</span>))&lt;<span class="number">0.00000001</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li><p>null和undefined</p>
<ul>
<li>null空</li>
<li>undefined未定义</li>
</ul>
</li>
<li><p>数组</p>
</li>
</ul>
<p>Java中必须是一系列类型相同的对象,JS中不需要</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="string">"hello"</span>,<span class="literal">null</span>,<span class="literal">true</span>]</span><br></pre></td></tr></table></figure>

<p>为保证代码的可读性数组尽量用[   ],对象则用{   }</p>
<p>取数组下标，如果越界，则为undefined。</p>
<ul>
<li>对象</li>
</ul>
<p>对象是大括号，数组是中括号。每个属性用逗号隔开，最后一个不用加。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">varperson=&#123;</span><br><span class="line">    </span><br><span class="line">    name:<span class="string">"limin"</span>,</span><br><span class="line">    age:<span class="number">14</span>,	</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>取对象的值</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">调用：person.name</span><br><span class="line">		limin</span><br></pre></td></tr></table></figure>

<p>严格检查模式   use strict</p>
<ul>
<li><p>放第一行。</p>
</li>
<li><p>预防JavaScript的随意性导致产生一些问题。</p>
</li>
<li><p>局部变量都用let去定义。</p>
</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> i = <span class="number">1</span> ;</span><br></pre></td></tr></table></figure>

<h2 id="数据类型详解"><a href="#数据类型详解" class="headerlink" title="数据类型详解"></a>数据类型详解</h2><h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><ul>
<li>正常的字符串我们用单引号，或双引号包裹</li>
<li>注意转义字符 \</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">\&#39;</span><br><span class="line">\n</span><br><span class="line">\t</span><br><span class="line">\u4e2d</span><br><span class="line">\u####</span><br><span class="line">unicode字符</span><br><span class="line">\x41   Ascll字符</span><br></pre></td></tr></table></figure>

<ul>
<li>多行字符串编写</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tab上面的  esc键下面</span></span><br><span class="line"><span class="keyword">var</span> msg=</span><br><span class="line">    <span class="string">`hello</span></span><br><span class="line"><span class="string">world</span></span><br><span class="line"><span class="string">你好呀</span></span><br><span class="line"><span class="string">你好</span></span><br></pre></td></tr></table></figure>

<ul>
<li>模板字符串</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//tab上面 esc下面</span></span><br><span class="line"><span class="keyword">let</span> name = <span class="string">"qinjiang"</span>;</span><br><span class="line"><span class="keyword">let</span> age = <span class="number">3</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> msg = <span class="string">`你好呀，<span class="subst">$&#123;name&#125;</span>`</span></span><br></pre></td></tr></table></figure>

<ul>
<li>字符串长度</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(str.length)</span><br></pre></td></tr></table></figure>

<ul>
<li>字符串的可变性，不可变</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">console.log(student[<span class="number">0</span>])</span><br><span class="line">    s</span><br><span class="line">student[<span class="number">0</span>]= <span class="number">1</span></span><br><span class="line">    <span class="number">1</span></span><br><span class="line">console.leg(student)</span><br><span class="line">    student</span><br></pre></td></tr></table></figure>

<ul>
<li>大小写转换</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;注意，这里是方法，不是属性</span><br><span class="line">student.toUpperCase()</span><br><span class="line">student.toLowerCase()</span><br></pre></td></tr></table></figure>

<ul>
<li>student.indexOf(‘t’)    获取指令的下标</li>
<li>substring</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//包含前面，不包含后面</span></span><br><span class="line">student.substring(<span class="number">1</span>)  <span class="comment">//从第一个字符串截取到最后一个字符串</span></span><br><span class="line">student.substring(<span class="number">1</span>,<span class="number">3</span>)   <span class="comment">//[1)</span></span><br></pre></td></tr></table></figure>

<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><p>Array可以包含任意的数据类型</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>长度</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">arr.length</span><br></pre></td></tr></table></figure>

<p>注意：假如给arr.length赋值，则数组大小就会发生变化。如果赋值过小，元素会丢失。</p>
<ul>
<li>indexOf   通过元素获得下标索引。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr.indexOf(<span class="number">2</span>)</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>

<p>字符串的“1”和数字1是不同的</p>
<ul>
<li>slice（）截取Array的一部分，返回一个新数组，类似于String中的substring</li>
<li>push（） , pop（）</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">push:  压入到尾部</span><br><span class="line">pop:  弹出尾部的一个元素</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> arr= [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line">arr.push(<span class="string">'a'</span>,<span class="string">'b'</span>)</span><br><span class="line">arr;</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">"a"</span>,<span class="string">"b"</span></span><br><span class="line"></span><br><span class="line">arr.pop()</span><br><span class="line">arr;</span><br><span class="line"><span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="string">"a"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>unshift(),   shift()头部</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">unshift:  压入到头部</span><br><span class="line">shift:  弹出头部的一个元素</span><br></pre></td></tr></table></figure>

<ul>
<li>sort  排序        </li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"A"</span>]</span><br><span class="line">arr.sort()</span><br><span class="line">(<span class="number">3</span>)[<span class="string">"A"</span>,<span class="string">"B"</span>,<span class="string">"C"</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>reverse()     元素反转</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"A"</span>]</span><br><span class="line">arr.reverse()</span><br><span class="line">(<span class="number">3</span>)[<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>]</span><br></pre></td></tr></table></figure>

<ul>
<li>concat()</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">"B"</span>,<span class="string">"C"</span>,<span class="string">"A"</span>]</span><br><span class="line">arr.concat([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>])</span><br><span class="line">(<span class="number">6</span>)[<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">arr</span><br><span class="line">(<span class="number">3</span>)[<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>]</span><br></pre></td></tr></table></figure>

<p>注意：concat（）并没有修改数组，只是会返回了一个新的数组</p>
<ul>
<li>连接符   join</li>
</ul>
<p>打印拼接数组，使用特定的字符串连接</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">(<span class="number">3</span>)[<span class="string">"C"</span>,<span class="string">"B"</span>,<span class="string">"A"</span>]</span><br><span class="line">arr.join(<span class="string">'-'</span>)</span><br><span class="line"><span class="string">"C-B-A"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>多维数组</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">arr = [[<span class="number">1</span>,<span class="number">2</span>][<span class="number">3</span>,<span class="number">4</span>][<span class="string">"5"</span>,<span class="string">"6"</span>]];</span><br><span class="line">arr[<span class="number">1</span>][<span class="number">1</span>]</span><br><span class="line"><span class="number">4</span></span><br></pre></td></tr></table></figure>

<p>数组：存储数据（如何存，如何取，方法可以自己实现！）</p>
<h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><p>若干个键值对</p>
<p>JavaScript中的所有的键都是字符串，值是任意对象</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> 对象名= &#123;</span><br><span class="line">    属性名：属性值，</span><br><span class="line">    属性名：属性值，</span><br><span class="line">    属性名：属性值</span><br><span class="line">&#125;</span><br><span class="line">定义了一个person对象，它有<span class="number">4</span>个属性</span><br><span class="line"><span class="keyword">var</span> person=&#123;</span><br><span class="line">    name:<span class="string">"kuangshen"</span>,</span><br><span class="line">    age:<span class="number">3</span>,</span><br><span class="line">    email:<span class="string">"2285051311@qq.com"</span>,</span><br><span class="line">    score:<span class="number">0</span>  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>JS中对象，{…..}表示一个对象，键值对描述属性XXX：XXXX，多个属性之间使用逗号隔开，最后一个属性不加逗号！</p>
<ul>
<li>对象赋值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.name = <span class="string">"qinjiang"</span></span><br><span class="line"><span class="string">"qinjiang"</span></span><br><span class="line">person.name</span><br><span class="line"><span class="string">"qinjiang"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>使用一个不存在的对象属性，不会报错！undefined</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.haha</span><br><span class="line"><span class="literal">undefined</span></span><br></pre></td></tr></table></figure>

<ul>
<li>动态的删减属性，通过delete删除对象的属性</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">delete</span> person.name</span><br><span class="line">ture</span><br></pre></td></tr></table></figure>

<ul>
<li>动态的添加,直接给新的属性添加值即可</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.haha = <span class="string">"haha"</span></span><br><span class="line"><span class="string">"haha"</span></span><br><span class="line">person</span><br></pre></td></tr></table></figure>

<ul>
<li>判断属性值是否在这个对象中！XXX  in   XXX</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="string">'age'</span> <span class="keyword">in</span> person</span><br><span class="line"><span class="literal">true</span></span><br><span class="line"><span class="comment">//继承</span></span><br><span class="line"><span class="string">'toString'</span>  <span class="keyword">in</span>  person</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<ul>
<li>判断一个属性是否是这个对象拥有的。</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">person.hasOwnProperty(<span class="string">'toString'</span>)</span><br><span class="line"><span class="literal">false</span></span><br><span class="line">person.hasOwnProperty(<span class="string">'age'</span>)</span><br><span class="line"><span class="literal">true</span></span><br></pre></td></tr></table></figure>

<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><ul>
<li>if判断</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">if</span>(age&gt;<span class="number">3</span>)&#123;</span><br><span class="line">    alert(<span class="string">"haha"</span>);</span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        alert(<span class="string">"kuwa~"</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>while循环，避免程序死循环</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span>(age&lt;<span class="number">100</span>)&#123;</span><br><span class="line">    age = age +<span class="number">1</span>;</span><br><span class="line"><span class="built_in">console</span>.log(age)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//do  while 循环</span></span><br><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">    age = age + <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">console</span>.log(age)</span><br><span class="line">&#125;<span class="keyword">while</span>(age&lt;<span class="number">100</span>)</span><br></pre></td></tr></table></figure>

<ul>
<li>for循环</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = <span class="number">3</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(i)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>forEach循环</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> age = [<span class="number">12</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">3</span>,<span class="number">12</span>,<span class="number">31</span>,<span class="number">23</span>,<span class="number">123</span>];</span><br><span class="line"><span class="comment">//函数</span></span><br><span class="line">age.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value</span>))</span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(value)</span><br><span class="line">            &#125;)</span><br></pre></td></tr></table></figure>

<ul>
<li>for…..in</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//for(var index in object)&#123;&#125;</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> num <span class="keyword">in</span> age)&#123;</span><br><span class="line"><span class="keyword">if</span>(age.hasownProperty(num))&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"存在"</span>)</span><br><span class="line">    <span class="built_in">console</span>.log(age[num])</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Map和Set"><a href="#Map和Set" class="headerlink" title="Map和Set"></a>Map和Set</h3><p>ES6的新特性</p>
<ul>
<li>Map</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Map</span></span><br><span class="line"><span class="comment">//学生的成绩，学生的名字</span></span><br><span class="line"><span class="comment">//var names = ["tom","jack","haha"];</span></span><br><span class="line"><span class="comment">//var scores = [100,90,80];</span></span><br><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">'tom'</span>,<span class="number">100</span>],[<span class="string">'jack'</span>,<span class="number">90</span>][<span class="string">'haha'</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">var</span> name = map.get(<span class="string">'tom'</span>);</span><br><span class="line">map.get(<span class="string">'admin'</span>,<span class="number">123456</span>);</span><br><span class="line">map.delete(<span class="string">"tom"</span>);   <span class="comment">//删除</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Set：无序不重复的集合</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Set可以去重 </span></span><br><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set([3,1,1,1,]);</span><br><span class="line"><span class="keyword">set</span>.add(2);   //添加</span><br><span class="line"><span class="keyword">set</span>.delete(1);  //删除</span><br><span class="line">console.log(<span class="keyword">set</span>.has(3))   //是否包含某个元素</span><br></pre></td></tr></table></figure>

<h3 id="inerator"><a href="#inerator" class="headerlink" title="inerator"></a>inerator</h3><p>遍历数组</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//通过for of /for  in   下标</span></span><br><span class="line"><span class="keyword">var</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>]</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> x <span class="keyword">of</span> arr)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历Map</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>([[<span class="string">"tom"</span>,<span class="number">100</span>],[<span class="string">"jack"</span>,<span class="number">90</span>],[<span class="string">"haha"</span>,<span class="number">80</span>]]);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> map)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历set</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> <span class="keyword">set</span> = new Set([5,6,7]);</span><br><span class="line">for (let x of <span class="keyword">set</span>)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><h3 id="定义函数"><a href="#定义函数" class="headerlink" title="定义函数"></a>定义函数</h3><p>绝对值函数</p>
<blockquote>
<p>定义方式一</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">funstion abs(x)&#123;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一旦执行到return代表函数结束，返回结果。如果没有执行return，函数执行完也会返回结果，结果是undefined</p>
<blockquote>
<p>定义方式二</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>function(x){……}这是一个匿名函数。但是可以把结果赋值给abs，通过abs就可以调用函数。</p>
<ul>
<li>调用函数</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">abs(<span class="number">10</span>)</span><br><span class="line">abs(<span class="number">-10</span>)</span><br></pre></td></tr></table></figure>

<p>参数问题JS可以传任意个参数，也可以不传参数。</p>
<ul>
<li>假设不存在参数，如何规避？</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = funstion(x)&#123;</span><br><span class="line">    <span class="comment">//手动抛出异常判断</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">typeof</span> x !==<span class="string">'number'</span>)&#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">'Not a number'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>argument</li>
</ul>
<p>argument是Js的关键字，代表传递进来的所有参数，是一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> abs = funstion(x)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"X=&gt;"</span>+x);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i =<span class="number">0</span>;i&lt;argument.length;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(argument[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(x&gt;=<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> x;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> -x;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>问题：argument包含所有的参数，我们有时候想使用多余的参数来进行附加操作。需要排除已有的参数。</p>
<ul>
<li>rest</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span>(argument.length&gt;<span class="number">2</span>)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">2</span>;i&lt;armument.length;i++)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>ES6引入的新特性，获取除了已经定义的参数之外的所有参数</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">funstion aaa(a,b,.....rest)&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"a=&gt;"</span>+a);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"b=&gt;"</span>+b);</span><br><span class="line">    <span class="built_in">console</span>.log(rest);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>rest 参数只能写在最后面，必须用…..标识。</p>
<h3 id="变量的作用域"><a href="#变量的作用域" class="headerlink" title="变量的作用域"></a>变量的作用域</h3><p>在Java Script中，var定义变量实际是有作用域的。</p>
<p>假设在函数体中声明，则在函数体外不可以使用（闭包）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">x = x + <span class="number">2</span>;</span><br></pre></td></tr></table></figure>



<p>如果两个函数使用了相同的变量名，只要在函数内部，就不冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    x = x + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">'A'</span>;</span><br><span class="line">    x = x + <span class="number">1</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>内部函数可以访问外部函数的成员，反之则不行。</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">funstion qj()&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">var</span> y = x + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> z = y + <span class="number">1</span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<blockquote>
<p>假设，内部函数变量和外部函数变量重名</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'inner'</span>+ x );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'outter'</span> + X );</span><br><span class="line">    qj2()</span><br><span class="line">&#125;</span><br><span class="line">qj()</span><br></pre></td></tr></table></figure>

<p>假设JavaScript中函数查找变量从自身函数开始，由内向外查找，假设外部存在这个同名的函数变量，则内部函数会屏蔽外部函数的变量。</p>
<blockquote>
<p>提升变量的作用域</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj</span> (<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">"x"</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    <span class="keyword">var</span> y = <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结果：xundefined</span></span><br><span class="line">说明JS执行引擎，自动提升了y的声明，但不会提升变量y的赋值</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">qj2</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> y;</span><br><span class="line">    <span class="keyword">var</span> x = <span class="string">"x"</span> + y;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">    y = <span class="string">'y'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//即所有的变量定义都放在函数的头部</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>全局函数</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全局变量</span></span><br><span class="line"><span class="keyword">var</span> x = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(x);</span><br><span class="line">&#125;</span><br><span class="line">f();</span><br><span class="line"><span class="built_in">console</span>.log(x);</span><br></pre></td></tr></table></figure>

<p>全局对象    window</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> x = <span class="string">'xxx'</span>;</span><br><span class="line">alret(x);</span><br><span class="line">zlert(<span class="built_in">window</span>.x);</span><br></pre></td></tr></table></figure>

<p>alert()本身也是window的一个变量</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">vsar x = <span class="string">'xxx'</span>;</span><br><span class="line"><span class="built_in">window</span>.alert(x);</span><br><span class="line"><span class="keyword">var</span> old_alert = <span class="built_in">window</span>.alert;</span><br><span class="line"><span class="comment">//old_alert</span></span><br><span class="line"><span class="built_in">window</span>.alert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//发现alert()失效了。</span></span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//恢复</span></span><br><span class="line"><span class="built_in">window</span>.alert = old_alert;</span><br><span class="line"><span class="built_in">window</span>.alert(<span class="number">456</span>);</span><br></pre></td></tr></table></figure>

<p>JavaScript实际上只有一个全局作用域，任何变量（函数也可以视为变量），假设没有在函数的作用范围内找到，就会向外查找，如果在全局作用域都没有找到，报错（ReferenceError）引用异常.</p>
<blockquote>
<p>规范</p>
</blockquote>
<p>由于我们所有的全局变量都会绑在我们的window上，如果不停的JS文件，使用了相同的全局变量，冲突—&gt;如何减少冲突。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//唯一全局变量</span></span><br><span class="line"><span class="keyword">var</span> KuangApp = &#123;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义全局变量</span></span><br><span class="line">KuangApp.name = <span class="string">'kuangshen'</span>;</span><br><span class="line">KuangApp.add = <span class="function"><span class="keyword">function</span>(<span class="params"> a , b </span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a + b;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>把自己的代码全部放到自己定义的唯一空间名字中，降低全局冲突的问题</p>
<ul>
<li>局部定义域  let</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i) </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(i + <span class="number">1</span>)</span><br><span class="line">&#125;                <span class="comment">//i出了作用域还可以使用</span></span><br></pre></td></tr></table></figure>

<p>ES6 let关键字，解决局部作用域冲突问题。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(i) </span><br><span class="line">    &#125;</span><br><span class="line">   <span class="built_in">console</span>.log(i + <span class="number">1</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>常量 const</li>
</ul>
<p>在ES6之前，怎么定义常量：只有用全部大写字母命名的变量就是常量。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> PI = <span class="string">'3.14'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br><span class="line">PI = <span class="string">'213'</span>;</span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br></pre></td></tr></table></figure>

<p>在ES6引用关键字   const   </p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> PI = <span class="string">'3.14'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(PI);</span><br><span class="line">PI = <span class="string">'213'</span>;</span><br></pre></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ul>
<li>定义方法：方法就是把函数放在对象里面，对象只有两个东西：属性和方法</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">    name:<span class="string">'秦疆'</span>；</span><br><span class="line">    birth: <span class="number">2000</span>;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    age:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">//今年-出生的年</span></span><br><span class="line">        <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">        <span class="keyword">return</span> now - <span class="keyword">this</span>.birth;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    kuangshen.name</span><br><span class="line">	<span class="comment">//方法，一定带括号()</span></span><br><span class="line">	kuangshen.age()</span><br></pre></td></tr></table></figure>

<p>this代表什么？拆开上面的代码看看</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//今年-出生的年</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="keyword">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">        name:<span class="string">'秦疆'</span>，</span><br><span class="line">        birth:<span class="number">2000</span>,</span><br><span class="line">        age:getAge</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//调用kuangshen.age()   ok</span></span><br><span class="line">    <span class="comment">//getAge() NaN</span></span><br></pre></td></tr></table></figure>

<p>this 是无法指向的，是默认指向调用它的那个对象；</p>
<ul>
<li>apply</li>
</ul>
<p>在JS中可以控制this的指向</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getAge</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">//今年-出生的年</span></span><br><span class="line">    <span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>().getFullYear();</span><br><span class="line">    <span class="keyword">return</span> now - <span class="keyword">this</span>.birth;</span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">var</span> kuangshen = &#123;</span><br><span class="line">        name:<span class="string">'秦疆'</span>，</span><br><span class="line">        birth:<span class="number">2000</span>,</span><br><span class="line">        age:getAge</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    getAge.apply(kuangshen,[]);</span><br><span class="line"><span class="comment">//this.指向了kuangshen. 参数为空</span></span><br></pre></td></tr></table></figure>

<h2 id="内部对象"><a href="#内部对象" class="headerlink" title="内部对象"></a>内部对象</h2><ul>
<li>标准对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typeof</span> <span class="number">123</span></span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="string">'123'</span></span><br><span class="line"><span class="string">"string"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">true</span></span><br><span class="line"><span class="string">"boolean"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="literal">NaN</span></span><br><span class="line"><span class="string">"number"</span></span><br><span class="line"><span class="keyword">typeof</span> []</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"><span class="keyword">typeof</span> &#123;&#125;</span><br><span class="line"><span class="string">"object"</span></span><br><span class="line"><span class="keyword">typeof</span> <span class="built_in">Math</span>.abs</span><br><span class="line"><span class="string">"function"</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Date</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> now = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">now.getFullYear();<span class="comment">//年</span></span><br><span class="line">now.getMonth();<span class="comment">//月</span></span><br><span class="line">now.getDate();<span class="comment">//日</span></span><br><span class="line">now.getDay();<span class="comment">//星期几</span></span><br><span class="line">now.getHours();<span class="comment">//时</span></span><br><span class="line">now.getMinutes();<span class="comment">//分</span></span><br><span class="line">now.getSeconds();<span class="comment">//秒</span></span><br><span class="line"></span><br><span class="line">now.getTime();<span class="comment">//时间戳</span></span><br></pre></td></tr></table></figure>

<h3 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h3><ul>
<li>定义：<ul>
<li><a href="https://baike.baidu.com/item/JSON" target="_blank" rel="noopener">JSON</a>(<a href="https://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a> Object Notation, JS 对象简谱) 是一种轻量级的数据交换格式。</li>
<li>简洁和清晰的<strong>层次结构</strong>使得 JSON 成为理想的数据交换语言。</li>
<li>易于人阅读和编写，同时也易于机器解析和生成，并有效地提升网络传输效率。</li>
</ul>
</li>
</ul>
<p>在JavaScript一切皆为对象，任何JS支持的类型都可以用JSON来表示。</p>
<p>格式：</p>
<ul>
<li>对象都用{}</li>
<li>数组都用[]</li>
<li>所有的键值对都用keyy:value</li>
</ul>
<p>JSON字符串和JS对象的转化</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> user = &#123;</span><br><span class="line">    name:<span class="string">"qinjiang"</span>,</span><br><span class="line">    age:<span class="number">3</span>,</span><br><span class="line">    sex:<span class="string">'男'</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//对象转化为json字符串&#123;"name":"qinjiang","age":3,"sex":"男"&#125;</span></span><br><span class="line">    <span class="keyword">var</span> jsonUser = <span class="built_in">JSON</span>.stringify(user);</span><br><span class="line">	<span class="comment">//json字符串转化为对象，参数为json字符串</span></span><br><span class="line">	<span class="keyword">var</span> obj = 						      						<span class="built_in">JSON</span>.parse(<span class="string">'&#123;"name":"qinjiang","age":3,"sex":"男"&#125;'</span>);</span><br></pre></td></tr></table></figure>

<h3 id="Ajax简述"><a href="#Ajax简述" class="headerlink" title="Ajax简述"></a>Ajax简述</h3><ul>
<li>原生的js写法   xhr异步请求</li>
<li>jQury封装好的方法    $(“#name”)ajax(“”)</li>
<li>axios请求</li>
</ul>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><ul>
<li><p>类：一个模板     (原型对象)</p>
</li>
<li><p>对象：具体的实例</p>
</li>
</ul>
<h3 id="原型继承"><a href="#原型继承" class="headerlink" title="原型继承"></a>原型继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> Student = &#123;</span><br><span class="line">        name:<span class="string">"qinjiang"</span>,</span><br><span class="line">        age: <span class="number">3</span>,</span><br><span class="line">        run: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">           <span class="built_in">console</span>.log(<span class="keyword">this</span>.name + <span class="string">"run...."</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">	<span class="keyword">var</span> xiaoming = &#123;</span><br><span class="line">        name:<span class="string">"xiaoming"</span></span><br><span class="line">    &#125;;</span><br><span class="line">	<span class="keyword">var</span> Bird = &#123;  </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//小明的原型是Student</span></span><br><span class="line">    xiaoming._proto_ = Student;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="Class继承"><a href="#Class继承" class="headerlink" title="Class继承"></a>Class继承</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//给student新增一个方法</span></span><br><span class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    slert(<span class="string">'Hello'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//ES6之后</span></span><br><span class="line"><span class="comment">//定义一个学生的类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;	</span><br><span class="line">	hello()&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>继承</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line">Student.prototype.hello = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    slert(<span class="string">'Hello'</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name)&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;	</span><br><span class="line">	hello()&#123;</span><br><span class="line">        alert(<span class="string">'hello'</span>)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Xiaostudent</span> <span class="title">extend</span> <span class="title">student</span></span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(name,grade)&#123;</span><br><span class="line">        <span class="keyword">super</span>(name);</span><br><span class="line">        <span class="keyword">this</span>.grade = grade;</span><br><span class="line">    &#125;</span><br><span class="line">    myGrade()&#123;</span><br><span class="line">        alert(<span class="string">'我是一名小学生'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> xiaoming = <span class="keyword">new</span> student(<span class="string">"xiaoming"</span>);</span><br><span class="line"><span class="keyword">var</span> xiaohong = <span class="keyword">new</span> Xiaostudent(<span class="string">"xiaohong"</span>,<span class="number">1</span>);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<p>本质：查看对象原型</p>
<h2 id="操作BOM对象"><a href="#操作BOM对象" class="headerlink" title="操作BOM对象"></a>操作BOM对象</h2><p>JavaScript和浏览器的关系？</p>
<p>JavaScript诞生就是为了能够让他在浏览器中运行</p>
<p>BOM：浏览器对象模型</p>
<ul>
<li>IE6~11</li>
<li>Chrome</li>
<li>Safari</li>
<li>FireFox</li>
</ul>
<blockquote>
<p>window</p>
</blockquote>
<p>window 代表 浏览器窗口</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">window</span>.alert(<span class="number">1</span>)</span><br><span class="line"><span class="literal">undefined</span></span><br><span class="line"><span class="built_in">window</span>.innerHeight	<span class="comment">//内部高度</span></span><br><span class="line"><span class="number">258</span></span><br><span class="line"><span class="built_in">window</span>.innerWidth	<span class="comment">//内部宽度</span></span><br><span class="line"><span class="number">919</span></span><br><span class="line"><span class="built_in">window</span>.outerHeight	<span class="comment">//外部高度</span></span><br><span class="line"><span class="number">325</span></span><br><span class="line"><span class="built_in">window</span>.outerrWidth	<span class="comment">//外部宽度</span></span><br><span class="line"><span class="number">919</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Navigator</p>
</blockquote>
<p>Navigator,封装了浏览器的信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">navigator.appName    <span class="comment">//浏览器名称</span></span><br><span class="line">navigator.appVersion    <span class="comment">//版本号</span></span><br><span class="line">navigator.userAgent    <span class="comment">//用户信息</span></span><br><span class="line">navigator.platform    <span class="comment">//系统版本</span></span><br></pre></td></tr></table></figure>

<p>大多数时候不使用navigator对象，因为可能会被人为修改。不建议使用这些属性来判断和编写代码。</p>
<blockquote>
<p>screen</p>
</blockquote>
<p>屏幕尺寸</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">screen.width</span><br><span class="line"><span class="number">1920</span></span><br><span class="line">screen.height</span><br><span class="line"><span class="number">1080</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>location</p>
</blockquote>
<p>location代表当前页面的URL信息</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">host:<span class="string">"www.baidu.com"</span></span><br><span class="line">href:<span class="string">"https://www.baidu.com/"</span></span><br><span class="line">protocol:<span class="string">"https:"</span></span><br><span class="line">reload:f reload()<span class="comment">//刷新网页</span></span><br><span class="line">location.assign(<span class="string">"https://blog.kuangstudy.com/"</span>)设置新的地址</span><br></pre></td></tr></table></figure>

<blockquote>
<p>document （文本内容）</p>
</blockquote>
<p>document代表当前的页面，HTML DOM文档树</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.title</span><br><span class="line"><span class="string">"百度一下，你就知道"</span></span><br><span class="line"><span class="built_in">document</span>.title = <span class="string">'狂神说'</span></span><br><span class="line"><span class="string">"狂神说"</span></span><br></pre></td></tr></table></figure>

<p>获取具体的文档数节点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dl id&#x3D;&quot;app&quot;&gt;</span><br><span class="line">	&lt;dt&gt;Java&lt;&#x2F;dt&gt;</span><br><span class="line">	&lt;dt&gt;JavaSE&lt;&#x2F;dt&gt;</span><br><span class="line">	&lt;dt&gt;JavaEE&lt;&#x2F;dt&gt;</span><br><span class="line">&lt;&#x2F;dl&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">	var dl &#x3D; document.getElementById(&#39;app&#39;);</span><br><span class="line">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>

<p>获取cookie</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="built_in">document</span>.cookie</span><br></pre></td></tr></table></figure>

<p>劫持cookie原理</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script src = <span class="string">"aa.js"</span>&gt;&lt;<span class="regexp">/stript&gt;</span></span><br><span class="line"><span class="regexp">&lt;!--恶意人员：获取你的cooike上传到他的服务器 --&gt;</span></span><br></pre></td></tr></table></figure>

<p>服务端可以设置 cooike为httpOnly</p>
<blockquote>
<p>history</p>
</blockquote>
<p>history代表浏览器的历史记录</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">history.back()  <span class="comment">//后退</span></span><br><span class="line">history.forward()  <span class="comment">//前进</span></span><br></pre></td></tr></table></figure>

<h2 id="操作DOM"><a href="#操作DOM" class="headerlink" title="操作DOM"></a>操作DOM</h2><p>DOM：文本对象模型</p>
<p>核心：</p>
<ul>
<li>更新：更新    Dom节点</li>
<li>遍历Dom节点：得到Dom节点</li>
<li>删除：删除一个Dom节点</li>
<li>添加：添加一个新的节点</li>
</ul>
<p>要操作一个Dom节点，就必须要先获得这个Dom节点</p>
<blockquote>
<p>获得Dom节点</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;h1&gt;标题一&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;p id = "p1"&gt;p1&lt;/</span>p&gt;</span><br><span class="line">&lt;p <span class="class"><span class="keyword">class</span> </span>= <span class="string">"p2"</span>&gt;p2&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/获得dom节点   标签</span></span><br><span class="line"><span class="regexp">var h1 = document.getElementsByTagName('h1')</span></span><br><span class="line"><span class="regexp">var p1 = document.getElementsById('p1')</span></span><br><span class="line"><span class="regexp">var p2 = document.getElementsByClassName('h1')</span></span><br></pre></td></tr></table></figure>

<p>这是原生代码，之后一般会使用JQuery</p>
<blockquote>
<p>更新节点</p>
</blockquote>
<p>操作文本</p>
<ul>
<li>innerText 修改文本值</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.innerText = <span class="string">'456'</span></span><br></pre></td></tr></table></figure>

<ul>
<li>可以解析HTML文本标签</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.innrtHTML = <span class="string">'&lt;strong&gt;123&lt;/strong&gt;'</span></span><br></pre></td></tr></table></figure>

<p>操作JS</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">id1.style.color = <span class="string">'yellow'</span>;</span><br><span class="line">id1.style.fontSize = <span class="string">'20px'</span>;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>删除节点</p>
</blockquote>
<p>删除节点的步骤：先获取父节点，在通过父节点删除自己</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;div id =<span class="string">"father"</span>&gt;</span><br><span class="line">	&lt;h1&gt;标题一&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">	&lt;p id = "p1"&gt;p1&lt;/</span>p&gt;</span><br><span class="line">	&lt;p <span class="class"><span class="keyword">class</span> </span>= <span class="string">"p2"</span>&gt;p2&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>div&gt;</span><br><span class="line"></span><br><span class="line">father.removeChild(p1)</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除是一个动态的过程</span></span><br><span class="line">father.removeChild(father.children[<span class="number">0</span>])</span><br><span class="line">father.removeChild(father.children[<span class="number">1</span>])</span><br><span class="line">father.removeChild(father.children[<span class="number">2</span>])</span><br></pre></td></tr></table></figure>

<p>注意：删除多个节点的时候，children是在时刻变化的，删除节点的时候一定要注意</p>
<blockquote>
<p>插入节点</p>
</blockquote>
<p>我们获得了某个DOM节点，假设这个DOM节点是空的，我们通过innerHTML就可以增加一个元素，但是这个DOM节点已经存在元素了，就不能这么做了，会产生覆盖。</p>
<ul>
<li>追加    appendChild</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;p id = <span class="string">'js'</span>&gt;JavaScript&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id = 'list'&gt;</span></span><br><span class="line"><span class="regexp">    &lt;p id = "se"&gt;JavaSE&lt;/</span>p&gt;</span><br><span class="line">	&lt;p id = <span class="string">"ee"</span>&gt;JavaEE&lt;<span class="regexp">/p&gt;</span></span><br><span class="line"><span class="regexp">	&lt;p id = "me"&gt;JavaME&lt;/</span>p&gt;</span><br><span class="line">&lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">        var js = docoment.getElmentById('js');</span></span><br><span class="line"><span class="regexp">		var list = docoment.getElmentById('list');</span></span><br><span class="line"><span class="regexp">		list.appendChild(js);/</span><span class="regexp">/追加到后面</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure>

<ul>
<li>创建一个新的标签,实现插入    document.createElement</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> js = <span class="built_in">document</span>.getElementById(<span class="string">'js'</span>);   <span class="comment">//已经存在的节点</span></span><br><span class="line">	<span class="keyword">var</span> list = <span class="built_in">document</span>.getElementById(<span class="string">'list'</span>);</span><br><span class="line"><span class="comment">// 通过JS创建一个新的节点</span></span><br><span class="line">	<span class="keyword">var</span> newP = <span class="built_in">document</span>.createElement(<span class="string">'p'</span>);<span class="comment">//创建一个P标签</span></span><br><span class="line">	newP.id = <span class="string">'newP'</span>;</span><br><span class="line">	newP.innerText = <span class="string">'Helllo,kuangshen'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个标签节点</span></span><br><span class="line">	<span class="keyword">var</span> myScript = <span class="built_in">document</span>.creatElement(<span class="string">'script'</span>);</span><br><span class="line">	myScript.setAttribute(<span class="string">'type'</span>,<span class="string">'text/css'</span>);</span><br><span class="line"><span class="comment">//可以创建一个style标签</span></span><br><span class="line"><span class="keyword">var</span> myStyle = <span class="built_in">document</span>.creatElement(<span class="string">'style'</span>);<span class="comment">//创建了一个空style</span></span><br><span class="line">myStyle.setAttribute(<span class="string">'type'</span>,<span class="string">'text/css'</span>);</span><br><span class="line">myStyle.innerHTML = <span class="string">'body&#123;background-color;chartreuse;&#125;'</span>;<span class="comment">//设置标签内容</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.getElementsByTagName(<span class="string">'head'</span>)[<span class="number">0</span>].appengchild(myStyle)</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="操作表单（验证）"><a href="#操作表单（验证）" class="headerlink" title="操作表单（验证）"></a>操作表单（验证）</h2><blockquote>
<p>表单是什么     form  DOM树</p>
</blockquote>
<ul>
<li>文本框    text</li>
<li>下拉框     select</li>
<li>单选框      radio</li>
<li>多选框      checkbox</li>
<li>隐藏域      hidden</li>
<li>密码框      password</li>
<li>……….</li>
</ul>
<p>表单的目的：提交信息</p>
<blockquote>
<p>获得要提交的信息</p>
</blockquote>
<ul>
<li>得到输入框的值      input_text.value</li>
<li>修改输入框的值       input_text.value = ‘123’</li>
<li>对于单选框，多选框等等固定的值，boy_radio.value只能取到当前的值，</li>
<li>查看返回的结果       boy_radio.checked;      </li>
</ul>
<p>提交表单</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;form action=<span class="string">"post"</span>&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    	&lt;span&gt;用户名：&lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"username"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line">	&lt;p&gt;</span><br><span class="line">    	&lt;span&gt;密码：&lt;span&gt;<span class="xml"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"password"</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span></span><br><span class="line"><span class="comment">//绑定事件   onclick  被点击</span></span><br><span class="line">	&lt;button type=<span class="string">"button"</span> onclick=<span class="string">"aaa()"</span>&gt;提交&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">aaa</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        alert(<span class="number">1</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="JQuery"><a href="#JQuery" class="headerlink" title="JQuery"></a>JQuery</h2><p>JavaScript</p>
<p>JQuery库，里面存在大量的javascript函数</p>
<blockquote>
<p>获取JQuery</p>
</blockquote>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>= <span class="string">"&lt;script src="</span><span class="attr">http:</span>//<span class="attr">code.jquery.com</span>/<span class="attr">jquery-migrate-1.2.1.min.js</span>"&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span>"&gt;</span><br></pre></td></tr></table></figure>

<p>公式：</p>
<p>$(selector   选择器).action()</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">两种方法</span><br><span class="line"></span><br><span class="line">&lt;a href=<span class="string">""</span> id=<span class="string">"test-jquery"</span>&gt;点我&lt;<span class="regexp">/a&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">    document.getElementById('id');</span></span><br><span class="line"><span class="regexp">	</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">/</span><span class="regexp">/选择器就是CSS选择器</span></span><br><span class="line"><span class="regexp">$('#text-jquery').click(function()&#123;</span></span><br><span class="line"><span class="regexp">    alert('hello,jquery');</span></span><br><span class="line"><span class="regexp">&#125;)</span></span><br></pre></td></tr></table></figure>

<p>选择器</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">  <span class="comment">//原生JS，选择器少，麻烦不好记</span></span></span><br><span class="line"><span class="actionscript">    <span class="comment">//标签</span></span></span><br><span class="line"><span class="javascript">    <span class="built_in">document</span>.getElementsByTagName();</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//id</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">document</span>.getElementsById();</span></span><br><span class="line"><span class="actionscript">	<span class="comment">//类</span></span></span><br><span class="line"><span class="javascript">	<span class="built_in">document</span>.getElementsByClassName();</span></span><br><span class="line">    </span><br><span class="line">   </span><br><span class="line"><span class="actionscript">  <span class="comment">//JQuery  css  中的选择器他全部都能用</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'p'</span>).click();<span class="comment">//标签选择器</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'#id1'</span>).click();<span class="comment">//id选择器</span></span></span><br><span class="line"><span class="javascript">    $(<span class="string">'.class'</span>).click();<span class="comment">//class选择器</span></span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>文档工具站：<a href="https://jquery.cuishifeng.cn/" target="_blank" rel="noopener">https://jquery.cuishifeng.cn/</a></p>
<blockquote>
<p>事件</p>
</blockquote>
<ul>
<li>鼠标事件</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">//按下</span></span><br><span class="line">mousedown()(JQuery)</span><br><span class="line"><span class="comment">//离开</span></span><br><span class="line">mouseleave()(JQuery)</span><br><span class="line"><span class="comment">//移动</span></span><br><span class="line">mousemove()(JQuery)</span><br><span class="line"><span class="comment">//点击结束</span></span><br><span class="line">mouseover()(JQuery)</span><br></pre></td></tr></table></figure>



<ul>
<li>键盘事件</li>
<li>其他事件</li>
</ul>
<h3 id="操作DOM元素"><a href="#操作DOM元素" class="headerlink" title="操作DOM元素"></a>操作DOM元素</h3><p>节点文本操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).text();<span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">'#test-ul li[name-python]'</span>).text(<span class="string">'设置值'</span>)；<span class="comment">//设置值</span></span><br><span class="line">$(<span class="string">'#test-ul'</span>).html();  <span class="comment">//获得值</span></span><br><span class="line">$(<span class="string">'#test-ul'</span>).html(<span class="string">'设置值'</span>)  <span class="comment">//设置值</span></span><br></pre></td></tr></table></figure>

<p>CSS的操作</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).css(&#123;<span class="string">"color"</span>,<span class="string">"red"</span>&#125;)</span><br></pre></td></tr></table></figure>

<p>元素的显示和隐藏：本质 display:none</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).show()</span><br><span class="line">$(<span class="string">'#test-ul li[name=python]'</span>).hide()</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>JSON</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/05/JSON/</url>
    <content><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON<a id="more"></a></h1><p><strong>要求及语法格式</strong></p>
<ul>
<li>对象表示为键值对</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"> &lt;!-- 键名写在前面并用双引号<span class="string">""</span>包裹，使用:分割，然后紧接着值--&gt;</span><br><span class="line">&#123;<span class="string">"name"</span>:<span class="string">"qinjiang"</span>&#125;</span><br><span class="line">&#123;<span class="string">"age"</span>:<span class="string">"3"</span>&#125;</span><br><span class="line">&#123;<span class="string">"sex"</span>:<span class="string">"男"</span>&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>数据由逗号分割</li>
<li>花括号保存对象</li>
<li>方括号保存数组</li>
</ul>
<p><strong>JSON和JS对象的关系</strong>:</p>
<p>JSON是JS对象的字符串表示法，他使用文本表示一个JS对象的信息，本质是一个字符串。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;<span class="attr">a</span>:<span class="string">'hello'</span>,<span class="attr">b</span>:<span class="string">'World'</span>&#125;;<span class="comment">//这是一个对象，注意键名也是可以使用引号包裹。</span></span><br><span class="line"><span class="keyword">var</span> json = <span class="string">'&#123;"a":"Hello","b":"World"&#125;'</span>;<span class="comment">//这是一个JSON字符串，本质是一个字符串</span></span><br></pre></td></tr></table></figure>

<p><strong>JSON和JS对象互转</strong></p>
<p>JSON字符串转换为JS对象，使用JSON.parse()方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="built_in">JSON</span>.parse(<span class="string">'&#123;"a":"Hello","b":"World"&#125;'</span>);</span><br><span class="line"><span class="comment">//结果是&#123;a:'Hello',b:'World'&#125;</span></span><br></pre></td></tr></table></figure>

<p>JS对象转换为JSON字符串，使用JSON.stringify()方法：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> json = <span class="built_in">JSON</span>.stringify(&#123;<span class="attr">a</span>:<span class="string">'Hello'</span>,<span class="attr">b</span>:<span class="string">'World'</span>&#125;);</span><br><span class="line"><span class="comment">//结果是'&#123;"a":"Hello","b":"World"&#125;'</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase-IO</title>
    <url>/Mr-lee-MQ.hithub.io/2020/09/20/Javase-IO/</url>
    <content><![CDATA[<h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O<a id="more"></a></h1><h2 id="IO概述"><a href="#IO概述" class="headerlink" title="IO概述"></a>IO概述</h2><p>Java中的I/O操作主要是指使用Java.io包下的内容，进行输入，输出操作。输入也叫做读取数据，输出也叫做写出数据。</p>
<ul>
<li>根据数据的流向分为:输入流和输出流<ul>
<li>输入流:把数据从其它设备上读取到内存中的流</li>
<li>输出流:把数据从内存中写到其它设备上的流。</li>
</ul>
</li>
<li>格局数据的类型分为:字节流和字符流。</li>
</ul>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/20/Javase-IO/sp200921_152057.png" alt="sp200921_152057"></p>
<h2 id="字节流"><a href="#字节流" class="headerlink" title="字节流"></a>字节流</h2><h3 id="字节输出流-OutputStream"><a href="#字节输出流-OutputStream" class="headerlink" title="字节输出流 OutputStream"></a>字节输出流 OutputStream</h3><p>OutputStream 抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。输出流接受输出字节并将这些字节发送到某个接收器。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Java.io.OutputStream 抽象类是表示字节输出流的所有类的超类，将指定的字节信息写出到目的地。它定义了字节输出流的基本共性功能方法。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	public void close();关闭此输出流并释放与此流相关联的任何系统资源。</span></span><br><span class="line"><span class="comment">	public void flush();刷新此输出流并强制任何缓冲的输出字节被写出。</span></span><br><span class="line"><span class="comment">	public void write(byte[] b);将b.length字节从指定的字节数组写入到此输出流。</span></span><br><span class="line"><span class="comment">	public void write(byte[] b, int off, int len);从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。</span></span><br><span class="line"><span class="comment">	public abstract void write(int b);将指定的字节输出流。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.io.FileOutputStream extends OutputStream</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">FileOutputStream:文件字节输出流</span></span><br><span class="line"><span class="comment">作用:把内存中的数据写入到硬盘的文件中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	构造方法：</span></span><br><span class="line"><span class="comment">	FileOutputStream(String name)创建一个具有指定名称的文件中写入数据的输出文件流。</span></span><br><span class="line"><span class="comment">	FileOutputStream(File file)创建一个向指定File对象表示的文件中写入数据的文件输出流。</span></span><br><span class="line"><span class="comment">	参数：写入数据的目的</span></span><br><span class="line"><span class="comment">		String name:目的地是一个文件的路径。</span></span><br><span class="line"><span class="comment">		File file:目的地是一个文件</span></span><br><span class="line"><span class="comment">	构造方法的作用:</span></span><br><span class="line"><span class="comment">    	1.创建一个FileOutputStream对象</span></span><br><span class="line"><span class="comment">    	2.会根据构造方法中传递的文件/文件路径，创建一个空的文件。</span></span><br><span class="line"><span class="comment">    	3.会把FileOutputStream对象指向创建好的文件。</span></span><br><span class="line"><span class="comment">    	</span></span><br><span class="line"><span class="comment">	写入数据的原理：</span></span><br><span class="line"><span class="comment">		Java程序--&gt;JVM(java虚拟机)--&gt;OS(操作系统)--&gt;OS调用写数据的方法--&gt;把数据写入文件中</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		字节输出流的使用步骤(重点):</span></span><br><span class="line"><span class="comment">			1.创建一个FileOutputStream对象，构造方法中传递写入数据的目的地。</span></span><br><span class="line"><span class="comment">			2.调用FileOutputStream对象中的方法write，把数据写入到文件中。</span></span><br><span class="line"><span class="comment">			3.释放资源(流使用会占用一定的内存，使用完毕要把内存清空，提高程序的效率)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01OutputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个FileOutputStream对象，构造方法中传递写入数据的目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"09.IOAndProperties\\a.txt"</span>);</span><br><span class="line">        <span class="comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中。</span></span><br><span class="line">        <span class="comment">//public abstract void write(int b);将指定的字节输出流。</span></span><br><span class="line">        fos.write(<span class="number">97</span>);</span><br><span class="line">        fos.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>文件存储原理</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/20/Javase-IO/sp200922_155941.png" alt="sp200922_155941"></p>
<h3 id="字节输出流写多个字节的方法"><a href="#字节输出流写多个字节的方法" class="headerlink" title="字节输出流写多个字节的方法"></a>字节输出流写多个字节的方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">一次写多个字节的方法:</span></span><br><span class="line"><span class="comment">	public void write(byte[] b):将b.length字节从指定的字节数组写入此输出流</span></span><br><span class="line"><span class="comment">	public void write(byte[], int off, int len):从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"> <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02OutputStream</span></span>&#123;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">         <span class="comment">//创建FileOutputStream对象，构造方法</span></span><br><span class="line">         FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="keyword">new</span> File(<span class="string">"09_IOAndProperties\\b.txt"</span>));</span><br><span class="line">         <span class="comment">//调用FileOutputStream对象中的方法write，把数据写入到文件中。</span></span><br><span class="line">         <span class="comment">//在文件中显示100，写个字节</span></span><br><span class="line">         fos.write(<span class="number">49</span>);</span><br><span class="line">         fos.write(<span class="number">48</span>);</span><br><span class="line">         fos.write(<span class="number">48</span>);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         	public void write(byte[] b):将b.length字节从指定的字节数组写入此输出流。</span></span><br><span class="line"><span class="comment">         	一次写多个字节:</span></span><br><span class="line"><span class="comment">         		如果写的第一个字节是正数，那么显示的时候会查询ASCII码表。</span></span><br><span class="line"><span class="comment">         		如果写的第一个字母是负数，那第一个字节会和第二个字节，两个字节组成一个中文显示，查询系统默认码表(GBK)</span></span><br><span class="line"><span class="comment">         		</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="keyword">byte</span>[] bytes = &#123;-<span class="number">65</span>,-<span class="number">66</span>,-<span class="number">67</span>,<span class="number">68</span>,<span class="number">69</span>&#125;;<span class="comment">//[烤暘E]</span></span><br><span class="line">         fos.write(bytes);</span><br><span class="line">         </span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         public void write(byte[], int off, int len):把字节数组的一部分写入文件中</span></span><br><span class="line"><span class="comment">         从指定的字节数组写入len字节，从偏移量off开始输出到此输出流。</span></span><br><span class="line"><span class="comment">         int off:数组的开始索引</span></span><br><span class="line"><span class="comment">         int len:写几个字节</span></span><br><span class="line"><span class="comment">         </span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         fos.write(<span class="keyword">byte</span>, <span class="number">1</span>, <span class="number">2</span>);<span class="comment">//BC</span></span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="comment">/*</span></span><br><span class="line"><span class="comment">         写入字符的方法：可以使用String类中的方法把字符串，转换为字节数组。</span></span><br><span class="line"><span class="comment">         byte[] getBytes()  把字符串转换为字节数组</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">         <span class="keyword">byte</span>[] bytes2 = <span class="string">"你好"</span>.getBytes();</span><br><span class="line">         System.out.println(Arrays.toString(bytes2));<span class="comment">//[-28, -67, -96, -27, -91, -67]</span></span><br><span class="line">         fos.write(bytes2);</span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         </span><br><span class="line">         <span class="comment">//释放资源</span></span><br><span class="line">         fos.close();</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>

<h3 id="数据追加续写"><a href="#数据追加续写" class="headerlink" title="数据追加续写"></a>数据追加续写</h3><p>每次运行程序时，创建输出流对象，都会清空目标文件中的数据。如何保留目标文件中数据，还能继续添加新数据呢</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">追加写/续写：使用两个参数的构造方法</span></span><br><span class="line"><span class="comment">	FileOutputStream(String name, boolean append)创建一个向具有指定  name  的文件中写入数据的输出文件流</span></span><br><span class="line"><span class="comment">	FileOutputStream(File file, boolean append)创建一个向指定File对象表示的文件中写入数据的文件输出流。</span></span><br><span class="line"><span class="comment">	参数：</span></span><br><span class="line"><span class="comment">		String name，File file:写入数据的目的地</span></span><br><span class="line"><span class="comment">		boolean append:追加写开关</span></span><br><span class="line"><span class="comment">			true:创建对象不会覆盖源文件，继续在文件的末尾追加写数据</span></span><br><span class="line"><span class="comment">			false:创建一个新文件，覆盖源文件</span></span><br><span class="line"><span class="comment">写换行：写换行符号</span></span><br><span class="line"><span class="comment">	windows:\r\n</span></span><br><span class="line"><span class="comment">	linux:/n</span></span><br><span class="line"><span class="comment">	mac:/r</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03OutputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      FileOutputStream fos = <span class="keyword">new</span> fileOutputStream(<span class="string">"09_IOAndProperties\\c.txt,true"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">            fos.write(<span class="string">"你好"</span>.getBytes());</span><br><span class="line">            fos.write(<span class="string">"\r\n"</span>.getBytes());</span><br><span class="line">        &#125;</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字节输入流"><a href="#字节输入流" class="headerlink" title="字节输入流"></a>字节输入流</h3><p>Java.io.InputStream抽象类是表示字节输入流的所有类的超类，可以读取字节信息到内存中。他定义了字节输入流的基本共性功能方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Java.io.InputStream:字节输入流</span></span><br><span class="line"><span class="comment">	此抽象类是表示字节输入流的所有类的超类。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	定义了所有子类共性的方法：</span></span><br><span class="line"><span class="comment">		int read()从输入流中读取数据的下一个字节。</span></span><br><span class="line"><span class="comment">		int read(byte[] b)从输入流中读取一定数量的字节，并将其存储在缓冲区数组 b 中。</span></span><br><span class="line"><span class="comment">		void close()关闭此输入流并释放与该流关联的所有系统资源。</span></span><br><span class="line"><span class="comment">	Java.io.FileInputStream extends InputStream</span></span><br><span class="line"><span class="comment">	FileInputStream:文件字节输入流</span></span><br><span class="line"><span class="comment">	作用：把硬盘文件中的数据。读取到内存中使用</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	构造方法:</span></span><br><span class="line"><span class="comment">		FileInputStream(String name)</span></span><br><span class="line"><span class="comment">		FileInputStream(File file)</span></span><br><span class="line"><span class="comment">		参数：读取文件的数据源</span></span><br><span class="line"><span class="comment">			String name：文件的路径</span></span><br><span class="line"><span class="comment">			File file：文件</span></span><br><span class="line"><span class="comment">		构造方法的使用：</span></span><br><span class="line"><span class="comment">			1.会创建一个FileInputStream对象</span></span><br><span class="line"><span class="comment">			2.会把FileInputStream对象指定构造方法中要读取的文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="读取字节数据"><a href="#读取字节数据" class="headerlink" title="读取字节数据"></a>读取字节数据</h3><p>读取字节：read方法，每次可以读取一个字节的数据，提升为int类型，读取到文件末尾，返回-1。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">读取数据的原理(硬盘--&gt;内存)</span></span><br><span class="line"><span class="comment">	java程序--&gt;JVM--&gt;OS--&gt;OS读取数据的方法--&gt;读取文件</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">字节输入流的使用步骤(重点)</span></span><br><span class="line"><span class="comment">	1.创建FileInputStream对象，构造方法中绑定要读取的数据源</span></span><br><span class="line"><span class="comment">	2.使用FileInputStream对象中的方法read，读取文件</span></span><br><span class="line"><span class="comment">	3.释放资源</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建FileInputStream对象，构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"09_IOAndProperties\\a.txt"</span>);</span><br><span class="line">        <span class="comment">//使用FileInputStream对象中的方法read，读取文件</span></span><br><span class="line">        <span class="comment">//int read()读取文件中的一个字节并返回，读取到文件的末尾返回-1。</span></span><br><span class="line">        <span class="keyword">int</span> len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//97  a</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//98  b</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//99  c</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//  -1</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read();</span><br><span class="line">        System.out.println(len);<span class="comment">//  -1</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        读取文件是一个重复的过程，所以可以用循环优化</span></span><br><span class="line"><span class="comment">        while循环结束条件，读取到-1的时候结束</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> len =<span class="number">0</span>;<span class="comment">//记录读取到的字节</span></span><br><span class="line">        <span class="keyword">while</span>((len = fis.read())!= -<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)len);<span class="comment">//abc</span></span><br><span class="line">        &#125;</span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>文件读取一个字节原理</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/20/Javase-IO/sp200923_081602.png" alt="sp200923_081602"> </p>
<h3 id="字节输入流一次读取多个字节"><a href="#字节输入流一次读取多个字节" class="headerlink" title="字节输入流一次读取多个字节"></a>字节输入流一次读取多个字节</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">字节输入流一次读取多个字节的方法:</span></span><br><span class="line"><span class="comment">	int read(byte[] b)从输入流中读取一定数量的字符，并将其存储在缓冲区数组b中。</span></span><br><span class="line"><span class="comment">明确两件事情：</span></span><br><span class="line"><span class="comment">	1.方法的参数byte[] 的作用?</span></span><br><span class="line"><span class="comment">	起到缓冲作用，存储每次读取到的多个字节</span></span><br><span class="line"><span class="comment">	数组的长度一般定义为1024(1KB)或者1024的整数倍</span></span><br><span class="line"><span class="comment">	2.方法的返回值int 是什么?</span></span><br><span class="line"><span class="comment">	每次读取的有效字节个数	</span></span><br><span class="line"><span class="comment">String类的构造方法</span></span><br><span class="line"><span class="comment">	String(byte[] bytes):把字节数组转换为字符串</span></span><br><span class="line"><span class="comment">	String(byte[] bytes, int offset, int length) 把字节数组的一部分转换为字符串 </span></span><br><span class="line"><span class="comment">		offset:数组的开始索引</span></span><br><span class="line"><span class="comment">		length:转换的字节个数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InputStream</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建FileInputStream对象，构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"09_IOAndProperties\\b.txt"</span>);</span><br><span class="line">        <span class="comment">//使用FileInputStream对象的方法read读取文件</span></span><br><span class="line">        <span class="comment">//int read(byte[] b)从输入流中读取一定数量的字节，并将其存储在缓冲区数组  b 中。</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">2</span>];</span><br><span class="line">        <span class="keyword">int</span> len = fis.read(bytes);</span><br><span class="line">        System.out.println(len);<span class="comment">//2</span></span><br><span class="line">        System.out.println(Array.toString(bytes));<span class="comment">//[65, 66]</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));<span class="comment">//AB</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read(bytes);</span><br><span class="line">        System.out.println(len);<span class="comment">//2</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));<span class="comment">//CD</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read(bytes);</span><br><span class="line">        System.out.println(len);<span class="comment">//1</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));<span class="comment">//ED</span></span><br><span class="line">        </span><br><span class="line">        len = fis.read(bytes);</span><br><span class="line">        System.out.println(len);<span class="comment">//-1</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> String(bytes));<span class="comment">//ED</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        读取也是一个重复的过程，可以使用循环优化</span></span><br><span class="line"><span class="comment">        用while循环</span></span><br><span class="line"><span class="comment">        while循环结束的条件，读取到-1结束 </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];<span class="comment">//存储读到的多个字节</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//记录每次读取的有效字节个数</span></span><br><span class="line">        <span class="keyword">while</span>((len = fis.read(bytes))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//String(byte[] bytes, int offset, int length)把字节数组的一部分转换为字符串</span></span><br><span class="line">            offset:数组的开始索引</span><br><span class="line">            length:转换的字节个数</span><br><span class="line">         System.out.println(<span class="keyword">new</span> String(bytes,<span class="number">0</span>,len));</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fid.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>文件读取多个字节原理</strong></p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/20/Javase-IO/sp200923_085831.png" alt="sp200923_085831"></p>
<h3 id="文件复制"><a href="#文件复制" class="headerlink" title="文件复制"></a>文件复制</h3><p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/20/Javase-IO/sp200923_092941.png" alt="sp200923_092941"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">文件复制的练习：一读一写</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">明确：</span></span><br><span class="line"><span class="comment">	数据源：c\\1.jpg</span></span><br><span class="line"><span class="comment">	书救援的目的地: d\\1.jpg</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">文件复制的步骤：</span></span><br><span class="line"><span class="comment">	1.创建一个字节输入流对象，构造方法中绑定要读取的数据源</span></span><br><span class="line"><span class="comment">	2.创建一个字节输出流对象，构造方法中绑定要写入的目的地</span></span><br><span class="line"><span class="comment">	3.使用字节输入流对象中的方法read读取文件</span></span><br><span class="line"><span class="comment">	4.使用字节输出流中的方法write，把读取到的字节写入到目的地文件中</span></span><br><span class="line"><span class="comment">	5.释放资源</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01CopyFile</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建一个字节输入流对象，构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileInputStream fis = <span class="keyword">new</span> FileInputStream(<span class="string">"c:\\1.jpg"</span>);</span><br><span class="line">        <span class="comment">//创建一个字节输出流对象，构造方法中绑定要写入的目的地</span></span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream(<span class="string">"d:\\1.jpg"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">       </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第一种方法：使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fis.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//使用字节输出流中的方法write，把读取到的字节写入到目的地文件中</span></span><br><span class="line">            fos.write(len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//第二种方法：使用数组缓冲读取多个字节，写入多个字节</span></span><br><span class="line">        <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">//使用字节输入流对象中的方法read读取文件</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//每次 读取的有效字节个数</span></span><br><span class="line">        <span class="keyword">while</span>(len = fis.read(bytes)!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">//使用字节输出流中的方法write，把读取到的字节写入到目的地文件中</span></span><br><span class="line">            fos.write(bytes, <span class="number">0</span>,len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//释放资源(先关闭写的，后关闭取的)</span></span><br><span class="line">        fos.close();</span><br><span class="line">        fis.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="字符流"><a href="#字符流" class="headerlink" title="字符流"></a>字符流</h2><p>当使用字节流读取文本文件时，可能会有一些问题。就是遇到中文字符时，可能不会显示完整的字符，那是因为一个中文字符可能会占用多个字节存储。所以java提供了一些字符流类，以字符为单位读写数据，专门用于处理文本文件。</p>
<h3 id="字符输入流-Reader"><a href="#字符输入流-Reader" class="headerlink" title="字符输入流  [Reader]"></a>字符输入流  [Reader]</h3><p>java.io.Reader抽象类是表示用于读取字符流的所有类的超类，可以读取字符信息到内存中。他定义了字符输入流的基本共性功能方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.io.Reader:字符输入流，是字符输入流的超类，定义了一些共性的成员方法，是一个抽象类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">共性的成员方法：</span></span><br><span class="line"><span class="comment">	int read() 读取单个字符并返回。</span></span><br><span class="line"><span class="comment">	int read(char[] cbuf) 一次读取多个字符，将字符写入数组。</span></span><br><span class="line"><span class="comment">	void close() 关闭该流并释放与之关联的所有资源</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">java.io.FileReader extends InputStreamReader extends Reader</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">FileReader:文件字符输入流</span></span><br><span class="line"><span class="comment">作用:把硬盘文件中的数据以字符的方式读取到内存中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">构造方法:</span></span><br><span class="line"><span class="comment">	FileReader(String fileName)</span></span><br><span class="line"><span class="comment">	FileReader(File file)</span></span><br><span class="line"><span class="comment">	参数:读取文件的数据源</span></span><br><span class="line"><span class="comment">		String fileName:文件的路径</span></span><br><span class="line"><span class="comment">		File file:一个文件</span></span><br><span class="line"><span class="comment">	fileReader构造方法的作用:</span></span><br><span class="line"><span class="comment">		1.创建一个FileReader对象</span></span><br><span class="line"><span class="comment">		2.会把FileReader对象指向要读取的文件</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">字符输入流的使用步骤:</span></span><br><span class="line"><span class="comment">	1.创建FileReader对象，构造方法中绑定要读取的数据源</span></span><br><span class="line"><span class="comment">	2.使用FileReader对象中的方法read读取文件</span></span><br><span class="line"><span class="comment">	3.释放资源</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Reader</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException</span>&#123;</span><br><span class="line">        <span class="comment">//1.创建FileReader对象，构造方法中绑定要读取的数据源</span></span><br><span class="line">        FileReader fr = <span class="keyword">new</span> FileReader(<span class="string">"09_IOAndProperties\\c.txt"</span>);</span><br><span class="line">        <span class="comment">//2.使用FileReader对象中的方法read读取文件</span></span><br><span class="line">        <span class="comment">//int read()读取单个字符并返回。</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>((len = fr.read())!=-<span class="number">1</span>)&#123;</span><br><span class="line">            System.out.println((<span class="keyword">char</span>)len);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int read(char[] cbuf)一次读取多个字符，将字符写入数组。</span></span><br><span class="line">        <span class="keyword">char</span>[] cs = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">1024</span>];<span class="comment">//存储读取到的多个字符</span></span><br><span class="line">        <span class="keyword">int</span> len = <span class="number">0</span>;<span class="comment">//记录的是每次读取的有效字符个数</span></span><br><span class="line">        <span class="keyword">while</span>((len = fr.read(cs))!=-<span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">            String类的构造方法</span></span><br><span class="line"><span class="comment">            String(char[] value)把字符数组转换为字符串</span></span><br><span class="line"><span class="comment">            String(char[] value, int offset, int count)把字符数组的一部分转换为字符串</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            */</span></span><br><span class="line">            System.out.println(<span class="keyword">new</span> String(cs, <span class="number">0</span>, len));</span><br><span class="line">            </span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.释放资源</span></span><br><span class="line">        fr.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="字符输出流-Writer"><a href="#字符输出流-Writer" class="headerlink" title="字符输出流 [Writer]"></a>字符输出流 [Writer]</h3><p>java.io.Write抽象类是表示用于写出字符流的所有类的超类，将指定的字符信息写出到目的地。他定义了字节输出流的基本共性功能方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.io.Writer:字符输出流，是所有字符输出流的最顶层的父类，是一个抽象类</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">共性的成员方法:</span></span><br><span class="line"><span class="comment">	void write(int c)  写入单个字符</span></span><br><span class="line"><span class="comment">	void write(char[] cbuf)  写入字符数组</span></span><br><span class="line"><span class="comment">	abstract void write(char[] cbuf, int off, int len)  写入字符数组的一部分，off数组的开始索引，len写的字符个数。</span></span><br><span class="line"><span class="comment">	void write(String str)写入字符串。</span></span><br><span class="line"><span class="comment">	void write(String str, int off, int len)  写入字符串的某一部分，off字符串的开始索引，len写的字符个数。</span></span><br><span class="line"><span class="comment">	void flush()  刷新该流的缓冲。</span></span><br><span class="line"><span class="comment">	void close()  关闭此流，但不要先刷新它</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	java.io.FileWriter extends OutputStreamWrite extends Writer</span></span><br><span class="line"><span class="comment">	FileWrite:文件字符输出流</span></span><br><span class="line"><span class="comment">	作用:把内存中字符数据写到文件中</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	构造方法:</span></span><br><span class="line"><span class="comment">		FileWrite(File file)根据给定的 File 对象构造出一个FileWrite 对象。</span></span><br><span class="line"><span class="comment">		FileWrite(String fileName) 根据给定的文件名构造一个FileWrite对象。</span></span><br><span class="line"><span class="comment">		参数:写入数据的目的地</span></span><br><span class="line"><span class="comment">			String fileName:文件的路径</span></span><br><span class="line"><span class="comment">			File file:是一个文件</span></span><br><span class="line"><span class="comment">		构造方法的作用:</span></span><br><span class="line"><span class="comment">			1.会创建一个FileWrite对象。</span></span><br><span class="line"><span class="comment">			2.会根据构造方法中传递的文件/文件的路径，创建文件</span></span><br><span class="line"><span class="comment">			3.会把FileWrite对象指向创建好的文件</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	字符输出流的使用步骤:</span></span><br><span class="line"><span class="comment">		1.创建FileWriter对象，构造方法中绑定要写入数据的目的地</span></span><br><span class="line"><span class="comment">		2.使用FileWrite中的方法write，把数据写入到内存缓冲区中(字符转换为字节的过程)</span></span><br><span class="line"><span class="comment">		3.使用FileWriter中的方法flush，把内存缓冲区的数据，刷新到文件中。</span></span><br><span class="line"><span class="comment">		4.释放资源(会把内存缓冲区中的数据刷新到文件中)</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Writer</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建FileWriter对象，构造方法中绑定要写入数据的目的地</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\d.txt"</span>);</span><br><span class="line">        <span class="comment">//使用FileWrite中的方法write，把数据写入到内存缓冲区中(字符转换为字节的过程)</span></span><br><span class="line">        <span class="comment">//void write(int c) 写入单个字符。</span></span><br><span class="line">        fw.write(<span class="number">97</span>);</span><br><span class="line">        <span class="comment">//3.使用FileWriter中的方法flush，把内存缓冲区的数据，刷新到文件中。</span></span><br><span class="line">        fw.flush();</span><br><span class="line">        <span class="comment">//4.释放资源(会把内存缓冲区中的数据刷新到文件中)</span></span><br><span class="line">        fw.close();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关闭和刷新的区别"><a href="#关闭和刷新的区别" class="headerlink" title="关闭和刷新的区别"></a>关闭和刷新的区别</h3><p>因为内置缓冲区的原因，如果不关闭输出流，无法写出字符到文件中。但是关闭的对象，是无法继续写出数据的。如果我们既想写出数据，又想继续使用流，就需要flush方法了</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">flush和close方法的区别</span></span><br><span class="line"><span class="comment">	flush:刷新缓冲区，该对象可以继续使用</span></span><br><span class="line"><span class="comment">	close:先刷新缓冲区，然后再通知系统释放资源，流对象不能再使用了。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h3 id="字符输出流写数据的其他方法"><a href="#字符输出流写数据的其他方法" class="headerlink" title="字符输出流写数据的其他方法"></a>字符输出流写数据的其他方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf)</span>写入字符数组</span></span><br><span class="line"><span class="function"><span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">write</span><span class="params">(<span class="keyword">char</span>[] cbuf, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>写入字符数组的某一部分，off数组开始索引，len写的字符个数。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">(String str)</span>写入字符串</span></span><br><span class="line"><span class="function">   <span class="keyword">void</span> <span class="title">write</span><span class="params">(String str, <span class="keyword">int</span> off, <span class="keyword">int</span> len)</span>写入字符串的某一部分，off字符串的开始索引，len写的字符个数。</span></span><br></pre></td></tr></table></figure>

<h3 id="字符输出流的续写和换行"><a href="#字符输出流的续写和换行" class="headerlink" title="字符输出流的续写和换行"></a>字符输出流的续写和换行</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">续写和换行</span></span><br><span class="line"><span class="comment">续写,追加写:使用两个参数的构造方法</span></span><br><span class="line"><span class="comment">	FileWriter(String fileName, boolean append)</span></span><br><span class="line"><span class="comment">	FileWriter(File file, boolean append)</span></span><br><span class="line"><span class="comment">	参数:</span></span><br><span class="line"><span class="comment">		String fileName,file file:写入数据的目的地</span></span><br><span class="line"><span class="comment">		boolean append:续写开关 </span></span><br><span class="line"><span class="comment">			true:不会创建新的文件覆盖源文件，可以续写</span></span><br><span class="line"><span class="comment">			false:创建新的文件覆盖源文件</span></span><br><span class="line"><span class="comment">	换行:换行符号</span></span><br><span class="line"><span class="comment">		window:\r\n</span></span><br><span class="line"><span class="comment">		linux:/n</span></span><br><span class="line"><span class="comment">		mac:/r</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="IO异常的处理"><a href="#IO异常的处理" class="headerlink" title="IO异常的处理"></a>IO异常的处理</h2><p>在实际开发中，不能直接把异常抛出，应该使用try….catch….finally代码块。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">在1.7之前使用 try..catch..finally处理流中的异常</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">	try&#123;</span></span><br><span class="line"><span class="comment">		可能会产生异常的代码</span></span><br><span class="line"><span class="comment">	&#125;catch(异常类变量 变量名)&#123;</span></span><br><span class="line"><span class="comment">		异常的处理逻辑</span></span><br><span class="line"><span class="comment">	&#125;finally&#123;</span></span><br><span class="line"><span class="comment">		一定会执行的代码</span></span><br><span class="line"><span class="comment">		资源释放</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01TryCatch</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//提高变量fw的作用域，让finally可以使用</span></span><br><span class="line">        <span class="comment">//变量在定义的时候，可以没有值，但在使用的时候必须有值</span></span><br><span class="line">        <span class="comment">//fw = new FileWriter("09_IOAndProperties\\g.txt", true);执行失败，fw没有值，fw.close会报错</span></span><br><span class="line">        FileWriter fw = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="comment">//可能会产生异常的代码</span></span><br><span class="line">            fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\g.txt"</span>,teue);</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">10</span> ;i++)&#123;</span><br><span class="line">                fw.write(<span class="string">"HelloWorld"</span>+i+<span class="string">"\r\n"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;<span class="keyword">catch</span>(IOException)&#123;</span><br><span class="line">            <span class="comment">//异常的处理逻辑</span></span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            <span class="comment">//一定会执行的代码</span></span><br><span class="line">            <span class="keyword">try</span>&#123;</span><br><span class="line">                <span class="comment">//fw.close方法声明抛出了IOException异常对象。</span></span><br><span class="line">                fw.close(); </span><br><span class="line">            &#125; <span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>JDK1.7的新特性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK7新特性</span></span><br><span class="line"><span class="comment">在try的后面可以增加一个()，在括号中可以定义流对象</span></span><br><span class="line"><span class="comment">那么这个流对象的作用域就在try中有效</span></span><br><span class="line"><span class="comment">try中的代码执行完毕，会自动把流对象释放，不用写finally</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">	try(定义流对象.....)&#123;</span></span><br><span class="line"><span class="comment">	可能会产生异常的代码</span></span><br><span class="line"><span class="comment">	&#125;catch(异常类变量 变量名)&#123;</span></span><br><span class="line"><span class="comment">		异常的处理逻辑</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<p><strong>JDK9新特性</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">JDK9新特性</span></span><br><span class="line"><span class="comment">try的前面可以定义流对象</span></span><br><span class="line"><span class="comment">在try后面的()中可以直接引入流对象的名称(变量名)</span></span><br><span class="line"><span class="comment">在try代码执行完毕之后，流对象也可以释放掉，不用写finally</span></span><br><span class="line"><span class="comment">格式：</span></span><br><span class="line"><span class="comment">	A a = new A();</span></span><br><span class="line"><span class="comment">	B b = new B();</span></span><br><span class="line"><span class="comment">	try(a, b)&#123;</span></span><br><span class="line"><span class="comment">	可能会产生异常的代码</span></span><br><span class="line"><span class="comment">	&#125;catch(异常类的变量 变量名)&#123;</span></span><br><span class="line"><span class="comment">		异常的处理逻辑</span></span><br><span class="line"><span class="comment">	&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<h2 id="属性集"><a href="#属性集" class="headerlink" title="属性集"></a>属性集</h2><h3 id="Properties类"><a href="#Properties类" class="headerlink" title="Properties类"></a>Properties类</h3><p>Properties类表示了一个持久的属性集。Properties可保存在流中或从流中加载。属性列表中每个键及其对应值都是一个字符串。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.Properties集合 extends Hashtable&lt;k,v&gt; implement Map&lt;k,v&gt;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Properties类表示了一个持久的属性集。Properties 可保存在流中或从流中加载。</span></span><br><span class="line"><span class="comment">Properties集合是一个唯一和IO流结合的集合</span></span><br><span class="line"><span class="comment">	可以使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</span></span><br><span class="line"><span class="comment">	可以使用Properties集合中的方法load，把硬盘中保存的文件(键值对)，读取到集合中使用。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	属性列表中每个键及其对应值都是一个字符串。</span></span><br><span class="line"><span class="comment">		Properties集合时一个双列集合，key和value默认都是字符串。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Properties</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    使用Properties集合存储数据。遍历取出Properties集合中的数据</span></span><br><span class="line"><span class="comment">    Properties集合是一个双列集合，key和value默认都是字符串</span></span><br><span class="line"><span class="comment">    Properties集合有一些操作字符串的特有方法</span></span><br><span class="line"><span class="comment">    	Object setPropersites(String key, String value)调用Hashtable的方法 put。</span></span><br><span class="line"><span class="comment">    	String getProperty(String key) 通过key找到value值，此方法相当于Map集合中的get(key)方法。</span></span><br><span class="line"><span class="comment">    	Set&lt;String&gt; stringPropertyNames() 返回此属性列表的键集，其中该键及其对应值是字符串，此方法相当于Map集合中的keySet方法</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;	</span><br><span class="line">        <span class="comment">//创建Properties集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//使用setProperty往集合中添加数据</span></span><br><span class="line">        prop.setProperty(<span class="string">"赵丽颖"</span>， <span class="string">"168"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"迪丽热巴"</span>， <span class="string">"165"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"古力娜扎"</span>， <span class="string">"160"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用stringPropertyNames把集合中的键取出,存储到一个Set集合中</span></span><br><span class="line">        Set&lt;String&gt; set = prop.stringPropertyName();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历Set集合，取出Properties集合的每一个键</span></span><br><span class="line">        <span class="keyword">for</span> (String key : set)&#123;</span><br><span class="line">            <span class="comment">//使用getProperty方法通过key获取value</span></span><br><span class="line">            string value = prop.getProperty(key);</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以使用Properties集合中的方法store，把集合中的临时数据，持久化写入到硬盘中存储</span></span><br><span class="line"><span class="comment">	void store(OutputStream out, String comments)</span></span><br><span class="line"><span class="comment">	void store(Writer writer, String comments)</span></span><br><span class="line"><span class="comment">	参数:</span></span><br><span class="line"><span class="comment">		OutputStream out:字节输出流，不能写入中文</span></span><br><span class="line"><span class="comment">		Writer write:字符输出流，可以写中文</span></span><br><span class="line"><span class="comment">		String comments:注释，用来解释说明保存的文件是做什么的，不能使用中文，会产生乱码，默认是Unicode编码，一般使用""空字符串。</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">		使用步骤:</span></span><br><span class="line"><span class="comment">			1.创建一个Properties集合对象，添加数据。</span></span><br><span class="line"><span class="comment">			2.创建字节输出流/字符输出流对象，构造方法中绑定要输出的目的地</span></span><br><span class="line"><span class="comment">			3.使用Properties集合中的方法store，把集合中的临时数据，持久化写入硬盘中存储。</span></span><br><span class="line"><span class="comment">			4.释放资源。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Properties</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show02();</span><br><span class="line">&#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Properties集合对象</span></span><br><span class="line">        Properties prop = <span class="keyword">new</span> Properties();</span><br><span class="line">        <span class="comment">//使用setProperty往集合中添加数据</span></span><br><span class="line">        prop.setProperty(<span class="string">"赵丽颖"</span>， <span class="string">"168"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"迪丽热巴"</span>， <span class="string">"165"</span>);</span><br><span class="line">        prop.setProperty(<span class="string">"古力娜扎"</span>， <span class="string">"160"</span>); </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建字节输出流/字符输出流对象，构造方法中绑定要输出的目的地.</span></span><br><span class="line">        FileWriter fw = <span class="keyword">new</span> FileWriter(<span class="string">"09_IOAndProperties\\prop.txt"</span>);</span><br><span class="line">        <span class="comment">//使用Properties集合中的方法store,把集合中的临时数据，持久化写入硬盘中存储</span></span><br><span class="line">        prop.store(fw, <span class="string">"save data"</span>);</span><br><span class="line">        <span class="comment">//释放资源</span></span><br><span class="line">        fw.close();</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可以使用Properties集合中的方法load，把硬盘中保存的文件(键值对)，读取到集合中使用。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase_数组</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/21/Javase-%E6%95%B0%E7%BB%84/</url>
    <content><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组<a id="more"></a></h1><h2 id="数组概述"><a href="#数组概述" class="headerlink" title="数组概述"></a>数组概述</h2><ul>
<li>数组是相同类型数据的有序集合</li>
<li>数组描述的是相同类型的若干个数据，按照一定的先后次序排列组合而成</li>
<li>每一个数据称做一个数组元素，每个数组元素可以通过一个下标来访问他们。</li>
</ul>
<h2 id="数组的声明和创建"><a href="#数组的声明和创建" class="headerlink" title="数组的声明和创建"></a>数组的声明和创建</h2><ul>
<li>首先必须声明数组变量，才能在程序中使用数组，下面是声明数组变量的语法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar    <span class="comment">//首选的方法</span></span><br><span class="line">    或</span><br><span class="line">dataType arrayRefVar[]		<span class="comment">//效果相同，但不是首选方法</span></span><br></pre></td></tr></table></figure>

<ul>
<li>Java语言使用new操作符来创建数组，语法如下</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">dataType[] arrayRefVar = <span class="keyword">new</span> dataType[arraySize];</span><br></pre></td></tr></table></figure>

<ul>
<li>数组的元素是通过索引访问的，数组索引从0开始。</li>
<li>获取数组长度   arrays.lengh</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo01</span></span>&#123;</span><br><span class="line">    <span class="comment">//变量的类型   变量的名字  =  变量的值</span></span><br><span class="line">    <span class="comment">//数组类型</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String [] args)</span></span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] nums;	<span class="comment">//定义两种都可</span></span><br><span class="line">        <span class="keyword">int</span> nums2[];</span><br><span class="line">        nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];	<span class="comment">//这里可以存放10个int类型的数字</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//给数组元素赋值</span></span><br><span class="line">        num[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        num[<span class="number">1</span>] = <span class="number">2</span>;</span><br><span class="line">        num[<span class="number">2</span>] = <span class="number">3</span>;</span><br><span class="line">        num[<span class="number">3</span>] = <span class="number">4</span>;</span><br><span class="line">        num[<span class="number">4</span>] = <span class="number">5</span>;</span><br><span class="line">        num[<span class="number">5</span>] = <span class="number">6</span>;</span><br><span class="line">        num[<span class="number">6</span>] = <span class="number">7</span>;</span><br><span class="line">        num[<span class="number">7</span>] = <span class="number">8</span>;</span><br><span class="line">        num[<span class="number">8</span>] = <span class="number">9</span>;</span><br><span class="line">        num[<span class="number">9</span>] = <span class="number">10</span>;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//计算所有元素的和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;nums.length ;i++)&#123;</span><br><span class="line">            sum = sum + nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"总和为："</span>+sum);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="三种初始化及内存分析"><a href="#三种初始化及内存分析" class="headerlink" title="三种初始化及内存分析"></a>三种初始化及内存分析</h2><h3 id="内存分析"><a href="#内存分析" class="headerlink" title="内存分析"></a>内存分析</h3><ul>
<li>堆<ul>
<li>存放new的对象和数组</li>
<li>可以被所有线程共享，不会存放别的对象引用</li>
</ul>
</li>
<li>栈<ul>
<li>存放基础变量类型（会包含这个基础类型的具体数值）</li>
<li>引用对象的变量（会存放这个引用在堆里面的具体地址）</li>
</ul>
</li>
<li>方法区<ul>
<li>可以被所有线程共享</li>
<li>包含了所有的class和static变量</li>
</ul>
</li>
</ul>
<h3 id="三种初始化"><a href="#三种初始化" class="headerlink" title="三种初始化"></a>三种初始化</h3><ul>
<li>静态初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> [] a = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;;</span><br><span class="line">Man[] mans = &#123;<span class="keyword">new</span> Man(<span class="number">1</span>,<span class="number">1</span>),<span class="keyword">new</span> Man(<span class="number">2</span>,<span class="number">2</span>)&#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>动态初始化</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>];</span><br><span class="line">a[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">a[<span class="number">1</span>] = <span class="number">2</span>;</span><br></pre></td></tr></table></figure>

<ul>
<li>数组的默认初始化<ul>
<li>数组是引用类型，它的元素相当于类的实例变量，因此 数组一经分配空间，其中的每个元素也被按照实例变量同样的方式被隐式初始化。</li>
</ul>
</li>
</ul>
<h2 id="下标越界及小结"><a href="#下标越界及小结" class="headerlink" title="下标越界及小结"></a>下标越界及小结</h2><h3 id="数组的四个基本特点"><a href="#数组的四个基本特点" class="headerlink" title="数组的四个基本特点"></a>数组的四个基本特点</h3><ul>
<li>其长度是固定的。数组一旦被创建，它的大小就是不可以改变的。</li>
<li>其元素必须是相同类型，不允许出现混合类型</li>
<li>数组中的元素可以是任何数据类型，包括基本类型和引用类型。</li>
<li>数组变量属于引用类型，数组也可以看成是对象，数组中的每个元素相当于该对象的变量。数组本身就是对象，Java中对象是在堆中的，因此数组无论保存原始类型还是其他对象类型，<strong>数组对象本身是在堆中的</strong>。</li>
</ul>
<h3 id="数组边界"><a href="#数组边界" class="headerlink" title="数组边界"></a>数组边界</h3><ul>
<li>下标的合法区间：[0，length-1]，如果越界就会报错</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> [] a =<span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">2</span>];</span><br><span class="line">    System.out.println(a[<span class="number">2</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>ArrayindexOutOfBoundException:数组下标越界异常</li>
</ul>
<h3 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h3><ul>
<li>数组是相同数据类型（数据类型可以为任意类型）的有序集合</li>
<li>数组也是对象。数组元素相当于对象的成员变量</li>
<li>数组长度是确定的，不可变的。如果越界，则报ArrayindexOutOfBounds</li>
</ul>
<h2 id="数组的使用"><a href="#数组的使用" class="headerlink" title="数组的使用"></a>数组的使用</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> array[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="comment">//打印全部的数组元素</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i =<span class="number">0</span>; i &lt; array.length ; i++ )&#123;</span><br><span class="line">        System.out.println(array[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"=============="</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//计算所有元素的和</span></span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array.length;i++)&#123;</span><br><span class="line">        sum +=array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"sum="</span>+sum);</span><br><span class="line">    System.out.println(<span class="string">"=============="</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//查找最大元素</span></span><br><span class="line">    <span class="keyword">int</span> max = array[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i&lt; array.length;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span> (array[i]&gt;max)&#123;</span><br><span class="line">            max = array[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println(<span class="string">"max="</span>+max);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="增强for"><a href="#增强for" class="headerlink" title="增强for"></a>增强for</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> array[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> array : array)&#123;</span><br><span class="line">     	System.out.println(array[i]);   </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="反转数组"><a href="#反转数组" class="headerlink" title="反转数组"></a>反转数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> [] reverse(<span class="keyword">int</span> [] arrays)&#123;</span><br><span class="line">    <span class="keyword">int</span> [] result = <span class="keyword">new</span> <span class="keyword">int</span> [array.length];</span><br><span class="line">    <span class="comment">//反转的操作</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>,j = result.length-<span class="number">1</span>;i&lt; array.length;i++,j--)&#123;</span><br><span class="line">        result[j] = array[i];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><p>多维数组可以看成数组的数组，比如二维数组就是个特殊的一维数组，其每一个元素都是一个一维数组。</p>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> a[][] = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">2</span>][<span class="number">5</span>];</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span>[][] array = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">2</span>,<span class="number">3</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;j &lt;array[i].length;j++)&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;array[i].length;j++)&#123;</span><br><span class="line">        System.out.println(array[i][j]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Arrays类"><a href="#Arrays类" class="headerlink" title="Arrays类"></a>Arrays类</h2><ul>
<li>数组的工具类java.util.Arrays</li>
<li>由于数组对象本身并没有什么方法可以供我们调用，但API中提供了一个工具类Arrays供我们使用，从而可以对数据对象进行一些基本的操作。</li>
<li>查看JDK帮助文档</li>
<li>Array类中的方法都是static修饰的静态方法，在使用的时候可以直接使用类名进行调用，而不用适用对象来调用。</li>
</ul>
<h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><ul>
<li>给数组赋值：通过fill方法</li>
<li>对数组排序：通过sort方法，按升序。</li>
<li>比较数组：通过equals方法比较数组中元素值是否相等。</li>
<li>查找数组元素：通过binarySearch方法能对排序好的数组进行二分查找操作。</li>
</ul>
<h3 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h3><p>两层循环，外层冒泡轮数，里层依次比较，时间复杂度为O(n2)。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> cclass ArrayDemo&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       </span><br><span class="line">   &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//冒泡排序</span></span><br><span class="line">    <span class="comment">//1.比较数组中，相邻的元素，如果第一个数比第二个数大，我们就交换它们的位置</span></span><br><span class="line">    <span class="comment">//2.每一次比较，都会产生一个最大，或者最小的数字</span></span><br><span class="line">    <span class="comment">//3.下一轮则可以减少一次排序</span></span><br><span class="line">    <span class="comment">//4.依次循环直到结束。</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> [] array)</span></span>&#123;</span><br><span class="line">        <span class="comment">//外层循环，判断我们这个要走多少次；</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;array.length-<span class="number">1</span>; i++)&#123;</span><br><span class="line">            </span><br><span class="line">            <span class="keyword">boolean</span> flag = <span class="keyword">false</span>;<span class="comment">//通过flag标志位减少没有意义的比较</span></span><br><span class="line">            <span class="comment">//内层循环，比较判断两个数，如果第一个数比第二个数大，则交换位置</span></span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>;j&lt;array.length-<span class="number">1</span>-i; j++)&#123;</span><br><span class="line">                <span class="comment">//第一个数和第二个数比较</span></span><br><span class="line">                <span class="keyword">if</span>(array[j+<span class="number">1</span>]&gt;array[j])&#123;</span><br><span class="line">                    </span><br><span class="line">                    <span class="comment">//如果第一个数大于第二个数，交换位置</span></span><br><span class="line">                    temp = array[j];</span><br><span class="line">                    array[j] = array[j+<span class="number">1</span>];</span><br><span class="line">                    array[j+<span class="number">1</span>] = temp;</span><br><span class="line">                    flag = <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag==<span class="keyword">false</span>)&#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> array;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="稀疏数组"><a href="#稀疏数组" class="headerlink" title="稀疏数组"></a>稀疏数组</h2><p>数据结构</p>
<p>为了解决二维数组中的很多值是默认值为0，因此记录了很多没有意义的数据。</p>
<p>解决办法：稀疏数组。</p>
<h3 id="稀疏数组介绍"><a href="#稀疏数组介绍" class="headerlink" title="稀疏数组介绍"></a>稀疏数组介绍</h3><ul>
<li>当一个数组中大部分元素为0，或者为同一个值的数组时，可以用稀疏数组来保存该数组。</li>
<li>稀疏数组的处理方式是：<ul>
<li>记录数组一共有几行几列，有多少个不同值</li>
<li>把具有不同值的元素和行列及值记录在一个小规模的数组中，从而缩小程序的规模</li>
</ul>
</li>
<li>如下图所示：左边为原始数组，右边为稀疏数组</li>
</ul>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/08/21/Javase-%E6%95%B0%E7%BB%84/sp200822_222512.png" alt="sp200822_222512"></p>
 <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ArrayDemo</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//1.创建一个二维数组 11*11    0：没有棋子  1：黑棋  2：白棋</span></span><br><span class="line">        <span class="keyword">int</span>[][] array1 = <span class="keyword">new</span> <span class="keyword">int</span> [<span class="number">11</span>][<span class="number">11</span>];</span><br><span class="line">        array1[<span class="number">1</span>][<span class="number">2</span>] = <span class="number">1</span>;</span><br><span class="line">        array1[<span class="number">2</span>][<span class="number">3</span>] = <span class="number">2</span>;</span><br><span class="line">        <span class="comment">//输出原始的数组</span></span><br><span class="line">        System.out.println(<span class="string">"输出原始的数组"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> [] ints :array1)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> anInt :ints)&#123;</span><br><span class="line">                System.out.println(anInt+<span class="string">"\t"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            System.out.println();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//转换为稀疏数组保存</span></span><br><span class="line">        <span class="comment">//获取有效值的个数</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">11</span>; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>;j&lt;<span class="number">11</span>; j++)&#123;</span><br><span class="line">              <span class="keyword">if</span>(array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                  sum++;</span><br><span class="line">              &#125;  </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"有效值的个数:"</span>+sum);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.创建一个稀疏数组的数组</span></span><br><span class="line">        <span class="keyword">int</span>[][] array2 = <span class="keyword">new</span> <span class="keyword">int</span>[sum+<span class="number">1</span>][<span class="number">3</span>];</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">0</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">1</span>] = <span class="number">11</span>;</span><br><span class="line">        array2[<span class="number">0</span>][<span class="number">2</span>] = sum;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历二维数组，将非零的值存放到稀疏数组。</span></span><br><span class="line">        <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array1.length; i++)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j =<span class="number">0</span>; j&lt;array1.length;j++)&#123;</span><br><span class="line">                <span class="keyword">if</span>(array1[i][j]!=<span class="number">0</span>)&#123;</span><br><span class="line">                    count++;</span><br><span class="line">                    array2[count][<span class="number">0</span>] = i;</span><br><span class="line">                    array2[count][<span class="number">1</span>] = j;</span><br><span class="line">                    array2[count][<span class="number">2</span>] = array1[i][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//输出稀疏数组</span></span><br><span class="line">        System.out.println(<span class="string">"稀疏数组"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i&lt;array2.length;i++)&#123;</span><br><span class="line">            System.out.println(array2[i][<span class="number">0</span>]+<span class="string">"\t"</span>+array2[i][<span class="number">1</span>]+<span class="string">"\t"</span>+array2[i][<span class="number">2</span>]+<span class="string">"\t"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"=================="</span>);</span><br><span class="line">        System.out.println(<span class="string">"还原"</span>)；</span><br><span class="line">            <span class="comment">//1.读取稀疏数组</span></span><br><span class="line">            <span class="keyword">int</span>[][] array3 = <span class="keyword">new</span> <span class="keyword">int</span> [array2[<span class="number">0</span>][<span class="number">0</span>]][array2[<span class="number">0</span>][<span class="number">1</span>]];</span><br><span class="line">        <span class="comment">//2.给其中的元素还原它的值</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt;array2.length;i++)&#123;</span><br><span class="line">            array3[array2[i][<span class="number">0</span>]][array2[i][<span class="number">1</span>]] = array2[i][<span class="number">2</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//3.打印</span></span><br><span class="line">        System.out.println(<span class="string">"输出还原的数组"</span>)；</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> [] ints:array1)&#123;</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> anInt: ints)&#123;</span><br><span class="line">                    System.out.println(anInt+<span class="string">"\t"</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                System.out.println();</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase_方法</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/20/Javase-%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h1 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法<a id="more"></a></h1><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">System.out.println()</span><br><span class="line">    </span><br><span class="line">    System   系统类</span><br><span class="line">    out      对象</span><br><span class="line">    println  方法</span><br></pre></td></tr></table></figure>

<p>方法即是功能块。一个方法完成一个功能，有利于后期的拓展。</p>
<p>命名规则：首字母小写，后用驼峰命名法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">     <span class="keyword">int</span> sum = add(<span class="number">1</span>,<span class="number">2</span>);</span><br><span class="line">     System.<span class="function">out <span class="title">println</span><span class="params">(sum)</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//add就是方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b; </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>方法包含一个方法头和一个方法体。</p>
<ul>
<li>修饰符：定义该方法的访问类型</li>
<li>返回值类型：方法可能会返回值</li>
<li>方法名：方法的实际名称。方法名和参数表共同构成方法签名。</li>
<li>参数类型：方法被调用时，传递值给参数。<ul>
<li>形式参数：在方法被调用时用于接收外界输入的数据</li>
<li>实参：调用方法时实际传给方法的数据</li>
</ul>
</li>
<li>方法体：包含具体的语句，定义该方法的功能。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">修饰符 返回值类型 方法名（参数类型 参数名）&#123;</span><br><span class="line">    ...</span><br><span class="line">    方法体</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> 返回值;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="方法的重载"><a href="#方法的重载" class="headerlink" title="方法的重载"></a>方法的重载</h2><p>重载就是在一个类中，有相同的函数名称，但形参不同的函数。</p>
<p>方法重载的规则：</p>
<ul>
<li>方法名称必须相同</li>
<li>参数列表必须不同</li>
<li>方法的返回值类型可以相同也可以不同</li>
<li>仅仅返回类型不同不足以成为方法的重载。</li>
</ul>
<p>实现理论：</p>
<p>方法名相同时，编译器会根据调用方法的参数个数，参数类型等去逐个匹配，以选择对应的方法，如果匹配失败，则编译器会报错。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ADHero</span> <span class="keyword">extends</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">" 进行了一次攻击 ，但是不确定打中谁了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero h1)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"对"</span> + h1.name + <span class="string">"进行了一次攻击 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">(Hero h1, Hero h2)</span> </span>&#123;</span><br><span class="line">        System.out.println(name + <span class="string">"同时对"</span> + h1.name + <span class="string">"和"</span> + h2.name + <span class="string">"进行了攻击 "</span>);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ADHero bh = <span class="keyword">new</span> ADHero();</span><br><span class="line">        bh.name = <span class="string">"赏金猎人"</span>;</span><br><span class="line"> </span><br><span class="line">        Hero h1 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h1.name = <span class="string">"盖伦"</span>;</span><br><span class="line">        Hero h2 = <span class="keyword">new</span> Hero();</span><br><span class="line">        h2.name = <span class="string">"提莫"</span>;</span><br><span class="line"> </span><br><span class="line">        bh.attack(h1);</span><br><span class="line">        bh.attack(h1, h2);</span><br><span class="line">    &#125;</span><br><span class="line"> </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h2><p>一个方法中只能指定一个可变参数，他必须是方法的最后一个参数，任何普通的参数必须在他之前声明。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//输入若干个double类型数据，比较大小后输出最大值</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String args[])</span></span>&#123;</span><br><span class="line">       printMax(...number:<span class="number">34</span>,<span class="number">3</span>,<span class="number">3</span>,<span class="number">2</span>,<span class="number">56.5</span>);</span><br><span class="line">       printMax(<span class="keyword">new</span> <span class="keyword">double</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>&#125;);</span><br><span class="line">   &#125; </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printMax</span><span class="params">(<span class="keyword">double</span>... number)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(number.length == <span class="number">0</span>)&#123;</span><br><span class="line">            System.out.println(<span class="string">"No argument passed"</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">double</span> result = number[<span class="number">0</span>];</span><br><span class="line">        <span class="comment">//排序</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>;i&lt; number.length;i++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(number[i]&gt;result)&#123;</span><br><span class="line">                result = number[i];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"The max value is "</span> + result)；</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="递归"><a href="#递归" class="headerlink" title="递归"></a>递归</h2><p>递归就是A方法调用A方法，即自己调用自己。</p>
<p>递归结构包括两部分</p>
<ul>
<li>递归头：什么时候不调用自身方法。如果没有头，将进入死循环</li>
<li>递归体：什么时候需要调用自身方法。 </li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//阶乘的算法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] arge)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">f</span><span class="params">(<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(n == <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">return</span> n*f(n:n-<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase-集合</title>
    <url>/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/</url>
    <content><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合<a id="more"></a></h1><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><strong>栈</strong></p>
<ul>
<li><strong>栈：stack</strong>，又称堆栈，它是运算受限的线性表，其限制是仅允许在标的一端进行插入和删除工作，不允许在其他任何位置进行添加，查找，删除等操作</li>
</ul>
<p>简单来说：采用该结构的集合，对元素的存取有如下的特点</p>
<ul>
<li>先进后出（即，存进去的元素，要在他后面的元素依次取出之后，才能取出该元素）。例如，子弹压入弹夹，先压进去的子弹在下面，后压进去的子弹在上面，开枪时，先弹出上面的子弹，才能弹出下面的子弹。</li>
<li>栈的入口，出口都是在栈的顶端位置<img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200909_083630.png" alt="sp200909_083630"></li>
</ul>
<p><strong>队列</strong></p>
<ul>
<li><strong>队列：queue</strong>，简称队，它同堆栈一样，也是一种运算受限的线性表，其限制是仅允许在表的一端进行插入，而在表的另一端进行删除。</li>
</ul>
<p>简单的说，采用该结构的集合，对元素的存取有如下特点：</p>
<ul>
<li><strong>先进先出</strong>，（即存进去的元素，要在后它前面的元素依次取出后，才能取出该元素）。例如：小火车过山洞，车头先进去，车尾后出来。</li>
<li>队列的入口，出口各占一侧，例如，下图中的左侧为入口，右侧为出口。</li>
</ul>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200909_102757.png" alt="sp200909_102757"></p>
<p><strong>数组</strong></p>
<ul>
<li><strong>数组：Array</strong>，是有序的元素数列，数组是在内存中开辟一段连续的空间，并在此空间存放元素。就像是一排出租屋，有100个房间，从001到100每个房间都有固定编号，通过编号可以快速找到租房子的人。</li>
</ul>
<p>简单来说，采用该结构的集合，对元素的存取有如下的特点：</p>
<ul>
<li><p><strong>查找元素快</strong>：通过索引，可以快速访问指定位置的元素</p>
</li>
<li><p><strong>增删元素慢</strong>：指定索引位置增加元素：需要创建一个新数组，将指定新元素存储在指定索引位置，再把原数组元素根据索引，复制到新数组对应索引的位置。</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200909_105827.png" alt="sp200909_105827"></p>
</li>
</ul>
<p><strong>链表</strong></p>
<ul>
<li><strong>链表：linked list</strong>，由一系列节点node（链表中每一个元素称为结点）组成，结点可以在运动时动态生成。每个结点包括两个部分：一个是存储数据元素的数据域，另一个是存储下一个结点地址的指针域。我们常说的链表结构有<strong>单向链表和双向链表</strong>。此处说的是单向链表。</li>
</ul>
<p>简单来说，采用该结构的集合，对元素的存取有如下特点：</p>
<p><strong>单向链表</strong>：链表中只有一条链子，不能保证元素的顺序（存储元素和取出元素的顺序可能不一致）</p>
<p><strong>双向链表</strong>：链表中有两条链子，有一条链子是专门记录元素的顺序，是一个有序集合。</p>
<ul>
<li>多个结点之间，通过地址进行连接。例如：多个人手拉手，每个人使用自己的右手拉住下一个人的左手，依次类推，这样多个人就连在一起了。</li>
<li>查找元素慢：想查找某个元素，需要通过连接的结点，依次向后查找指定元素。</li>
<li>增删元素快：只需要修改连接下个元素的地址即可。</li>
</ul>
<p><strong>红黑树</strong></p>
<ul>
<li><strong>二叉树：binary tree</strong>,是每个结点不超过2的有序树。</li>
</ul>
<p>简单的理解，就是一种类似于我们生活中树的结构，只不过每个结点都最多只能有两个子结点。</p>
<p><strong>二叉树</strong>是每个节点最多有两个子树的树结构，顶点的叫根结点，两边被称作“左子树”和“右子树”。</p>
<p><strong>红黑树</strong>本身就是一个二叉查找树，将节点插入后，该树仍然是一颗二叉查找树，也就意味着树的键值仍然是有序的。</p>
<ul>
<li><p><strong>特点：</strong>趋近于平衡树，<strong>查询的速度非常快</strong>，查询叶子节点最大次数和最小次数不能超过2倍。</p>
</li>
<li><p><strong>约束：</strong></p>
<ul>
<li>节点可以是红色的或者是黑色的</li>
<li>根节点是黑色的</li>
<li>叶子节点（空节点）是黑色的</li>
<li>每个红色的节点的子节点是黑色的</li>
<li>任何一个节点到其每一个叶子节点的所有路径上黑色节点数相同。</li>
</ul>
</li>
<li><p><strong>排序树/查找树</strong></p>
</li>
</ul>
<p>在二叉树的基础上，元素是有大小顺序的，左子树小，右子树大。</p>
<ul>
<li><strong>平衡树</strong></li>
</ul>
<p>左子树和右子树数量相等。<img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200909_152303.png" alt="sp200909_152303"></p>
<h2 id="ArrayList集合"><a href="#ArrayList集合" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h2><h3 id="ArrayList集合概述和基本使用"><a href="#ArrayList集合概述和基本使用" class="headerlink" title="ArrayList集合概述和基本使用"></a>ArrayList集合概述和基本使用</h3><p>java.util.ArrayList是大小可变的数组的实现，存储在内的数据称为元素，此类提供一些方法来操作内部存储的元素，ArrayList中可不断添加元素，其大小也自动增长。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">数组的长度不可以发生改变。</span></span><br><span class="line"><span class="comment">但是ArrayList集合的长度是可以随意变化的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">对于ArrayList来说，由一个尖括号&lt;E&gt;代表泛型。</span></span><br><span class="line"><span class="comment">泛型：也就是装在集合当中的所有元素，全都是统一的什么类型。</span></span><br><span class="line"><span class="comment">注意：泛型只能是引用类型，不能是基本类型。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意事项：</span></span><br><span class="line"><span class="comment">	对于ArrayList集合来说，直接打印得到的不是地址值，而是内容。如果内容为空，得到的是空的中括号。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02ArrayList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建了一个ArrayList集合，集合的名称是list，里面装的全都是String字符串类型的数据。</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);<span class="comment">//[]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//向集合中添加数据，需要用到add方法。</span></span><br><span class="line">        list.add(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        list.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[赵丽颖, 迪丽热巴]</span></span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArrayLiat集合常用方法及遍历"><a href="#ArrayLiat集合常用方法及遍历" class="headerlink" title="ArrayLiat集合常用方法及遍历"></a>ArrayLiat集合常用方法及遍历</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">ArrayList当中的常用方法：</span></span><br><span class="line"><span class="comment">	public boolean add(E e);向集合中添加元素，参数类型和泛型一致</span></span><br><span class="line"><span class="comment">	public E get(int index);从集合中获取元素，参数是索引编号，返回值就是对应位置的元素。</span></span><br><span class="line"><span class="comment">	public E remove(int index);从集合中删除元素，参数是索引编号，返回值就是被删掉的元素。</span></span><br><span class="line"><span class="comment">	public int size();获取集合的尺寸长度，返回值是集合中包含的元素个数。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03ArrayListMethod</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String []args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        System.out.println(list);<span class="comment">//[]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//向集合中添加元素：add</span></span><br><span class="line">        <span class="keyword">boolean</span> success = list.add(<span class="string">"柳岩"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//柳岩</span></span><br><span class="line">        System.out.println(<span class="string">"添加的动作是否成功："</span>+ success);<span class="comment">//true</span></span><br><span class="line">        list.add(<span class="string">"高圆圆"</span>);</span><br><span class="line">        list.add(<span class="string">"赵又廷"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[柳岩， 高圆圆， 赵又廷]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从集合中获取元素：get。索引从0开始。</span></span><br><span class="line">        String name  = list.get(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"第二号索引位置："</span>+name);<span class="comment">//赵又廷</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//从集合中删除元素：remove。索引从0开始。</span></span><br><span class="line">        String whoRemoved = list.remove(<span class="number">3</span>);</span><br><span class="line">        System.out.println(<span class="string">"被删除的人是："</span>+whoRemoved);</span><br><span class="line">        System.out.println(list);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取集合的长度尺寸，也就是其中元素的个数</span></span><br><span class="line">        <span class="keyword">int</span> size = list.size();</span><br><span class="line">        System.out.println(<span class="string">"集合的长度是："</span>+size);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>遍历集合</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04ArrayListEach</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        list.add(<span class="string">"古力娜扎"</span>);</span><br><span class="line">        list.add(<span class="string">"马尔扎哈"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArrayList集合存储基本数据类型"><a href="#ArrayList集合存储基本数据类型" class="headerlink" title="ArrayList集合存储基本数据类型"></a>ArrayList集合存储基本数据类型</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">如果希望向集合ArrayList当中存储基本数据类型，必须使用基本类型对应的包装类。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05ArrayListBasic</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; listA = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//错误写法!泛型只能是引用类型，不能是基本类型</span></span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Integer&gt; listC = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        listC.add(<span class="number">100</span>);</span><br><span class="line">        listC.add(<span class="number">200</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[100, 200]</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">int</span> num = listC.get(<span class="number">1</span>);</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="数值添加到集合"><a href="#数值添加到集合" class="headerlink" title="数值添加到集合"></a>数值添加到集合</h3><p>生成6个1~33之间的随机数，添加到集合，并遍历集合。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01ArrayList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Random对象</span></span><br><span class="line">        Random random = <span class="keyword">new</span> Random();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//创建ArrayList对象</span></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加随机数到集合</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i =<span class="number">0</span>;i&lt;<span class="number">6</span>;i++)&#123;</span><br><span class="line">            <span class="keyword">int</span> r = random.nextInt(<span class="number">33</span>) + <span class="number">1</span>;</span><br><span class="line">            list.add(r);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历集合输出</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>;i &lt;list.size();i++)&#123;</span><br><span class="line">            System.out.println(list.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="对象添加到集合"><a href="#对象添加到集合" class="headerlink" title="对象添加到集合"></a>对象添加到集合</h3><p>自定义4个学生对象，添加到集合，并遍历</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test02ArrayList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;Student&gt;();</span><br><span class="line">        <span class="comment">//创建学生对象</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student(<span class="string">"赵丽颖"</span>,<span class="number">18</span>);</span><br><span class="line">        Student s2 = <span class="keyword">new</span> Student(<span class="string">"唐嫣"</span>,<span class="number">20</span>);</span><br><span class="line">        Student s3 = <span class="keyword">new</span> Student(<span class="string">"景甜"</span>,<span class="number">25</span>);</span><br><span class="line">        Student s4 = <span class="keyword">new</span> Student(<span class="string">"柳岩"</span>,<span class="number">19</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//把学生对象作为元素添加到集合中</span></span><br><span class="line">        list.add(s1);</span><br><span class="line">        list.add(s2);</span><br><span class="line">        list.add(s3);</span><br><span class="line">        list.add(s4);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//遍历集合</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> x = <span class="number">0</span>; x &lt; list.size(); x++)&#123;</span><br><span class="line">            Student s = list.get(x);</span><br><span class="line">            System.out.println(s.getName()+<span class="string">"---"</span>+s.getAge());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="打印集合方法"><a href="#打印集合方法" class="headerlink" title="打印集合方法"></a>打印集合方法</h3><p>定义指定格式打印集合的方法（ArrayList类型作为参数），使用{}扩起集合，使用@分隔每个元素。格式按照{元素@元素@元素}。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test03ArrayList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//添加字符串到集合中</span></span><br><span class="line">        list.add(<span class="string">"张三丰"</span>);</span><br><span class="line">        list.add(<span class="string">"宋远桥"</span>);</span><br><span class="line">        list.add(<span class="string">"张无忌"</span>);</span><br><span class="line">        list.add(<span class="string">"殷梨亭"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//调用方法</span></span><br><span class="line">        printArrayList(list);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArrayList</span><span class="params">(ArrayList&lt;String&gt; list)</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"&#123;"</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++)&#123;</span><br><span class="line">          String name = list.get(i);</span><br><span class="line">            <span class="keyword">if</span>(i == list.size()-<span class="number">1</span>)&#123;</span><br><span class="line">                System/out.println(name +<span class="string">"&#125;"</span>);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                System.out.print(name + <span class="string">"@"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Collection集合"><a href="#Collection集合" class="headerlink" title="Collection集合"></a>Collection集合</h2><h3 id="集合框架"><a href="#集合框架" class="headerlink" title="集合框架"></a>集合框架</h3><p>集合按照其存储结构可以分为两大类，分别是单列集合Collection和双列集合Map。</p>
<ul>
<li><p>Collection:单列集合类的根接口，用于存储一系列符合某种规则的元素，他有两个重要的子接口，分别是List和Set。其中，List的特点是元素有序，元素可重复。Set的特点是元素无序，而且不可重复 。</p>
</li>
<li><p>List接口的主要实现类是 java.util.ArrayList 和java.util.LinkedList。</p>
</li>
<li><p>Set接口的主要实现类是java.util.HashSet 和 java.util.TreeSet。</p>
<img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200914_131004.png" alt="sp200914_131004">

</li>
</ul>
<h3 id="单列集合的体系结构"><a href="#单列集合的体系结构" class="headerlink" title="单列集合的体系结构"></a>单列集合的体系结构</h3><ul>
<li>Collection：单列集合最顶端的接口<ul>
<li>List集合：是单列集合的一种，有索引，可以存储重复元素，可以保证存储顺序<ul>
<li>ArrayList：底层是数组实现的，查询快，增删慢。</li>
<li>LinkList：底层是链表实现的，查询慢，增删快。</li>
</ul>
</li>
<li>Set集合：无索引，不可以存储重复元素，存储无序。<ul>
<li>HashSet：底层是哈希表和红黑树实现的，无索引，不可以存储重复元素，存储无序。</li>
<li>LinkedHashSet：底层是哈希表和链表实现的，无索引，不可以存储重复的元素，可以保证存取顺序。</li>
<li>TreeSet：底层是二叉树实现。一般用于排序。</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="Collection集合常用方法"><a href="#Collection集合常用方法" class="headerlink" title="Collection集合常用方法"></a>Collection集合常用方法</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">add</span><span class="params">(E e)</span></span>;		向集合中添加元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(E e)</span></span>;	删除集合中的某个元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>;			清空集合所有元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">contains</span><span class="params">(E e)</span></span>;	判断集合中是否包含某个元素</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span></span>;		判断集合是否为空</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span></span>;				获取集合的长度</span><br><span class="line">Object[] toArray();		将集合转成一个数组</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">boolean add(E e);		向集合中添加元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">boolean remove(E e);	删除集合中的某个元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void clear();			清空集合所有元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">boolean contains(E e);	判断集合中是否包含某个元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">boolean isEmpty();		判断集合是否为空</span></span><br><span class="line"><span class="comment">int size();				获取集合的长度</span></span><br><span class="line"><span class="comment">Object[] toArray();		将集合转成一个数组</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test01</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//boolean add(E e);  向集合中添加元素</span></span><br><span class="line">        coll.add(<span class="string">"hello"</span>);</span><br><span class="line">        coll.add(<span class="string">"world"</span>);</span><br><span class="line">        coll.add(<span class="string">"heima"</span>);</span><br><span class="line">        coll.add(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(coll);<span class="comment">//[hello, world, heima, java]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//boolean remove(E e);  删除集合中的某个元素</span></span><br><span class="line">        <span class="keyword">boolean</span> result = coll.remove(<span class="string">"hello2"</span>)；</span><br><span class="line">        System.out.println(result);<span class="comment">//true</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[world, heima, java]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//void clear();   清空集合所有的元素</span></span><br><span class="line">        coll.clear();</span><br><span class="line">        System.out.println(coll);  <span class="comment">//[]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//boolean contains(E e);  判断集合中是否包含某个元素</span></span><br><span class="line">        <span class="keyword">boolean</span> result = coll.contains(<span class="string">"java"</span>);</span><br><span class="line">        System.out.println(result);  <span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//boolean isEmpty();  判断集合是否为空。</span></span><br><span class="line">        System.out.println(coll.isEmpty());  <span class="comment">//true</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//int size();  获取集合长度</span></span><br><span class="line">        System.out.println(coll.size());</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Object[] toArray();</span></span><br><span class="line">        Object[] arr = coll.toArray()</span><br><span class="line">        <span class="comment">//遍历数组</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; arr.length; i++)&#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="List集合"><a href="#List集合" class="headerlink" title="List集合"></a>List集合</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.List接口extends Collection接口</span></span><br><span class="line"><span class="comment">List接口的特点：</span></span><br><span class="line"><span class="comment">	有序的集合，存储元素和取出元素的顺序是一致的。</span></span><br><span class="line"><span class="comment">	有索引，包含了一些带索引的方法。</span></span><br><span class="line"><span class="comment">	允许存储重复的元素。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">List接口中带索引的方法(特有)：</span></span><br><span class="line"><span class="comment">	public void add(int index, E element):将指定的元素，添加到该集合中的指定位置上。</span></span><br><span class="line"><span class="comment">    public E get(int index):返回集合中指定位置的元素。</span></span><br><span class="line"><span class="comment">    public E remove(int index):移除列表中指定位置的元素，返回的是被移除的元素。</span></span><br><span class="line"><span class="comment">    public E set(int index, E element):用指定元素替换集合中指定位置的元素，返回值的更新前的元素。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">	操作索引的时候，一定要防止索引越界异常。</span></span><br><span class="line"><span class="comment">	IndexOutOfBoundsException:索引越界异常，集合会报。</span></span><br><span class="line"><span class="comment">	ArrayIndexOutOfBoundsException:数组索引越界异常。</span></span><br><span class="line"><span class="comment">	StringIndexOutOfBoundsException:字符串索引越界异常。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01List</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="comment">//创建一个List集合对象，多态</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方发往集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        lisr.add(<span class="string">"c"</span>);</span><br><span class="line">        list.add(<span class="string">"d"</span>);</span><br><span class="line">        list,add(<span class="string">"a"</span>);</span><br><span class="line">        <span class="comment">//打印集合</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, a]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//public void add(int index, E element):将指定的元素，添加到该集合中的指定位置上。</span></span><br><span class="line"><span class="comment">//在c和d之间添加一个itheima</span></span><br><span class="line">        list.add(<span class="number">3</span>,<span class="string">"itheima"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, itheima, d, a]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//public E remove(int index):移除列表中指定位置的元素，返回的是被移除的元素。</span></span><br><span class="line"><span class="comment">//移除元素</span></span><br><span class="line">        String removeE = list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"被移除的元素："</span>+removeE);<span class="comment">//被移除的元素c</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, itheima, d, a]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//public E set(int index, E element):用指定元素替换集合中指定位置的元素，返回值的更新前的元素。</span></span><br><span class="line"><span class="comment">//把最后一个a，替换成A</span></span><br><span class="line">        String setE = list.set(<span class="number">4</span>, <span class="string">"A"</span>);</span><br><span class="line">        System.out.println(<span class="string">"被替换的元素:"</span>+ setE);<span class="comment">//被替换的元素：a</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, itheima, d, A]</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment">//List集合遍历有3种方式</span></span><br><span class="line">		<span class="comment">//使用普通的for循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;list.size(); i++)&#123;</span><br><span class="line">            <span class="comment">//public E get (int index);返回集合中指定位置的元素。</span></span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">        <span class="comment">//使用迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        <span class="comment">//使用增强for</span></span><br><span class="line">        <span class="keyword">for</span>(String s: list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="ArrayList集合-1"><a href="#ArrayList集合-1" class="headerlink" title="ArrayList集合"></a>ArrayList集合</h3><p>​        java.util.ArrayList集合是数据存储的结构是<strong>数组</strong>结构。<strong>元素增删慢，查找快。</strong>由于日常开发中使用最多的功能为查询结构，遍历数据，所以ArrayList是最常用的集合。</p>
<p>原因：</p>
<p>​    底层是一个数组结构，添加一个元素是将整个数组复制以后，再添加一个长度。所以增删慢。效率低。</p>
<h3 id="LinkedList集合"><a href="#LinkedList集合" class="headerlink" title="LinkedList集合"></a>LinkedList集合</h3><p>​        java.util.LinkedList集合数据存储的结构是<strong>链表</strong>结构。<strong>方便元素添加删除</strong>的集合。LinkedList是一个<strong>双向链表</strong>。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">LinkedList集合的特点：</span></span><br><span class="line"><span class="comment">	1.底层是一个链表结构：查询慢，增删快</span></span><br><span class="line"><span class="comment">	2.里面包含了大量操作首尾元素的方法。</span></span><br><span class="line"><span class="comment">	注意：使用LinkedList集合特有的方法，不能使用多态。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addFirst</span><span class="params">(E e)</span>:将指定元素插入此列表的开头</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addLast</span><span class="params">(E e)</span>:将指定元素添加到此列表的结尾</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">push</span><span class="params">(E e)</span>:将元素推入此列表所表示的堆栈。</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getFirst</span><span class="params">()</span>:返回此列表的第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">getLast</span><span class="params">()</span>:返回此列表的最后一个元素</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeFirst</span><span class="params">()</span>:移除并返回此列表的第一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">removeLast</span><span class="params">()</span>:移除并返回此列表的最后一个元素</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> E <span class="title">pop</span><span class="params">()</span>:从此列表所表示的堆栈处弹出一个元素</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isEmpty</span><span class="params">()</span>:如果列表不包含元素，则返回<span class="keyword">true</span></span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LinkedList</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//public void addFirst(E e):将指定元素插入此列表的开头</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedList集合对象</span></span><br><span class="line">        LinkedList&lt;String&gt; linked = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        linked.add(<span class="string">"a"</span>);</span><br><span class="line">        linked.add(<span class="string">"b"</span>);</span><br><span class="line">        linked.add(<span class="string">"c"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[a, b, c]</span></span><br><span class="line">        <span class="comment">//public void addFirst(E e):将指定元素插入此列表的开头。</span></span><br><span class="line">        linked.addFirst(<span class="string">"www"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, a, b, c]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Vector集合"><a href="#Vector集合" class="headerlink" title="Vector集合"></a>Vector集合</h3><p>Vector类可以实现可增长的对象<strong>数组</strong>。Vector是同步的。单线程。</p>
<h2 id="Set接口"><a href="#Set接口" class="headerlink" title="Set接口"></a>Set接口</h2><h3 id="HashSet集合"><a href="#HashSet集合" class="headerlink" title="HashSet集合"></a>HashSet集合</h3><p>​        java.util.HashSet是Set接口的一个实现类，它所存储的元素的元素是不可重复的，并且元素都是无序的（即存储顺序不一致）HashSet底层的实现是HashMap支持。</p>
<p>​        HashSet是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找技能。保证元素唯一性的方式依赖于hashCode和equals方法。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Set接口的特点：</span></span><br><span class="line"><span class="comment">	1.不允许存储重复的元素</span></span><br><span class="line"><span class="comment">	2.没有索引，没有带索引的方法，也不能使用普通的for循环遍历</span></span><br><span class="line"><span class="comment">HashSet特点：</span></span><br><span class="line"><span class="comment">	1.不允许存储重复的元素</span></span><br><span class="line"><span class="comment">	2.没有索引，没有带索引的方法，也不能使用普通的for循环遍历</span></span><br><span class="line"><span class="comment">	3.是一个无序的集合，存储元素和取出元素的顺序有可能不一致</span></span><br><span class="line"><span class="comment">	4.底层是一个哈希表结构(查询的速度非常快)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Set</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Set&lt;Integer&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法添加元素</span></span><br><span class="line">        set.add(<span class="string">"1"</span>);</span><br><span class="line">        set.add(<span class="string">"3"</span>);</span><br><span class="line">        set.add(<span class="string">"2"</span>);</span><br><span class="line">        set.add(<span class="string">"1"</span>);</span><br><span class="line">        <span class="comment">//使用迭代器遍历set集合</span></span><br><span class="line">        Iterator&lt;Integer&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">        Integer n = it.next();</span><br><span class="line">        System.out.println(n);<span class="comment">//1,2,3</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//使用增强for遍历set集合</span></span><br><span class="line">        System.out.println(<span class="string">"------------"</span>);</span><br><span class="line">        <span class="keyword">for</span> (Integer i : set)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashSet集合存储数据的结构（哈希表）"><a href="#HashSet集合存储数据的结构（哈希表）" class="headerlink" title="HashSet集合存储数据的结构（哈希表）"></a>HashSet集合存储数据的结构（哈希表）</h3><p>​        <strong>JDK1.8之前，哈希表底层采用数组+ 链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。</strong>但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而在JDK1.8中，<strong>哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样就大大减少了查找时间</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="comment">/*</span></span><br><span class="line"><span class="comment"> 哈希值：是一个十进制的整数，由系统随机给出（就是对象的地址值，是一个逻辑地址，是模拟出来的地址，不是数据实际存储的物理地址）</span></span><br><span class="line"><span class="comment"> 在Object类有一个方法，可以获取对象的哈希值</span></span><br><span class="line"><span class="comment"> int hashCode()	返回该对象的哈希码值</span></span><br><span class="line"><span class="comment"> hashCode的源码：</span></span><br><span class="line"><span class="comment"> 	public native int hashCode();</span></span><br><span class="line"><span class="comment"> 	native:代表该方法调用的是本地操作系统的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashCode</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//Person类继承了Object类，所以可以使用Object类的hashCode方法</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> h1 = p1.hashCode();</span><br><span class="line">        System.out.println(h1);</span><br><span class="line">        <span class="comment">//47851648225</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> h2 = p2.hashCode();</span><br><span class="line">        System.out.println(h2);</span><br><span class="line">        <span class="comment">//421560258416  </span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        toString方法的源码：</span></span><br><span class="line"><span class="comment">        	reyurn getClass().getName() + "@" + Integer.toHexString(hashCode());</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        System.out.println(p1);</span><br><span class="line">        <span class="comment">//com.itheima.demo03.hashCode.Person@841461c</span></span><br><span class="line">        System.out.println(p2);</span><br><span class="line">        <span class="comment">//com.itheima.demo03.hashCode.Person@156654b</span></span><br><span class="line">    </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        String类的哈希值</span></span><br><span class="line"><span class="comment">        	String类重写Object类的hashCode方法</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(s1.hashCode());<span class="comment">//96354</span></span><br><span class="line">        System.out.println(s2,hashCode());<span class="comment">//96354</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(<span class="string">"重地"</span>.hashCode());<span class="comment">//1179395</span></span><br><span class="line">         System.out.println(<span class="string">"通话"</span>.hashCode());<span class="comment">//1179395</span></span><br><span class="line"> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200917_100959.png" alt="sp200917_100959"></p>
<h3 id="Set集合存储元素不重复的原理"><a href="#Set集合存储元素不重复的原理" class="headerlink" title="Set集合存储元素不重复的原理"></a>Set集合存储元素不重复的原理</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">![sp200917_200305](Javase-集合/sp200917_200305.png<span class="comment">/*</span></span><br><span class="line"><span class="comment">	Set集合不允许存储重复元素的原理</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02HashSetSaveString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合对象</span></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(s1);</span><br><span class="line">        set.add(s2);</span><br><span class="line">        </span><br><span class="line">        set.add(<span class="string">"重地"</span>);</span><br><span class="line">        set.add(<span class="string">"通话"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//[重地， 通话， abc]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200917_200305.png" alt="sp200917_200305"></p>
<h3 id="HashSet存储自定义类型元素"><a href="#HashSet存储自定义类型元素" class="headerlink" title="HashSet存储自定义类型元素"></a>HashSet存储自定义类型元素</h3><p>给HashSet中存放自定义元素类型时，需要重写对象中的hashCode方法和equals方法，建立自己的比较方式，才能保证HashSet集合中的对象唯一。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	HashSet 存储自定义类型元素</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">	set集合报错元素唯一：</span></span><br><span class="line"><span class="comment">		存储的元素(String，Integer,...Student,Person.),必须重写hashCode方法和equlas方法。</span></span><br><span class="line"><span class="comment">	需求：</span></span><br><span class="line"><span class="comment">		同名同年龄的人，视为同一个人，只能存储一次。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03HashSetSavePerson</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合存储Person</span></span><br><span class="line">        HashSet&lt;Person&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">18</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">18</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">19</span>);</span><br><span class="line">        System.out.println(p1.hashCode());</span><br><span class="line">        System.out.println(p2.hashCode());<span class="comment">//哈希值不同</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(p1==p2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(p1.equals p2);<span class="comment">//false</span></span><br><span class="line">        </span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        set.add(p3);</span><br><span class="line">        </span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>Person类重写hashCode方法和equlas方法。</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span>  age)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>  <span class="comment">//重写equals方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == Person.age &amp;&amp; Object.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">//重写hashCode方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> Object.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span>   <span class="comment">//重写toString方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person &#123;"</span> + <span class="string">"name='"</span> + name + <span class="string">'\''</span>+ </span><br><span class="line">                <span class="string">", age = "</span>+ age +<span class="string">'&#125;'</span><span class="string">"        </span></span><br><span class="line"><span class="string">                       &#125;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    public String getName()&#123;</span></span><br><span class="line"><span class="string">        return name;</span></span><br><span class="line"><span class="string">        </span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">    public void setName(String name)&#123;</span></span><br><span class="line"><span class="string">        this.name = name;</span></span><br><span class="line"><span class="string">    &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="LinkedHashSet集合"><a href="#LinkedHashSet集合" class="headerlink" title="LinkedHashSet集合"></a>LinkedHashSet集合</h3><p>它是由链表和哈希表组合的一个数据存储结构。此链接列表定义了迭代顺序，即按照将元素插到set中的顺序进行迭代。</p>
<p>注意：</p>
<p>​    插入顺序不受set中重新插入的元素的影响。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	java.util.LinkedHashSet集合 extends HashSet集合</span></span><br><span class="line"><span class="comment">	LInkedHashSet集合的特点：</span></span><br><span class="line"><span class="comment">		底层是一个哈希表(数组+链表/红黑树)+链表(多的这条链表用于记录元素的存储顺序，保证元素有序)</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04LinkedhashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"www"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(<span class="string">"itcast"</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//[abc, www, itcast]无序，不允许重复。</span></span><br><span class="line">        </span><br><span class="line">        LinkedHashSet&lt;String&gt; linked = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        linked.add(<span class="string">"www"</span>);</span><br><span class="line">        linked.add(<span class="string">"abc"</span>);</span><br><span class="line">        linked.add(<span class="string">"abc"</span>);</span><br><span class="line">        linked.add(<span class="string">"itcast"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, abc, itcast]有序，不允许重复。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="可变参数"><a href="#可变参数" class="headerlink" title="可变参数"></a>可变参数</h3><p>注意事项：</p>
<p>​    1.一个方法的参数列表，只能有一个可变参数。</p>
<p>​    2.如果方法的参数有多个，那么可变参数必须写在参数列表的末尾。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">可变参数：是JDK1.5之后出现的新特性</span></span><br><span class="line"><span class="comment">适用前提：</span></span><br><span class="line"><span class="comment">	当方法的参数列表数据类型已经确定，但是参数个数不确定，就可以使用可变参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">是用格式：定义方法时使用</span></span><br><span class="line"><span class="comment">	修饰符 返回值类型 方法名 (数据类型...变量名)&#123;&#125;</span></span><br><span class="line"><span class="comment">可变参数原理：</span></span><br><span class="line"><span class="comment">	可变参数底层是一个数组，根据传递参数个数不同，会创建不同长度的数组，来存储这些参数</span></span><br><span class="line"><span class="comment">	传递的参数个数，可以是0个(不传递)，1,2...多个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01VarArgs</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">mian</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> i = add(<span class="number">10</span>,<span class="number">20</span>,<span class="number">12</span>,<span class="number">56</span>);</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line">	<span class="comment">/*</span></span><br><span class="line"><span class="comment">	定义计算(0~n)整数和的方法</span></span><br><span class="line"><span class="comment">	已知:计算整数的和，数据类型已经确定int</span></span><br><span class="line"><span class="comment">	但是参数的个数不确定，就可以使用可变参数</span></span><br><span class="line"><span class="comment">	add();就会创建一个长度为0的数组</span></span><br><span class="line"><span class="comment">	*/</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...arr)</span></span>&#123;</span><br><span class="line">      <span class="comment">//定义一个初始化的变量，记录累加求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历数组，获取数组中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i : arr)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把求到的和返回</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>可变参数的特殊写法</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">metmod</span><span class="params">(Object...)</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Collections集合工具类"><a href="#Collections集合工具类" class="headerlink" title="Collections集合工具类"></a>Collections集合工具类</h2><h3 id="常用功能"><a href="#常用功能" class="headerlink" title="常用功能"></a>常用功能</h3><p>java.utils.Collections是集合工具类，用来对集合进行操作。</p>
<p>部分方法如下:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T...elements)	:往集合中添加一些元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static void shuffle(List&lt;&gt; list)	:打乱集合顺序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static &lt;T&gt; void sort(List&lt;T&gt; list)	:将集合中元素按照默认规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">public static &lt;T&gt; void sort(List&lt;T&gt; list,Comparator&lt;? super.T&gt; )	:将集合中元素按照指定规则排序。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T...elements)	:往集合中添加一些元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	public static void shuffle(List&lt;&gt; list)	:打乱集合顺序。</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加多个元素</span></span><br><span class="line">        				      Collections.addAll(list,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>);</span><br><span class="line">        <span class="comment">//可变参数，参数个数不受限制</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, e]</span></span><br><span class="line">        </span><br><span class="line">      <span class="comment">//打乱集合顺序</span></span><br><span class="line">       Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//[b, d, c, a, e]        </span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static &lt;T&gt; void sort(List&lt;T&gt; list)	:将集合中元素按照默认规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注意：</span></span><br><span class="line"><span class="comment">	sort(list&lt;T&gt; list)适用前提</span></span><br><span class="line"><span class="comment">	被排序的集合里边存储的元素，必须实现Comparable，重写接口中的方法compareTo定义排序的规则。</span></span><br><span class="line"><span class="comment">	Comparable接口的排序规则:</span></span><br><span class="line"><span class="comment">		自己(this)-参数:升序</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Sort</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        liat.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用sort方法</span></span><br><span class="line">        Collections.sort(list01);<span class="comment">//默认是升序</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">public static &lt;T&gt; void sort(List&lt;T&gt; list,Comparator&lt;? super.T&gt; )	:将集合中元素按照指定规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Comparator和Comparable的区别：</span></span><br><span class="line"><span class="comment">	Comparable: 自己(this)和别人(参数)比较，自己需要实现Comparable接口，重写比较的规则compare方法。</span></span><br><span class="line"><span class="comment">	Comparator: 相当于找了一个第三方的裁判比较两个。</span></span><br><span class="line"><span class="comment">	</span></span><br><span class="line"><span class="comment">Comparator的排序规则:</span></span><br><span class="line"><span class="comment">	o1-o2:升序</span></span><br><span class="line"><span class="comment">	o2-o1:降序</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03sort</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        ArrayLiat&lt;Integer&gt; List01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">3</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line">        </span><br><span class="line">        Collections.sort(list01, &#123;</span><br><span class="line">            <span class="comment">//重写比较的规则</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer01, Integer02)</span></span>&#123;</span><br><span class="line">                <span class="keyword">return</span> o1-o2;  <span class="comment">//升序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;  <span class="comment">//降序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        </span><br><span class="line">        System.out.println(list01);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//自定义类型,需要重写toString </span></span><br><span class="line">        </span><br><span class="line">        ArrayList&lt;Student&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"迪丽热巴"</span>, <span class="number">18</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"古力娜扎"</span>, <span class="number">20</span>));</span><br><span class="line">        liat02.add(<span class="keyword">new</span> Student(<span class="string">"杨幂"</span>, <span class="number">17</span>));</span><br><span class="line">        </span><br><span class="line">        Collections.sort(list02, &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student <span class="number">01</span>, Student <span class="number">02</span>)</span></span>&#123;</span><br><span class="line">                <span class="comment">//按照年龄升序</span></span><br><span class="line">                <span class="keyword">return</span> <span class="number">01</span>.getAge() - <span class="number">02</span>.getAge();</span><br><span class="line">                <span class="comment">//如果两个人年龄相同，再使用姓名的第一个字母比较</span></span><br><span class="line">                <span class="keyword">if</span>(result == <span class="number">0</span>)&#123;</span><br><span class="line">                    result = <span class="number">01</span>.getName().charAt(<span class="number">0</span>) - <span class="number">02</span>.getName().charAt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> result;</span><br><span class="line">            &#125;</span><br><span class="line">            </span><br><span class="line">        &#125;);</span><br><span class="line">        System.out.println(list02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="Map集合"><a href="#Map集合" class="headerlink" title="Map集合"></a>Map集合</h2><p>此键映射到值得对象。一个映射不能包含重复的建；每个键最多只能映射到一个值。</p>
<ul>
<li>Collection中的集合，元素是孤立存在的，向集合中存储元素采用一个个元素的方式存储。</li>
<li>Map中的集合，元素是成对存在的，每个元素由键与值两部分组成，通过键可以找对应的值。</li>
<li>Collection 中的集合称为单列集合，Map 中的集合称为双列集合。</li>
<li>Map中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li>
</ul>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200919_232025.png" alt="sp200919_232025"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Map集合的特点:</span></span><br><span class="line"><span class="comment">	1.Map集合是一个双列集合，一个元素包含两个值(一个key，一个value)</span></span><br><span class="line"><span class="comment">	2.Map集合中的元素，key和value的数据类型可以相同，也可以不同。</span></span><br><span class="line"><span class="comment">	3.Map集合中的元素，key是不允许重复的，value是可以重复的。</span></span><br><span class="line"><span class="comment">	4.Map集合中的元素，key和value是一一对应。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HashMap集合的特点:</span></span><br><span class="line"><span class="comment">	1.hashMap集合底层是哈希表，查询速度快。</span></span><br><span class="line"><span class="comment">		JDK1.8之前，数组+单向链表</span></span><br><span class="line"><span class="comment">		JDK1.8之后，数组+单向链表/红黑树(链表的长度超过8):提高查询的速度。</span></span><br><span class="line"><span class="comment">	2.hashMap集合是一个无序的集合，存储元素和取出元素的顺序有可能不一致。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">LinkedHashMap的特点:</span></span><br><span class="line"><span class="comment">	1.LinkedHashMap集合底层是哈希表+链表(保证迭代顺序)</span></span><br><span class="line"><span class="comment">	2.LinkedHashMap集合是一个有序的集合，存储元素和取出元素的顺序是一致的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Map</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public  V put(K key, V value):把指定的键与指定的值添加到Map集合中。</span></span><br><span class="line"><span class="comment">    返回值：V</span></span><br><span class="line"><span class="comment">    	存储键值对的时候，key不重复，返回值V是null</span></span><br><span class="line"><span class="comment">    	存储键值对的时候，key重复，会使用新的value替换map中重复的value，返回被替换的value值。</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象，多态</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        </span><br><span class="line">        map.put(<span class="string">"冷锋"</span>，<span class="string">"龙小云"</span>);</span><br><span class="line">        map.put(<span class="string">"杨过"</span>，<span class="string">"小龙女"</span>);</span><br><span class="line">        map.put(<span class="string">"尹志平"</span>，<span class="string">"小龙女"</span>);</span><br><span class="line">        </span><br><span class="line">        System.out.println(map);</span><br><span class="line">        <span class="comment">//&#123;杨过=小龙女， 尹志平=小龙女， 冷锋=龙小云&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public V remove(Object key):把指定的键所对应的的键值对元素 在Map集合中删除，返回被删除元素的值。</span></span><br><span class="line"><span class="comment">    返回值:V</span></span><br><span class="line"><span class="comment">    	key存在，v返回被删除的值</span></span><br><span class="line"><span class="comment">    	key不存在，v返回null</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">        System.out.println(map);</span><br><span class="line">        </span><br><span class="line">        Integer v1 = map.remove(<span class="string">"林志玲"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v1"</span>+v1);<span class="comment">//v1：178</span></span><br><span class="line">        </span><br><span class="line">        System.out.println(map);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    public V get(Object key) 根据指定的键，在Map集合中获取对应的值。</span></span><br><span class="line"><span class="comment">    	返回值:</span></span><br><span class="line"><span class="comment">    		key存在，返回对应的value值</span></span><br><span class="line"><span class="comment">    		key不存在，返回null</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span></span>&#123;</span><br><span class="line">         <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">        </span><br><span class="line">        Integer v1 = map.get(<span class="string">"杨颖"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v1:"</span>+v1);<span class="comment">//v1:165</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">   <span class="comment">/*</span></span><br><span class="line"><span class="comment">   boolean containsKey(Object key) 判断集合中是否包含指定的键。</span></span><br><span class="line"><span class="comment">   	包含返回true，不包含返回false</span></span><br><span class="line"><span class="comment">   </span></span><br><span class="line"><span class="comment">   */</span></span><br><span class="line">     <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">    	</span><br><span class="line">    	<span class="keyword">boolean</span> b1 = map.containsKey(<span class="string">"赵丽颖"</span>);</span><br><span class="line">    	System.out.println(<span class="string">"b1:"</span> +b1);<span class="comment">//ture</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Map集合遍历-键找值方式"><a href="#Map集合遍历-键找值方式" class="headerlink" title="Map集合遍历   键找值方式"></a>Map集合遍历   键找值方式</h3><p>键找值方式:即通过元素的键，获取键所对应的值</p>
<p>分析步骤:<br>    1.获取Map中所有的键，由于键是唯一性的，所以返回一个Set集合存储所有的键。方法提示:keyset();</p>
<p>​    2.遍历键的Set集合，得到每一个键。</p>
<ol start="3">
<li>根据键，获取键所对应的值，方法提示:get（K key）;</li>
</ol>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200920_093430.png" alt="sp200920_093430"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Map集合的第一种遍历方式:通过键找值的方式</span></span><br><span class="line"><span class="comment">	Map集合中的方法:</span></span><br><span class="line"><span class="comment">		Set&lt;K&gt; keySet()  返回此映射中包含的键的Set视图</span></span><br><span class="line"><span class="comment">	实现步骤:</span></span><br><span class="line"><span class="comment">		1.使用Map集合中的方法keySet()，把Map集合所有的key取出来，存储到一个Set集合中</span></span><br><span class="line"><span class="comment">		2.遍历Set集合，获取Map集合中的每一个key</span></span><br><span class="line"><span class="comment">		3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02KeySet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//1.使用Map集合中的方法keySet()，把Map集合所有的key取出来，存储到一个Set集合中</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.遍历Set集合，获取Map集合中的每一个key</span></span><br><span class="line">        <span class="comment">//使用迭代器遍历Set集合</span></span><br><span class="line">        Integer&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            String key = it.next();</span><br><span class="line">            </span><br><span class="line">        <span class="comment">//3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+ <span class="string">"="</span> +value);</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----------------"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用增强for遍历Set集合</span></span><br><span class="line">        <span class="keyword">for</span>(String key : set)&#123;</span><br><span class="line">           Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+ <span class="string">"="</span> +value); </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Entry键值对对象"><a href="#Entry键值对对象" class="headerlink" title="Entry键值对对象"></a>Entry键值对对象</h3><p>我们已经知道，Map中存放的是两种对象，一种称为key(键)，一种称为value(值)，他们在Map中是一一对应的关系，这一对对象又称作Map中的一个Entry(项)。Entry将键值对的对应关系封装成对象。即键值对对象，这样我们在遍历Map集合时，就可以从每一个键值对Entry对象中获取对应的键与对应的值</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/09/09/Javase-%E9%9B%86%E5%90%88/sp200920_105105.png" alt="sp200920_105105"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Map集合遍历的第二种方式：使用Entry对象遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">	Map集合中的方法:</span></span><br><span class="line"><span class="comment">		Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()  返回此映射中包含的映射关系的Set视图。</span></span><br><span class="line"><span class="comment">		</span></span><br><span class="line"><span class="comment">	实现步骤:</span></span><br><span class="line"><span class="comment">		1.使用Map集合中的方法entrySet(),把Map集合中多个Entry对象取出来，存储到一个Set集合中。</span></span><br><span class="line"><span class="comment">		2.遍历Set集合，获取每一个Entry对象</span></span><br><span class="line"><span class="comment">		3.使用Entry对象中的方法getKey()和getValue()获取键与值</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03EntrySet</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">        <span class="comment">//1.使用Map集合中的方法entrySet(),把Map集合中多个Entry对象取出来，存储到一个Set集合中。</span></span><br><span class="line">        Set &lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//2.遍历Set集合，获取每一个Entry对象</span></span><br><span class="line">        <span class="comment">//使用迭代器遍历Set集合</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; entry = it.next();</span><br><span class="line">            <span class="comment">//3.使用Entry对象中的方法getKey()和getValue()获取键与值.</span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.ou.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"--------------"</span>);</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="HashMap存储自定义类型键值"><a href="#HashMap存储自定义类型键值" class="headerlink" title="HashMap存储自定义类型键值"></a>HashMap存储自定义类型键值</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">Map集合保证key是唯一性的：</span></span><br><span class="line"><span class="comment">	作为key的元素，必须重写hashCode方法和equals方法，保证key唯一。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashMapSavePerson</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">msin</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        show01();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">    key:String类型</span></span><br><span class="line"><span class="comment">    	String类型重写hashCode方法和equals方法，保证key唯一。</span></span><br><span class="line"><span class="comment">    value:Person类型</span></span><br><span class="line"><span class="comment">    	value可以重复</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span></span>&#123;</span><br><span class="line"> 		<span class="comment">//创建HashMap集合</span></span><br><span class="line">        HashMap&lt;String,Person&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加元素</span></span><br><span class="line">        map.put(<span class="string">"北京"</span>,<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">"上海"</span>,<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">19</span>));</span><br><span class="line">        map.put(<span class="string">"广州"</span>,<span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">20</span>));</span><br><span class="line">        map.put(<span class="string">"北京"</span>,<span class="keyword">new</span> Person(<span class="string">"赵六"</span>,<span class="number">18</span>));</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用keySet加增强for遍历Map集合</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : set)&#123;</span><br><span class="line">            Person value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"--&gt;"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h3><p>在HashMap下面有一个子类LinkedHashMap，它是链表和哈希表组合的一个数据存储结构。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Map接口的哈希表和链接列表实现，具有可预知的迭代顺序。</span></span><br><span class="line"><span class="comment">底层原理：</span></span><br><span class="line"><span class="comment">	哈希表+链表(记录元素的顺序)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01LinkedHashMap</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"a"</span>,<span class="string">"a"</span>);</span><br><span class="line">        map.put(<span class="string">"c"</span>,<span class="string">"c"</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>,<span class="string">"b"</span>);</span><br><span class="line">        map.put(<span class="string">"a"</span>,<span class="string">"d"</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//key不允许重复，无序</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        LinkedHashMap&lt;String,String&gt; Linked = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        Linked.put(<span class="string">"a"</span>,<span class="string">"a"</span>);</span><br><span class="line">        Linked.put(<span class="string">"c"</span>,<span class="string">"c"</span>);</span><br><span class="line">        Linked.put(<span class="string">"b"</span>,<span class="string">"b"</span>);</span><br><span class="line">        Linked.put(<span class="string">"a"</span>,<span class="string">"d"</span>);</span><br><span class="line">        System.out.println(Linked);<span class="comment">//key不允许重复，有序&#123;a=b, c=c, b=b&#125;</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Hashtable"><a href="#Hashtable" class="headerlink" title="Hashtable"></a>Hashtable</h3><p>此类实现一个哈希表，该哈希表将键映射到对应的值。任何非null对象都可以用作键或值。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Hashtable:底层是一个哈希表，是一个单线程，线程安全的集合，速度慢。</span></span><br><span class="line"><span class="comment">HashMap:底层是一个哈希表，是一个线程不安全的集合，是多线程集合，速度快</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">HashMap集合(之前学的所有集合):可以存储null值，null键。</span></span><br><span class="line"><span class="comment">Hashtable集合:不能存储null值，null键。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Hashtable集合和Vector集合，在JDK1.2之后被HashMap和ArrayLi取代。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">Hashtable的子类Properties依然活跃在历史舞台</span></span><br><span class="line"><span class="comment">Properties集合是唯一一个和IO流结合的集合。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Hashtable</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="string">"a"</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>,<span class="keyword">null</span>);</span><br><span class="line">        map.put(nill,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;null=null, b=null&#125;</span></span><br><span class="line">        </span><br><span class="line">        Hashtable&lt;String,String&gt; table = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        table.put(<span class="keyword">null</span>,<span class="string">"a"</span>);</span><br><span class="line">        table.put(<span class="string">"b"</span>,<span class="keyword">null</span>);<span class="comment">//不允许存储空值空键，空指针异常</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Javase_面向对象</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/23/Javase-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
    <content><![CDATA[<h1 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象<a id="more"></a></h1><p>Java的核心就是oop</p>
<h2 id="面向过程-amp-面向对象"><a href="#面向过程-amp-面向对象" class="headerlink" title="面向过程&amp;面向对象"></a>面向过程&amp;面向对象</h2><p>面向过程思想</p>
<ul>
<li>步骤清晰简单，第一步做什么，第二步做什么</li>
<li>面对过程适合处理一些较为简单的问题</li>
</ul>
<p>面向对象思想</p>
<ul>
<li>物以类聚，分类的思维方式，思考问题首先会解决问题需要哪些分类，然后对这些分类进行单独思考，最后，才对某个分类下的细节进行面向过程的思索。</li>
<li>面向对象适合处理复杂的问题，适合处理需要多人协作的问题。</li>
</ul>
<p>对于描述复杂的事物，为了宏观上把握，从整体上能够合理分析，我们需要使用面向对象的思路来分析整个系统。但是，具体到微观操作，仍然需要面向对象过程的思路去处理。</p>
<h2 id="什么是面向对象"><a href="#什么是面向对象" class="headerlink" title="什么是面向对象"></a>什么是面向对象</h2><ul>
<li>面向对象编程（Object-Oriented Prpgramming,OOP）</li>
<li>面向对象编程的本质是：以类的方式组织代码，以对象的组织（封装）数据。</li>
<li>抽象</li>
<li><strong>三大特性</strong><ul>
<li><strong>封装</strong></li>
<li><strong>继承</strong></li>
<li><strong>多态</strong></li>
</ul>
</li>
<li>从认识论角度考虑是先有对象后有类。<ul>
<li><strong>对象</strong>：是具体的事物</li>
<li><strong>类</strong>：是抽象的，是对对象的抽象。</li>
</ul>
</li>
<li>从代码运行角度考虑是先有类后有对象。类是对象的模板。</li>
</ul>
<h2 id="回顾方法的定义"><a href="#回顾方法的定义" class="headerlink" title="回顾方法的定义"></a>回顾方法的定义</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//Demo01  类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01</span></span>&#123;</span><br><span class="line">    <span class="comment">//main 方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span> <span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    修饰符  返回值类型  方法名（...）&#123;</span></span><br><span class="line"><span class="comment">    //方法体</span></span><br><span class="line"><span class="comment">    return  返回值；</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">sayHello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"hello,world"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">return</span> a&gt;b ? a : b;        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="break和return的区别"><a href="#break和return的区别" class="headerlink" title="break和return的区别"></a>break和return的区别</h3><ul>
<li>break: 跳出switch，结束循环</li>
<li>return: 结束方法，返回一个结果。</li>
</ul>
<h3 id="方法名"><a href="#方法名" class="headerlink" title="方法名"></a>方法名</h3><ul>
<li>驼峰命名法</li>
<li>见名知意</li>
</ul>
<h3 id="参数列表"><a href="#参数列表" class="headerlink" title="参数列表"></a>参数列表</h3><p>（参数类型，参数名）….</p>
<h3 id="异常抛出"><a href="#异常抛出" class="headerlink" title="异常抛出"></a>异常抛出</h3><h2 id="方法的调用"><a href="#方法的调用" class="headerlink" title="方法的调用"></a>方法的调用</h2><ul>
<li>静态方法  static</li>
<li>非静态方法</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//静态方法调用非静态</span></span><br><span class="line">        <span class="comment">//实例化这个类   new</span></span><br><span class="line">        <span class="comment">//对象类型 对象名 = 对象值；</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//非静态方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">    System.out.println(<span class="string">"学生说话了"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;...&#125;<span class="comment">//折叠了</span></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    a，b都为静态方法,或都不为静态方法时，都可直接调用</span></span><br><span class="line"><span class="comment">    public void a()&#123;</span></span><br><span class="line"><span class="comment">       b(); </span></span><br><span class="line"><span class="comment">    &#125;;</span></span><br><span class="line"><span class="comment">    public void b()&#123;&#125;;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="comment">//静态调用非静态时</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">    static是和类一起加载的</span></span><br><span class="line"><span class="comment">    public static void a()&#123;</span></span><br><span class="line"><span class="comment">    b();</span></span><br><span class="line"><span class="comment">    //非静态，类实例化之后才存在</span></span><br><span class="line"><span class="comment">    public void b()&#123;</span></span><br><span class="line"><span class="comment">    </span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="形参和实参"><a href="#形参和实参" class="headerlink" title="形参和实参"></a>形参和实参</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//实际参数和形式参数的类型要对应。</span></span><br><span class="line">        <span class="keyword">int</span> add = demo03.add(<span class="number">1</span>,<span class="number">2</span>);   <span class="comment">//实参</span></span><br><span class="line">        System.out.println(add);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//形参</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> a+b;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="值传递和引用传递"><a href="#值传递和引用传递" class="headerlink" title="值传递和引用传递"></a>值传递和引用传递</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    	<span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line">        System.out.println(a);</span><br><span class="line">        Demo04.change(a);</span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//返回值为空</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(<span class="keyword">int</span> a)</span></span>&#123;</span><br><span class="line">        a = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//引用传递：对象，本质还是值传递</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person perosn = <span class="keyword">new</span> Perso();</span><br><span class="line">        </span><br><span class="line">        System.out.println(person.name);<span class="comment">//null</span></span><br><span class="line">        </span><br><span class="line">        Demo05.change(person);</span><br><span class="line">        </span><br><span class="line">        System.out.println(person);<span class="comment">//秦疆</span></span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">change</span><span class="params">(Person person)</span></span>&#123;</span><br><span class="line">        person.name = <span class="string">"秦疆"</span>；</span><br><span class="line">    &#125; </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//定义了一个Person类，有一个属性：name</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    String name;<span class="comment">//null</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="类和对象的关系"><a href="#类和对象的关系" class="headerlink" title="类和对象的关系"></a>类和对象的关系</h3><ul>
<li><strong>类是一种抽象的数据类型，它是对某一类事物整体描述/定义，但是并不能代表某一个具体的事物。</strong><ul>
<li>动物，植物，手机，电脑。</li>
<li>Person类，Pet类，Car类，这些类都是用来定义某一类具体的事物应该具备的特点和行为。</li>
</ul>
</li>
<li><strong>对象是抽象类型的具体事例</strong><ul>
<li>张三就是人的一个具体实例，张三家里的旺财就是狗的一个具体事例。</li>
<li>能够体现出特点，展现除功能的是具体的实例，而不是一个抽象的概念。</li>
</ul>
</li>
</ul>
<h2 id="创建与初始化对象"><a href="#创建与初始化对象" class="headerlink" title="创建与初始化对象"></a>创建与初始化对象</h2><ul>
<li><strong>使用new关键字创建对象</strong></li>
<li>使用new关键字创建的时候，除了分配内存空间之外，还会给创建好的对象进行默认的初始化以及对类中构造器的调用。</li>
<li>类中的构造器也称为构造方法，是在进行创建对象的时候必须调用的。并且构造器有以下俩特点：<ul>
<li>必须和类的名字相同</li>
<li>必须没有返回值类型，也不能写void</li>
</ul>
</li>
<li><strong>构造器必须要掌握。</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//学生类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stuent</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性：字段</span></span><br><span class="line">    String name;</span><br><span class="line">    <span class="keyword">int</span> age;</span><br><span class="line">    <span class="comment">//方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">study</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"学习"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一个项目应该只有一个main方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(STring[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//类：抽象的，实例化</span></span><br><span class="line">        <span class="comment">//类实例化后会返回一个自己的对象</span></span><br><span class="line">        <span class="comment">//student对象就是一个student类的具体实例</span></span><br><span class="line">        </span><br><span class="line">        Student xiaoming = <span class="keyword">new</span> Student();</span><br><span class="line">        Student xiaohong = <span class="keyword">new</span> Student();</span><br><span class="line">        </span><br><span class="line">        System.out.println(xiaoming.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>构造器</strong></p>
<p>   快捷键Alt + insert</p>
<p>使用new关键字时，本质是在调用构造器</p>
<p>构造器一般用来初始化值</p>
<ul>
<li>无参构造</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//一个类即使什么也不写，也会存在一个方法</span></span><br><span class="line">    <span class="comment">//显示的定义构造器</span></span><br><span class="line">    </span><br><span class="line">    String name;</span><br><span class="line">    <span class="comment">//实例化初始值</span></span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = <span class="string">"qinjiang"</span>;        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(STring[] args)</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">        </span><br><span class="line">        System.out.println(person.name);<span class="comment">//输出为qinjiang</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>有参构造</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//一旦定义了有参构造，无参就必须显示定义</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Person</span> <span class="params">(String name)</span></span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="创建对象内存分析"><a href="#创建对象内存分析" class="headerlink" title="创建对象内存分析"></a>创建对象内存分析</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">pubic <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Pet dog = <span class="keyword">new</span> Pet();</span><br><span class="line">        dog.name = <span class="string">"旺财"</span>;</span><br><span class="line">        dog.age = <span class="number">3</span>;</span><br><span class="line">        dog.shout();</span><br><span class="line">        </span><br><span class="line">        System.out.println(dog.name);</span><br><span class="line">        System.out.println(dog.age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Pet</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> age;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//无参构造</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shout</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"叫了一声"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>堆：存放new的对象和数组。</p>
<p>栈：存放基本变量类型和引用变量。</p>
<p><img src="/Mr-lee-MQ.hithub.io/Mr-lee-MQ.hithub.io/2020/08/23/Javase-%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/sp200823_233000.png" alt="sp200823_233000"></p>
<h3 id="简单小结类与对象"><a href="#简单小结类与对象" class="headerlink" title="简单小结类与对象"></a>简单小结类与对象</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        1.类与对象</span></span><br><span class="line"><span class="comment">        	类是一个模板：抽象。对象是一个具体的实例</span></span><br><span class="line"><span class="comment">        2.方法</span></span><br><span class="line"><span class="comment">        	定义，调用</span></span><br><span class="line"><span class="comment">        3.对象的引用</span></span><br><span class="line"><span class="comment">        	引用类型：基本类型（8）</span></span><br><span class="line"><span class="comment">        		对象是通过引用来操作的：栈---&gt;堆</span></span><br><span class="line"><span class="comment">        4.属性：字段Field 成员变量</span></span><br><span class="line"><span class="comment">        	默认初始化：</span></span><br><span class="line"><span class="comment">        		数字: 0   0.0 </span></span><br><span class="line"><span class="comment">        		char: u0000</span></span><br><span class="line"><span class="comment">        		boolbean: false</span></span><br><span class="line"><span class="comment">        		引用: null</span></span><br><span class="line"><span class="comment">        		</span></span><br><span class="line"><span class="comment">        		</span></span><br><span class="line"><span class="comment">       修饰符   属性类型  属性名 = 属性值</span></span><br><span class="line"><span class="comment">         5.对象的创建和使用</span></span><br><span class="line"><span class="comment">         	必须使用new关键字创建对象，构造器  Person kuangshen = new Person();</span></span><br><span class="line"><span class="comment">         	对象的属性  kaungshen.name</span></span><br><span class="line"><span class="comment">         	对象的方法   kuangshen.sleep()</span></span><br><span class="line"><span class="comment">         6.类</span></span><br><span class="line"><span class="comment">         	静态的属性   属性</span></span><br><span class="line"><span class="comment">         	动态的行为   方法</span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        </span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h2><ul>
<li>该露的露，该藏的藏<ul>
<li>我们程序设计要追求 “高内聚，低耦合”。<ul>
<li>高内聚：类的内部数据操作细节自己完成，不允许外部干涉</li>
<li>低耦合：仅暴露少量的方法给外部使用</li>
</ul>
</li>
</ul>
</li>
<li>封装（数据的隐藏）<ul>
<li>通常，应禁止直接访问一个对象中数据的实际表示，而应通过操作接口来访问，这称为信息隐藏。</li>
</ul>
</li>
<li>属性私有(private)，get/set(提供可以操作私有属性的方法)</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//通过调用setName方法来间接操作属性</span></span><br><span class="line">        s1.setName(<span class="string">"秦疆"</span>);</span><br><span class="line">        System.out.println(s1.getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类 private: 私有</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性私有</span></span><br><span class="line">    <span class="keyword">private</span> String name;  	<span class="comment">//名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;			<span class="comment">//学号</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">char</span> sex;		<span class="comment">//性别</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//提供一些可以操作这个属性的方法</span></span><br><span class="line">    <span class="comment">//提供一些public 的get，set方法</span></span><br><span class="line">    <span class="comment">//可在get，set方法中给属性限定范围（判断）</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//get  获得这个数据    </span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//set  给这个数据设置值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name  = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>封装的意义</p>
<ul>
<li>提高程序的安全性，保护数据</li>
<li>隐藏代码的实现细节</li>
<li>统一接口</li>
<li>系统可维护增加了</li>
</ul>
<h2 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h2><ul>
<li>继承的本质是对某一批类的抽象，从而实现对现实世界而更好的建模。</li>
<li>extends的意思是扩展。子类是父类的拓展。</li>
<li>JAVA中类只有单继承，没有多继承。</li>
<li>继承是类和类之间的一种关系。除此之外，类和类之间的关系还有依赖，组合，聚合等。</li>
<li>继承关系的两个类，一个为子类（派生类），一个为父类（基类）。子类继承父类，使用关键字extend来表示。</li>
<li>子类和父类之间，从意义上讲应该具有“is  a”的关系。</li>
</ul>
<ul>
<li>object类</li>
</ul>
<p>所有的类，都默认直接或间接继承Object</p>
<ul>
<li>super</li>
<li>方法重写</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> money = <span class="number">10000</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">say</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"说了一句话"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//子类继承父类，就会拥有父类的全部方法</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	public </span></span><br><span class="line"><span class="comment">	protected</span></span><br><span class="line"><span class="comment">	default</span></span><br><span class="line"><span class="comment">	private</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.say();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="super"><a href="#super" class="headerlink" title="super"></a>super</h3><p>子类调用父类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.test(<span class="string">"秦疆"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="title">extend</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name = <span class="string">"qinjiang"</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        System.out.println(name);<span class="comment">//秦疆</span></span><br><span class="line">        System.out.println(<span class="keyword">this</span>.name);<span class="comment">//秦疆</span></span><br><span class="line">        System.out.println(<span class="keyword">super</span>.name);<span class="comment">//kuangshen</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> String name = <span class="string">"kuangshen"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>继承过程中构造器的变化</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//执行结果</span></span><br><span class="line">        <span class="comment">//Person无参执行了</span></span><br><span class="line">        <span class="comment">//Student无参执行了</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span> <span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="comment">//隐藏代码:调用了父类的无参构造</span></span><br><span class="line">        <span class="keyword">super</span>();</span><br><span class="line">        <span class="comment">//调用父类的构造器，必须在子类构造器的第一行</span></span><br><span class="line">        System.out.println(Student无参执行了)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> class <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Person无参执行了"</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>super注意点</strong></p>
<ul>
<li>super调用父类的构造方法，必须在构造方法的第一个</li>
<li>super  必须只能出现在子类的方法或者构造方法中</li>
<li>super和this不能同时调用构造方法</li>
</ul>
<p><strong>super和this</strong></p>
<ul>
<li>代表的对象不同<ul>
<li>this：本身调用者这个对象</li>
<li>super：代表父类对象的应用</li>
</ul>
</li>
<li>前提<ul>
<li>this：没有继承也可以使用</li>
<li>super：只能在继承条件下才可以使用</li>
</ul>
</li>
<li>构造方法<ul>
<li>this（）：本类的构造</li>
<li>super（）：父类的构造</li>
</ul>
</li>
</ul>
<h3 id="方法的重写"><a href="#方法的重写" class="headerlink" title="方法的重写"></a>方法的重写</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//方法的调用只和左边定义的数据类型有关</span></span><br><span class="line">        A a = <span class="keyword">new</span> A();   <span class="comment">//A</span></span><br><span class="line">        a.test();</span><br><span class="line">        <span class="comment">//父类的引用指向了子类</span></span><br><span class="line">        B b = <span class="keyword">new</span> A();   <span class="comment">//B    子类重写了父类的方法</span></span><br><span class="line">        b.test();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"A=&gt;test()"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//重写是方法的重写，跟属性无关</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"B=&gt;test()"</span>);    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>重写</strong></p>
<p>需要有继承关系，子类重写父类的方法</p>
<p>重写：子类的方法和父类必须一致：方法体不同。</p>
<ul>
<li>方法名必须相同</li>
<li>参数列表必须相同</li>
<li>修饰符：范围可以扩大，但不可以缩小。</li>
<li>抛出的异常：范围可以被缩小，不能被扩大。</li>
</ul>
<p>为什么需要重写</p>
<ul>
<li>父类的功能，子类不一定需要，或者不满足</li>
<li>快捷键    Alt + Insrt：override;</li>
</ul>
<h2 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h2><ul>
<li><p>动态编译：类型，可扩展</p>
</li>
<li><p>即同一方法可以根据发送对象的不同而采用多种不同的行为方式。</p>
</li>
<li><p>一个对象的实际类型是确定的，但可以指向对象的引用类型有很多。</p>
</li>
</ul>
<ul>
<li>多态存在的条件<ul>
<li>有继承关系</li>
<li>子类重写父类</li>
<li>父类引用指向子类对象</li>
</ul>
</li>
</ul>
<p>注意：多态是方法的多态，属性没有多态。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">// new Student(); 一个对象的实际类型是确定的</span></span><br><span class="line">        <span class="comment">// new Person();</span></span><br><span class="line">        <span class="comment">//可以指向的引用类型就不确定了：父类的引用指向子类</span></span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Student 能调用的方法都是自己的或者继承父类的。</span></span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//Person 父类型，可以指向子类，但是不能调用子类独有的方法</span></span><br><span class="line">        Person s2 = <span class="keyword">new</span> Student();  <span class="comment">//父类的引用指向子类</span></span><br><span class="line">        Object s3 = <span class="keyword">new</span> Student();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//对象能执行哪些方法，主要看对象左边的类型，和右边关系不大</span></span><br><span class="line">        </span><br><span class="line">        ((Student) s2).eat();<span class="comment">//子类重写了父类的方法，执行子类的方法。</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>多态注意事项</p>
<ul>
<li>多态是方法的多态，属性没有多态</li>
<li>父类和子类，有联系。否则会类型转换异常</li>
<li>存在条件:继承关系，方法需要重写，父类引用指向子类对象。</li>
<li>不能重写的<ul>
<li>static  方法，属于类，不属于实例</li>
<li>final  常量</li>
<li>private 方法</li>
</ul>
</li>
<li>instanceof  类型转换..引用类型转换</li>
</ul>
<h3 id="instanceof和类型转换"><a href="#instanceof和类型转换" class="headerlink" title="instanceof和类型转换"></a>instanceof和类型转换</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">    <span class="comment">//Object &gt; Person &gt; Student</span></span><br><span class="line">    <span class="comment">//Object &gt; Person &gt;Teacher</span></span><br><span class="line">    <span class="comment">//Object &gt; String</span></span><br><span class="line">    Object object = <span class="keyword">new</span> Student();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//System.out.prinln( A instanceof B )AB间是否有父子关系</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> Student); <span class="comment">//true</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> Person); <span class="comment">//true</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> Object); <span class="comment">//true</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> Teacher); <span class="comment">//False</span></span><br><span class="line">    System.out.prinln(object <span class="keyword">instanceof</span> String); <span class="comment">//False</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>类型转换</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> <span class="keyword">extends</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"go"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"run"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//类型之间的转化：父类  子类</span></span><br><span class="line">        <span class="comment">//高         低</span></span><br><span class="line">        Person student = <span class="keyword">new</span> Student();</span><br><span class="line">        <span class="comment">//student 将这个对象转换为Student类型，我们就可以使用Student类型的方法了</span></span><br><span class="line">        Student student = (Student) obj;</span><br><span class="line">        <span class="function">student <span class="title">go</span><span class="params">()</span></span>;</span><br><span class="line">        <span class="comment">//((student) obj).go();</span></span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//子类转换为父类，可能会丢失自己本来的一些方法。</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line">        student.go();</span><br><span class="line">        Person person = student;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<ul>
<li>父类引用指向子类的对象</li>
<li>把子类转换为父类，向上转型</li>
<li>把父类转换为子类，向下转型：强制转换</li>
<li>方便方法的调用，减少重复的代码</li>
</ul>
<h3 id="static关键字详解"><a href="#static关键字详解" class="headerlink" title="static关键字详解"></a>static关键字详解</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age ;  <span class="comment">//静态的变量 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;  <span class="comment">//非静态的变量</span></span><br><span class="line">   </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">        </span><br><span class="line">        System.out.println(Student.age);  <span class="comment">//可以通过类直接调用</span></span><br><span class="line">        System.out.println(s1.age);</span><br><span class="line">        System.out.println(s1.score);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">double</span> score;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">go</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">       <span class="keyword">new</span> Student().run();  <span class="comment">//非静态需new</span></span><br><span class="line">        student.go();		<span class="comment">//静态直接调用</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>静态代码块</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span></span>&#123;</span><br><span class="line">    <span class="comment">//代码块  (匿名代码块)</span></span><br><span class="line">&#125;</span><br><span class="line">	<span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="comment">//静态代码块</span></span><br><span class="line">        <span class="comment">//类加载时执行，只执行一次</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    &#123;</span><br><span class="line">        System.out.println(<span class="string">"匿名代码块"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">"静态代码块"</span>);   <span class="comment">//只执行一次</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"构造方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Person person = <span class="keyword">new</span> Person();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//运行结果：静态代码块    匿名代码块      构造方法</span></span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//静态导入包</span></span><br><span class="line"><span class="comment">//可直接调用</span></span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.random;</span><br><span class="line"><span class="keyword">import</span> <span class="keyword">static</span> java.lang.Math.PI;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        System.out.println(random());</span><br><span class="line">        System.out.println(PI);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><ul>
<li>abstract修饰符可以用来修饰方法也可以修饰类，如果修饰方法，那么该方法就是抽象方法；如果是修饰类，那么该类就是抽象类。</li>
<li>抽象类中可以没有抽象方法，但是有抽象方法的类一定要声明为抽象类</li>
<li>抽象类，不能使用new关键字来创建对象，它是用来让子类继承的。</li>
<li>抽象方法，只有方法的声明，没有方法的实现，它是用来让子类实现的。</li>
<li>子类继承抽象类，那么就必须要实现抽象类没有实现的抽象方法，否则该子类也要声明为抽象类。</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//abstract 抽象类：类 extends：单继承~（接口可以多继承）</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Action</span></span>&#123;</span><br><span class="line">    <span class="comment">//约束~有人帮我们实现</span></span><br><span class="line">    <span class="comment">//abstract，抽象方法，只有方法名字，没有方法的实现。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doSomeThing</span><span class="params">()</span></span>;</span><br><span class="line">   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//抽象类的所有方法，继承了它的子类，都必须要实现他的方法</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Action</span> </span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doSomething</span><span class="params">()</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<p><strong>抽象类特点</strong></p>
<ul>
<li>不能new这个抽象类，只能考子类去实现：起一个约束作用。</li>
<li>抽象类中可以写普通的方法。</li>
<li>抽象方法必须在抽象类中。</li>
</ul>
<p>抽象的抽象：约束~</p>
<p>抽象类存在的意义：可以将重复的共有方法提取出来，提高开发效率。</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><ul>
<li>普通类：只有具体实现</li>
<li>抽象类：具体实现和规范（抽象方法）都有</li>
<li>接口：只有规范，自己无法写方法，专业的约束！约束和实现分离：面向接口编程。</li>
<li>接口就是规范，定义的是一组规则，体现了现实世界中如果你是汽车，则必须能跑。</li>
<li>接口的本质是契约，就像我们人间的法律一样，制定好后大家遵守。</li>
<li>OO的精髓，是对对象的抽象，最能体现这一点的就是接口，为什么我们讨论设计模式都只针对具备了抽象能力的语言，就是因为设计模式所研究的，实际上就是如何合理的去抽象。</li>
</ul>
<p><strong>声明类的关键字是class，声明接口的关键字是interface</strong></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">TimeService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">timer</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//接口的定义 interface关键字    接口都需要实现类。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="comment">//接口中的所有定义其实都是抽象的 public abstact</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//类可以实现接口  implements 接口</span></span><br><span class="line"><span class="comment">//实现了接口的类，就需要重写接口中的方法。</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserServiceImpl</span> <span class="keyword">implements</span> <span class="title">UserService</span>,<span class="title">TimeService</span></span>&#123;</span><br><span class="line">    <span class="comment">//利用接口实现多继承</span></span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">add</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delete</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">     <span class="meta">@override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">query</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>接口的作用：</strong></p>
<ul>
<li>约束</li>
<li>定义一些方法，让不同的人实现</li>
<li>接口默认方法    public abstact</li>
<li>常量   public  static  final</li>
<li>接口不能被实例化，接口中没有构造方法</li>
<li>implents可以实现多个接口</li>
<li>必须要重写接口中的方法</li>
</ul>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>内部类就是在一个类的内部再定义一个类，比如，A类中定义一个B类，那么B类相对于A类来说就称为内部类，而A类相对B类来说就是外部类了。</p>
<ul>
<li>成员内部类</li>
<li>静态内部类</li>
<li>局部内部类</li>
<li>匿名内部类</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Application</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> id;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> out;</span><br><span class="line">    	System.out.println(<span class="string">"这是外部类的方法"</span>);</span><br><span class="line">            </span><br><span class="line">&#125;</span><br><span class="line">	<span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"这是内部类的方法"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获得外部类的私有属性</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">            System.out.println(id);</span><br><span class="line">    	&#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Appliction</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> voud <span class="title">mai</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        <span class="comment">//new </span></span><br><span class="line">        Outer outer = <span class="keyword">new</span> Outer();</span><br><span class="line">        <span class="comment">//通过外部类来实例化内部类</span></span><br><span class="line">        outer.<span class="keyword">new</span> Inner inner = outer.<span class="keyword">new</span> Inner();</span><br><span class="line">        inner.in();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">puublic <span class="class"><span class="keyword">class</span> <span class="title">Outer</span></span>&#123;</span><br><span class="line">    <span class="comment">//局部内部类</span></span><br><span class="line">    <span class="function">publlic <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span></span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">in</span><span class="params">()</span></span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//一个java类中可以有多个class类，但是只能有一个public class</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//匿名内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">      <span class="comment">//没有名字初始化类，不用将实例保存到变量中。</span></span><br><span class="line">        <span class="keyword">new</span> Apple().eat();</span><br><span class="line">        UserService userService = <span class="keyword">new</span> UserService()&#123;</span><br><span class="line">            <span class="meta">@override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">                </span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"1"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">interface</span> <span class="title">UserService</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">hello</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis框架</title>
    <url>/Mr-lee-MQ.hithub.io/2020/05/27/Mybatis%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="MyBatis框架"><a href="#MyBatis框架" class="headerlink" title="MyBatis框架"></a>MyBatis框架<a id="more"></a></h1><p>​            mybatis通过XML或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中的sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</p>
<p>​            采用ORM思想解决了实体与数据库映射的问题，对JDBC进行了封装。</p>
<ul>
<li>ORM：（对象关系映射）就是把数据库表和实体类的属性对应起来，让我们可以操作实体类实现操作数据库表。</li>
</ul>
<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ul>
<li>表现层:　 用于展示数据</li>
<li>业务层: 　用于处理业务需求</li>
<li>持久层: 　是和数据交互的</li>
</ul>
<h2 id="持久层技术解决方案"><a href="#持久层技术解决方案" class="headerlink" title="持久层技术解决方案"></a>持久层技术解决方案</h2><h3 id="JDBC技术"><a href="#JDBC技术" class="headerlink" title="JDBC技术"></a>JDBC技术</h3><p>　　　　　　Connection<br>　　　　　　PreparedStatemnet<br>　　　　　　ResultSet</p>
<h3 id="Spring-的JdbcTemplate："><a href="#Spring-的JdbcTemplate：" class="headerlink" title="Spring 的JdbcTemplate："></a>Spring 的JdbcTemplate：</h3><p>　　Spring中对JDBC的简单封装</p>
<h3 id="Apache的DBUtils："><a href="#Apache的DBUtils：" class="headerlink" title="Apache的DBUtils："></a>Apache的DBUtils：</h3><p>　　它和Spring的 jdbcTemplate 很像，也是对JDBC的简单封装</p>
<h3 id="持久层"><a href="#持久层" class="headerlink" title="持久层"></a>持久层</h3><p>数据持久化</p>
<ul>
<li>持久化就是将程序的数据在持久状态和瞬间状态转化的过程</li>
<li>内存：<strong>断电即失</strong></li>
<li>数据库（jdbc），io文件持久化。</li>
</ul>
<p>持久层</p>
<p>Dao层，Service层，Controller层</p>
<ul>
<li>完成持久化工作的代码块</li>
<li>层界限十分明显</li>
</ul>
<h2 id="JDBC编程分析"><a href="#JDBC编程分析" class="headerlink" title="JDBC编程分析"></a>JDBC编程分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">                  <span class="comment">//数据库连接</span></span><br><span class="line">			Connection connection = <span class="keyword">null</span>;  </span><br><span class="line">                 <span class="comment">//预编译的Statement</span></span><br><span class="line">			PreparedStatement preparedStatement = <span class="keyword">null</span>;    </span><br><span class="line">			ResultSet resultSet = <span class="keyword">null</span>;    </span><br><span class="line">    <span class="keyword">try</span> &#123;     <span class="comment">//加载数据库驱动    					  				  </span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">//通过驱动管理类获取数据库链接     </span></span><br><span class="line">        connection =  DriverManager </span><br><span class="line">.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>,<span class="string">"root"</span>, <span class="string">"mysql"</span>);   <span class="comment">//用户名密码</span></span><br><span class="line">    						<span class="comment">//定义 sql 语句 ?表示占位符    </span></span><br><span class="line">        String sql = <span class="string">"select * from user where username = ?"</span>; </span><br><span class="line">                          <span class="comment">//获取预处理 statement     </span></span><br><span class="line">        preparedStatement = connection.prepareStatement(sql); </span><br><span class="line">                         <span class="comment">//设置参数，第一个参数为 sql 语句中参数的序号（从 1 开始），第二个参数为设置的 参数值        </span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);     </span><br><span class="line">                         <span class="comment">//向数据库发出 sql 执行查询，查询出结果集     </span></span><br><span class="line">        resultSet =  preparedStatement.executeQuery(); </span><br><span class="line">                          <span class="comment">//遍历查询结果集     </span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;              				                         System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"                              "</span>+resultSet.getString(<span class="string">"username"</span>));     </span><br><span class="line">              &#125;   </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;     </span><br><span class="line">        e.printStackTrace(); </span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;     </span><br><span class="line">        <span class="comment">//释放资源     </span></span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;      </span><br><span class="line">            <span class="keyword">try</span> &#123;       resultSet.close(); </span><br><span class="line">     		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;       </span><br><span class="line">                preparedStatement.close();      </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;      </span><br><span class="line">            <span class="keyword">try</span> &#123;       </span><br><span class="line">                connection.close();      </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block       </span></span><br><span class="line">                e.printStackTrace();      &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">上边使用 jdbc 的原始方法（未经封装）实现了查询数据库表记录的操作。</span><br></pre></td></tr></table></figure>

<h2 id="原生JDBC的问题"><a href="#原生JDBC的问题" class="headerlink" title="原生JDBC的问题"></a>原生JDBC的问题</h2><ol>
<li>数据库连接，使用时就创建，不使用就立即释放，对数据库进行频繁的连接开启和关闭，造成数据库资源浪费，影响数据库性能。</li>
</ol>
<p>​       解决方案：使用数据库连接池管理数据库连接。</p>
<ol start="2">
<li><p>将sql语句硬编码到java中，如果sql语句修改，需要重新编译java代码，不利于系统维护。</p>
<p>解决方案： 将sql语句配置到xml文件中，即使sql变化，不需要对java代码进行重新编译。</p>
</li>
</ol>
<h2 id="Mybatis的概述"><a href="#Mybatis的概述" class="headerlink" title="Mybatis的概述"></a>Mybatis的概述</h2><p>​    Mybatis是一个持久层框架，用java编写。</p>
<p>​    它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建链接等繁杂过程。</p>
<p>​    它使用了ORM思想，实现了结果集的封装</p>
<p>​        ORM：</p>
<p>​                    Object Relational Mappging 对象关系映射</p>
<p>​        简单的说：</p>
<p>​                    就是把数据库表和实体类及实体类的的属性对应起来</p>
<p>​                    让我们可以操作实体类就实现操作数据库</p>
<h2 id="Mybatis实现的基本原理"><a href="#Mybatis实现的基本原理" class="headerlink" title="Mybatis实现的基本原理"></a>Mybatis实现的基本原理</h2><ul>
<li>应用程序找Mybatis要数据</li>
<li>mybatis从数据库中找来数据<ul>
<li>通过mybatis-config.xml 定位哪个数据库</li>
<li>通过Category.xml执行对应的select语句</li>
<li>基于Category.xml把返回的数据库记录封装在Category对象中</li>
<li>把多个Category对象装在一个Category集合中</li>
</ul>
</li>
<li>返回一个Category集合</li>
</ul>
<h2 id="Mybatis框架流程"><a href="#Mybatis框架流程" class="headerlink" title="Mybatis框架流程"></a>Mybatis框架流程</h2><ul>
<li>sqlMapConfig.xml(是mybatis的全局配置文件)配置了数据源，事务等mybatis运行环境，配置了映射文件（配置sql语句）mapper.xml(映射文件)，mapper.xml，mapper.xml………</li>
<li>sqlSessionFactory（会话工厂），根据配置文件创建工厂     作用：创建sqlsession。</li>
<li>sqlSession（会话），是一个接口，面向（程序员）的接口    作用：操作数据库（发出sql增删改查）</li>
<li>Executor（执行器），也是一个接口（基本执行器，缓存执行器）   作用：sqlsession内部通过执行器操作数据库</li>
</ul>
<h2 id="Mybatis的入门"><a href="#Mybatis的入门" class="headerlink" title="Mybatis的入门"></a>Mybatis的入门</h2><ul>
<li><p>在pom.xml文件中写入打包方式</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;packaging&gt;jar&lt;&#x2F;packaging&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>mybatis官网复制依赖代码</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;</span><br><span class="line">  &lt;version&gt;x.x.x&lt;&#x2F;version&gt;		版本号</span><br><span class="line">&lt;&#x2F;dependency&gt;</span><br></pre></td></tr></table></figure>
</li>
<li><p>官网下载Mybatis框架</p>
</li>
<li><p>创建maven工程</p>
</li>
<li><p>在pom.xml文件中添加Mybatis的坐标</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;      </span><br><span class="line">		&lt;version&gt;3.4.5&lt;&#x2F;version&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;junit&lt;&#x2F;groupId&gt;   单元测试</span><br><span class="line">		&lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">		&lt;version&gt;4.10&lt;&#x2F;version&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;&#x2F;scope&gt;    </span><br><span class="line">	&lt;&#x2F;dependency&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;     </span><br><span class="line">		&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;     						&lt;version&gt;5.1.6&lt;&#x2F;version&gt;     </span><br><span class="line">		&lt;scope&gt;runtime&lt;&#x2F;scope&gt;    </span><br><span class="line">	&lt;&#x2F;dependency&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;  日志   </span><br><span class="line">		&lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;    </span><br><span class="line">        &lt;version&gt;1.2.12&lt;&#x2F;version&gt;    </span><br><span class="line">	&lt;&#x2F;dependency&gt;   </span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>









<p>​     </p>
]]></content>
      <tags>
        <tag>后端</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue</title>
    <url>/Mr-lee-MQ.hithub.io/2020/08/04/Vue/</url>
    <content><![CDATA[<h1 id="Vue"><a href="#Vue" class="headerlink" title="Vue "></a>Vue <a id="more"></a></h1><p>网络通信：axios</p>
<p>页面跳转：vue-router</p>
<p>状态管理：vuex</p>
<p>Vue-UI：ICE</p>
<p>M: 模型  V：视图   C：控制器</p>
<h2 id="JavaScript框架"><a href="#JavaScript框架" class="headerlink" title="JavaScript框架"></a>JavaScript框架</h2><ul>
<li>JQuery：简化了DOM操作，缺点是DOM操作太频繁，影响前端性能。</li>
<li>Angular：将后台的MVC模式搬到前端并增加了模块化开发的理念。</li>
<li>React：提出了虚拟DOM，在内存中模拟DOM操作，有效提高了前端的渲染效率，缺点是使用复杂，需要学习JSX语言</li>
<li>Vue：渐进式JavaScript框架，渐进式即逐步实现新特性的意思。如实现模块化开发，路由，状态管理等新特性。其特点是综合了Angular（模块化）和React（虚拟DOM）的优点</li>
<li>Axios：前端通讯框架，Vue不具备通信能力，也可以用JQuery提供的AJAX通信功能</li>
</ul>
<h2 id="UI框架"><a href="#UI框架" class="headerlink" title="UI框架"></a>UI框架</h2><ul>
<li>Ant-Design :阿里巴巴出品，基于React的UI框架</li>
<li>ElementUI，iview,ice:饿了么出品，用于Vue的UI框架</li>
<li>Bootstrap:Twitter推出的一个用于前端开发的开源工具包</li>
<li>AmazeUI：一款HTML5跨屏前端框架</li>
</ul>
<h2 id="JavaSxript构建工具"><a href="#JavaSxript构建工具" class="headerlink" title="JavaSxript构建工具"></a>JavaSxript构建工具</h2><ul>
<li>Babel：JS编译工具，主要用于浏览器不支持的ES新特性，比如用于编译TypeScript</li>
<li>WebPack：模块化打包器，主要作用是打包，压缩，合并及按序加载</li>
</ul>
<h2 id="框架和项目管理工具"><a href="#框架和项目管理工具" class="headerlink" title="框架和项目管理工具"></a>框架和项目管理工具</h2><ul>
<li><p>Express：NodeJS框架</p>
</li>
<li><p>Koa：Express简化版</p>
</li>
<li><p>NPM:项目综合管理工具，类似于Maven</p>
</li>
<li><p>YARN：NPM的替代方案，类似于Maven和Gradle的关系</p>
</li>
</ul>
<h2 id="Vue入门"><a href="#Vue入门" class="headerlink" title="Vue入门"></a>Vue入门</h2><p>模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>



<ul>
<li>v-bind     绑定元素</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span></span><br><span class="line">        鼠标悬停几秒</span><br><span class="line">    <span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">"Hello,Vue!"</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-if </li>
<li>v-else</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-if</span>=<span class="string">"type==='A'"</span>&gt;</span>A<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"type==='B'"</span>&gt;</span>B<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else-if</span>=<span class="string">"type==='C'"</span>&gt;</span>C<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-else</span>&gt;</span>No<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            type:<span class="string">'A'</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>v-for</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span> </span><br><span class="line">    &#123;&#123;item.message&#125;&#125;</span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">      </span><br><span class="line">    //&#123;&#123; parentMessage &#125;&#125; - &#123;&#123; index &#125;&#125; index可输出数组下标</span><br><span class="line">      <span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line">            items:[</span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">'狂神说Java'</span>&#125;,</span></span><br><span class="line"><span class="actionscript">                &#123;message:<span class="string">'狂神前端'</span>&#125;</span></span><br><span class="line">            ]</span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="事件"><a href="#事件" class="headerlink" title="事件"></a>事件</h2><ul>
<li>方法必须定义在Vue的method对象中methods:{        }</li>
<li>通过v-on绑定事件</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">v-on:click</span>=<span class="string">"sayhai"</span>&gt;</span>click Me<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">"狂神说Java"</span></span></span><br><span class="line"></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="actionscript">    methods:&#123;    <span class="comment">//方法必须定义在Vue的method对象中</span></span></span><br><span class="line"><span class="actionscript">            sayhai:<span class="function"><span class="keyword">function</span> <span class="params">()</span> </span>&#123;</span></span><br><span class="line"><span class="actionscript">                alert(<span class="keyword">this</span>.message)</span></span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="双向绑定"><a href="#双向绑定" class="headerlink" title="双向绑定"></a>双向绑定</h2><p>Vue.js是一个MVVM框架，即数据双向绑定，即当数据发生变化的时候，视图也就发生变化，当视图发生变化的时候，数据也会跟着同步变化。</p>
<ul>
<li><p>使用v-model实现双向绑定，v-model会忽略所有表单元素的value,checked,selected特性的初始值，而只将Vue实例的数据作为来源，应该通过JavaScript在组件的data选项中声明初始值。</p>
</li>
<li><p>输入文本</p>
</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    输入的文本：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>&gt;</span>&#123;&#123;message&#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            message:<span class="string">""</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>单选框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"qinjiang"</span>&gt;</span>男</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">name</span>=<span class="string">"sex"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"qinjiang"</span>&gt;</span>女</span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">        选中了谁:&#123;&#123;qinjiang&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            qinjiang: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>下拉框</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    下拉框：</span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"selected"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">""</span><span class="attr">disabled</span>&gt;</span>--请选择--<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>A<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>B<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>C<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span>&gt;</span>value:&#123;&#123;selected&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="actionscript">        <span class="comment">//Model: 数据</span></span></span><br><span class="line">        data: &#123;</span><br><span class="line"><span class="actionscript">            selected: <span class="string">''</span></span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue的组件"><a href="#Vue的组件" class="headerlink" title="Vue的组件"></a>Vue的组件</h2><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"> 	<span class="comment">&lt;!--组件：传递给组件中的值：props--&gt;</span></span><br><span class="line">    //从数组(items)中遍历出的值(item)绑定到qin上</span><br><span class="line">    //由props接收qin的值</span><br><span class="line">    //由props送到模板(template)中</span><br><span class="line">    <span class="tag">&lt;<span class="name">qinjiang</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">v-bind:</span> <span class="attr">qin</span>=<span class="string">"item"</span>&gt;</span><span class="tag">&lt;/<span class="name">qinjiang</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line">    </span><br><span class="line"><span class="actionscript">    <span class="comment">//定义一个Vue组件component</span></span></span><br><span class="line"><span class="actionscript">    Vue.component(<span class="string">"qinjiang"</span>,&#123;</span></span><br><span class="line"><span class="actionscript">        props:[<span class="string">'qin'</span>],</span></span><br><span class="line"><span class="handlebars"><span class="xml">        template: '<span class="tag">&lt;<span class="name">li</span>&gt;</span></span><span class="template-variable">&#123;&#123;qin&#125;&#125;</span><span class="xml">'<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span></span></span><br><span class="line">        </span><br><span class="line">    &#125;);</span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line">        data:&#123;</span><br><span class="line"><span class="actionscript">            items:[<span class="string">"Java"</span>,<span class="string">"Linux"</span>,<span class="string">"前端"</span>]</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="Vue-Axios异步通信"><a href="#Vue-Axios异步通信" class="headerlink" title="Vue:Axios异步通信"></a>Vue:Axios异步通信</h2><p>Axios是一个开源的可以用在浏览器端和Node.js的异步通信框架，它的主要作用就是实现AJAX异步通信。</p>
<p>主要功能特点：</p>
<ul>
<li>从浏览器中创建XMLHttpRequests</li>
<li>从node.js创建http请求</li>
<li>支持Promise  API (JS中链式方程)</li>
<li>Nnew拦截请求和响应</li>
<li>转化请求数据和响应数据</li>
<li>取消请求</li>
<li>自动转换JSON数据</li>
<li>客户端支持防御XSRF（跨站请求伪造）</li>
</ul>
<p>模板</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--view层   模板--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--导入Vue.js--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.jsdelivr.net/npm/vue@2.5.16/dist/vue.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://unpkg.com/axios/dist/axios.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="actionscript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="actionscript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>Vue实例由一个完整的生命周期</p>
]]></content>
      <tags>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>maven</title>
    <url>/Mr-lee-MQ.hithub.io/2020/05/30/maven%E9%A1%B9%E7%9B%AE%E7%AE%A1%E7%90%86/</url>
    <content><![CDATA[<h1 id="Maven项目管理工具"><a href="#Maven项目管理工具" class="headerlink" title="Maven项目管理工具"></a>Maven项目管理工具<a id="more"></a></h1><h2 id="为什么使用Maven？"><a href="#为什么使用Maven？" class="headerlink" title="为什么使用Maven？"></a>为什么使用Maven？</h2><ul>
<li><p>jar包管理</p>
<ul>
<li>从Maven中央仓库获取标准的规范的jar包以及相关依赖的jar包，避免自己下载到错误的jar包。</li>
<li>本地仓库统一管理jar包，使得jar包与项目分离，减轻项目体积。</li>
</ul>
</li>
<li><p>Maven是跨平台的可以在window、linux上使用。</p>
</li>
<li><p>清晰的项目结构</p>
</li>
<li><p>多工程开发，将模块拆分成若干个工程，利于团队协作开发。</p>
</li>
<li><p>一键构建项目：使用命令行可以对项目进行一键构建，操作系统中无需安装eclipse和tomcat。</p>
<h2 id="Maven入门"><a href="#Maven入门" class="headerlink" title="Maven入门"></a>Maven入门</h2></li>
<li><p>下载，安装，配置环境变量Maven；</p>
<ul>
<li><a href="https://maven.apache.org/download.cgi" target="_blank" rel="noopener">https://maven.apache.org/download.cgi</a>     下载后解压，放到工作目录下。<ul>
<li>bin：配置文件，脚本</li>
<li>boot：类加载器的框架</li>
<li>conf：配置文件     sttings.xml主要用到的配置文件（全局配置）</li>
<li>lib：库文件</li>
</ul>
</li>
<li><img src="http://s1.wailian.download/2020/06/10/image-20200530172929530.png" alt="image-20200530172929530.png"></li>
</ul>
</li>
<li><p>变量值Maven安装路径到bin目录之前</p>
</li>
</ul>
<h2 id="Maven的优点"><a href="#Maven的优点" class="headerlink" title="Maven的优点"></a>Maven的优点</h2><ul>
<li><p>jar包管理</p>
<ul>
<li><p>从Maven中央仓库获取标准的规范的jar包以及相关依赖的jar包，避免自己下载到错误的jar包。</p>
</li>
<li><p>本地仓库统一管理jar包，使得jar包与项目分离，减轻项目体积。</p>
</li>
<li><p>Maven项目通过坐标的方式从本地仓库获取jar包</p>
<ul>
<li><p>坐标：由公司/组织名（groupld）+ 项目名/子项目名（artifactld）+版本号（version）组成。</p>
</li>
<li><p>本地仓库：存放了很多Jar包，供Maven项目使用。</p>
</li>
<li><p>Maven通过建立本地仓库索引，可以快速的找到符合要求的jar包，从而解决效率问题。</p>
</li>
<li><p>多个Maven项目都可以从本地仓库获取jar包</p>
</li>
<li><p>设置本地仓库：Maven根目录—–conf—-settings.xml，将localRepository标签中的路径替换成自己本地仓库的路径····</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">localRepository&gt;&#x2F;path&#x2F;to&#x2F;local&#x2F;repo&lt;&#x2F;localRepository&gt;</span><br></pre></td></tr></table></figure>



</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="Maven三中仓库概念"><a href="#Maven三中仓库概念" class="headerlink" title="Maven三中仓库概念"></a>Maven三中仓库概念</h2><p>本地仓库，远程仓库，中央仓库</p>
<p><a href="https://www.wailian.work/image/AjEarS" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200530175433411.png" alt="image-20200530175433411.png"></a></p>
<ul>
<li>中央仓库（MVN）<a href="https://mvnrepository.com/" target="_blank" rel="noopener">https://mvnrepository.com/</a></li>
</ul>
<p>优先级：本地—–远程—–中央                本地仓库没有也没有远程仓库，则直接去中央仓库找。</p>
<h2 id="设置阿里云Maven仓库镜像"><a href="#设置阿里云Maven仓库镜像" class="headerlink" title="设置阿里云Maven仓库镜像"></a>设置阿里云Maven仓库镜像</h2><ul>
<li>在settings.xml文件中的mirrors下添加mirror标签</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line"></span><br><span class="line">&lt;id&gt;alimaven&lt;&#x2F;id&gt;</span><br><span class="line"></span><br><span class="line">&lt;name&gt;aliyun maven&lt;&#x2F;name&gt;</span><br><span class="line"></span><br><span class="line">&lt;url&gt;http:&#x2F;&#x2F;maven.aliyun.com&#x2F;nexus&#x2F;content&#x2F;groups&#x2F;public&#x2F;&lt;&#x2F;url&gt;</span><br><span class="line"></span><br><span class="line">&lt;mirrorOf&gt;central&lt;&#x2F;mirrorOf&gt;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;mirror&gt;</span><br></pre></td></tr></table></figure>



<ul>
<li>maven是由纯java开发，是跨平台的可以在window，linux，mac上使用</li>
<li>清晰的项目结构</li>
<li>使用Maven将大型项目按照模块拆分成若干工程，不同的团队维护各自的工程，可大大的提升开发效率。<ul>
<li>大型商城项目按业务分成商品管理，用户管理，订单管理等模块</li>
<li>中小型项目按照传统项目分为Web，Service，Dao层，依照员工的业务能力分配工作</li>
</ul>
</li>
</ul>
<h2 id="Maven常用命令"><a href="#Maven常用命令" class="headerlink" title="Maven常用命令"></a>Maven常用命令</h2><ul>
<li><p>mvn       命令（在工程目录下）</p>
</li>
<li><p>clean            清理</p>
</li>
<li><p>compile          编译，只编译main文件，不编译test中的代码（记得常clean）</p>
</li>
<li><p>test-compile    编译test目录中的代码 </p>
</li>
<li><p>package     打包           打包完的名字是由pom.xml中的(artifactId——version—-packaging)决定的</p>
<ul>
<li>Java项目—–打成jar包          </li>
<li>web项目—–打成war包</li>
</ul>
</li>
<li><p>install：    发布项目到本地仓库，用在打jar包上，打成jar包可以被其他项目使用</p>
</li>
<li><p>tomcat：run：    一键构建项目</p>
</li>
</ul>
<h2 id="Maven的生命周期"><a href="#Maven的生命周期" class="headerlink" title="Maven的生命周期"></a>Maven的生命周期</h2><ul>
<li>Clean       生命周期：clean</li>
<li>Default      生命周期：compile，test-compile，test，package，install</li>
<li>Silt              生命周期：site命令，生成项目描述文档静态页</li>
<li>不同的生命周期可以一起执行，例如先clean再compile</li>
</ul>
<h2 id="Maven命令的执行顺序"><a href="#Maven命令的执行顺序" class="headerlink" title="Maven命令的执行顺序"></a>Maven命令的执行顺序</h2><ul>
<li>在相同生命周期中的命令才会受执行顺序的影响</li>
<li>Default生命周期中的命令执行顺序：<ul>
<li>compile&lt;—test-compile&lt;—test&lt;—package&lt;—install</li>
</ul>
</li>
</ul>
<h2 id="Maven入门程序"><a href="#Maven入门程序" class="headerlink" title="Maven入门程序"></a>Maven入门程序</h2><ul>
<li><p>创建Maven项目</p>
</li>
<li><p><a href="https://www.wailian.work/image/AjEdI8" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531132200007.png" alt="image-20200531132200007.png"></a></p>
</li>
<li><p><a href="https://www.wailian.work/image/AjE28B" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531132333105.png" alt="image-20200531132333105.png"></a></p>
</li>
<li><p><a href="https://www.wailian.work/image/AjE9a0" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531132454709.png" alt="image-20200531132454709.png"></a></p>
</li>
<li><p><a href="https://www.wailian.work/image/AjEW5l" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531132531764.png" alt="image-20200531132531764.png"></a></p>
</li>
<li><p><a href="https://www.wailian.work/image/AjEN5b" target="_blank" rel="noopener"><img src="http://s1.wailian.download/2020/06/10/image-20200531115832479.png" alt="image-20200531115832479.png"></a></p>
</li>
<li><p><img src="http://s1.wailian.download/2020/06/10/sp200610_113715.png" alt="sp200610_113715.png"></p>
</li>
</ul>
<ul>
<li><p>在src—&gt;main–&gt;webapp下创建WEB-INF目录，并在目录下创建web.xml</p>
</li>
<li><p>修改Maven默认编译级别</p>
<ul>
<li>全局编译级别–&gt;修改settings.xml</li>
<li>项目级别修改–&gt;项目对应的pox.xml</li>
</ul>
</li>
<li><p>在Java Resourcese -&gt; src/main/java下写代码，创建包和Servlet；</p>
</li>
<li><p>添加servlet-api</p>
</li>
<li><p>在servlet-api中添加scope标签，值为：proviede；</p>
<ul>
<li>如果不加此标签有很大几率报错，因为tomcat中也有servlet-api的包导致冲突；</li>
</ul>
</li>
<li><p>运行：发生错误，原因是maven默认使用tomcat6.xx，不支持@WebServle注解；</p>
<ul>
<li>解决方案1：需要去web.xml中配置Servlet;</li>
<li>解决方案2：配置高版本tomcat插件；</li>
</ul>
</li>
<li><p>最后测试，启动服务，在地址栏输入请求，显示结果；</p>
</li>
<li><p>报错可以更新Maven</p>
</li>
</ul>
<h2 id="IDEA-Maven设置"><a href="#IDEA-Maven设置" class="headerlink" title="IDEA Maven设置"></a>IDEA Maven设置</h2><ul>
<li><p>下载与配置Maven</p>
</li>
<li><p>建立Maven本地仓库</p>
</li>
<li><p>IDEA设置：</p>
<p>File-&gt;Settings-&gt;Build, Execute, Deployment-&gt;Build Tools-&gt;Maven<br>修改 Maven home directory: d:/software/apache-maven-3.5.0<br>修改 User settings file: D:\software\apache-maven-3.5.0\conf\settings.xml<br>Local repository 会被自动识别为 d:\maven\repository</p>
</li>
<li><p>新建项目</p>
<ul>
<li>左边选择Maven</li>
<li>勾选Create from archetype</li>
<li>选择org.apache.maven.archetypes:maven-archetype-quickstart</li>
<li>Maven项目创建后，IDEA还会做一些初始化的工作，那么需要点击右下角的 Import Changes</li>
</ul>
</li>
<li><p>Idea Maven增加Jar</p>
<ul>
<li>修改pom.xml</li>
<li><img src="http://s1.wailian.download/2020/06/10/5761.png" alt="5761.png"></li>
<li>在修改了pom.xml之后，IDEA上会弹出这么一个 Maven projects need to be imported，点击Import Changes</li>
</ul>
</li>
</ul>
]]></content>
      <tags>
        <tag>开发工具</tag>
      </tags>
  </entry>
</search>
