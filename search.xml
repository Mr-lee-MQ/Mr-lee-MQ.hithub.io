<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Hexo的搭建</title>
    <url>/Mr-lee-MQ.hithub.io/2020/05/24/Hexo%E7%9A%84%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="软件安装及部署"><a href="#软件安装及部署" class="headerlink" title="软件安装及部署"></a>软件安装及部署<a id="more"></a></h1><h2 id="hexo-github-搭建的个人博客"><a href="#hexo-github-搭建的个人博客" class="headerlink" title="hexo + github 搭建的个人博客"></a>hexo + github 搭建的个人博客</h2><p>源于 <a href="https://www.bilibili.com/video/BV1Yb411a7ty" target="_blank" rel="noopener">https://www.bilibili.com/video/BV1Yb411a7ty</a></p>
<h2 id="hexo-gitee-搭建的个人博客"><a href="#hexo-gitee-搭建的个人博客" class="headerlink" title="hexo + gitee 搭建的个人博客"></a>hexo + gitee 搭建的个人博客</h2><p>源于 <a href="https://ouwen666.gitee.io/2020/01/29/Hexo+Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more" target="_blank" rel="noopener">https://ouwen666.gitee.io/2020/01/29/Hexo+Gitee%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/#more</a></p>
<h2 id="搭建完成后更换主题"><a href="#搭建完成后更换主题" class="headerlink" title="搭建完成后更换主题"></a>搭建完成后更换主题</h2><ul>
<li>安装主题</li>
</ul>
<p>git clone –depth=1 <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus.git" target="_blank" rel="noopener">https://github.com/JoeyBling/hexo-theme-yilia-plus.git</a> ./yilia-plus</p>
<ul>
<li>配置</li>
</ul>
<p>修改hexo根目录下的 _config.yml ➡️ theme: yilia-plus</p>
<ul>
<li>更新</li>
</ul>
<p>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</p>
<p>源于 <a href="https://github.com/JoeyBling/hexo-theme-yilia-plus" target="_blank" rel="noopener">https://github.com/JoeyBling/hexo-theme-yilia-plus</a></p>
<p>用Hexo写一篇博客</p>
<pre><code>$ hexo n &quot;我的第一篇博客&quot;
INFO  Created: E:\bolg\source\_posts\我的第一篇博客.md</code></pre><p>编辑完保存文件，重启Hexo服务</p>
<pre><code> hexo clean          # 清除所有记录 
$ hexo generate       # 生成静态网页 简写：hexo g
$ hexo server         # 启动服务 简写：hexo s</code></pre><p>或者用&amp;&amp;连接起来也可以</p>
<pre><code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo d</code></pre>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>My batis框架</title>
    <url>/Mr-lee-MQ.hithub.io/2020/05/27/My-batis%E6%A1%86%E6%9E%B6/</url>
    <content><![CDATA[<h1 id="My-Batis框架"><a href="#My-Batis框架" class="headerlink" title="My Batis框架"></a>My Batis框架<a id="more"></a></h1><p>​            mybatis通过XML或注解的方式将要执行的各种statement配置起来，并通过java对象和statement中的sql的动态参数进行映射生成最终执行的sql语句，最后由mybatis框架执行sql并将结果映射为java对象并返回。</p>
<h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><ul>
<li>表现层:　 用于展示数据</li>
<li>业务层: 　用于处理业务需求</li>
<li>持久层: 　是和数据交互的</li>
</ul>
<h2 id="持久层技术解决方案"><a href="#持久层技术解决方案" class="headerlink" title="持久层技术解决方案"></a>持久层技术解决方案</h2><h3 id="JDBC技术"><a href="#JDBC技术" class="headerlink" title="JDBC技术"></a>JDBC技术</h3><p>　　　　　　Connection<br>　　　　　　PreparedStatemnet<br>　　　　　　ResultSet</p>
<h3 id="Spring-的JdbcTemplate："><a href="#Spring-的JdbcTemplate：" class="headerlink" title="Spring 的JdbcTemplate："></a>Spring 的JdbcTemplate：</h3><p>　　Spring中对JDBC的简单封装</p>
<h3 id="Apache的DBUtils："><a href="#Apache的DBUtils：" class="headerlink" title="Apache的DBUtils："></a>Apache的DBUtils：</h3><p>　　它和Spring的 jdbcTemplate 很像，也是对JDBC的简单封装</p>
<h2 id="JDBC编程分析"><a href="#JDBC编程分析" class="headerlink" title="JDBC编程分析"></a>JDBC编程分析</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;    </span><br><span class="line">                  <span class="comment">//数据库连接</span></span><br><span class="line">			Connection connection = <span class="keyword">null</span>;  </span><br><span class="line">                 <span class="comment">//预编译的Statement</span></span><br><span class="line">			PreparedStatement preparedStatement = <span class="keyword">null</span>;    </span><br><span class="line">			ResultSet resultSet = <span class="keyword">null</span>;    </span><br><span class="line">    <span class="keyword">try</span> &#123;     <span class="comment">//加载数据库驱动    					  				  </span></span><br><span class="line">        Class.forName(<span class="string">"com.mysql.jdbc.Driver"</span>); <span class="comment">//通过驱动管理类获取数据库链接     </span></span><br><span class="line">        connection =  DriverManager </span><br><span class="line">.getConnection(<span class="string">"jdbc:mysql://localhost:3306/mybatis?characterEncoding=utf-8"</span>,<span class="string">"root"</span>, <span class="string">"mysql"</span>);   <span class="comment">//用户名密码</span></span><br><span class="line">    						<span class="comment">//定义 sql 语句 ?表示占位符    </span></span><br><span class="line">        String sql = <span class="string">"select * from user where username = ?"</span>; </span><br><span class="line">                          <span class="comment">//获取预处理 statement     </span></span><br><span class="line">        preparedStatement = connection.prepareStatement(sql); </span><br><span class="line">                         <span class="comment">//设置参数，第一个参数为 sql 语句中参数的序号（从 1 开始），第二个参数为设置的 参数值        </span></span><br><span class="line">        preparedStatement.setString(<span class="number">1</span>, <span class="string">"王五"</span>);     </span><br><span class="line">                         <span class="comment">//向数据库发出 sql 执行查询，查询出结果集     </span></span><br><span class="line">        resultSet =  preparedStatement.executeQuery(); </span><br><span class="line">                          <span class="comment">//遍历查询结果集     </span></span><br><span class="line">        <span class="keyword">while</span>(resultSet.next())&#123;              				                         System.out.println(resultSet.getString(<span class="string">"id"</span>)+<span class="string">"                              "</span>+resultSet.getString(<span class="string">"username"</span>));     </span><br><span class="line">              &#125;   </span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;     </span><br><span class="line">        e.printStackTrace(); </span><br><span class="line">   &#125;<span class="keyword">finally</span>&#123;     </span><br><span class="line">        <span class="comment">//释放资源     </span></span><br><span class="line">        <span class="keyword">if</span>(resultSet!=<span class="keyword">null</span>)&#123;      </span><br><span class="line">            <span class="keyword">try</span> &#123;       resultSet.close(); </span><br><span class="line">     		&#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span>(preparedStatement!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;       </span><br><span class="line">                preparedStatement.close();      </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                e.printStackTrace(); </span><br><span class="line">            &#125;     </span><br><span class="line">        &#125;     </span><br><span class="line">        <span class="keyword">if</span>(connection!=<span class="keyword">null</span>)&#123;      </span><br><span class="line">            <span class="keyword">try</span> &#123;       </span><br><span class="line">                connection.close();      </span><br><span class="line">            &#125; <span class="keyword">catch</span> (SQLException e) &#123;</span><br><span class="line">                <span class="comment">// TODO Auto-generated catch block       </span></span><br><span class="line">                e.printStackTrace();      &#125; </span><br><span class="line">        &#125; </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line">上边使用 jdbc 的原始方法（未经封装）实现了查询数据库表记录的操作。</span><br></pre></td></tr></table></figure>

<h2 id="原生JDBC的问题"><a href="#原生JDBC的问题" class="headerlink" title="原生JDBC的问题"></a>原生JDBC的问题</h2><ol>
<li>数据库连接，使用时就创建，不使用就立即释放，对数据库进行频繁的连接开启和关闭，造成数据库资源浪费，影响数据库性能。</li>
</ol>
<p>​       解决方案：使用数据库连接池管理数据库连接。</p>
<ol start="2">
<li><p>将sql语句硬编码到java中，如果sql语句修改，需要重新编译java代码，不利于系统维护。</p>
<p>解决方案： 将sql语句配置到xml文件中，即使sql变化，不需要对java代码进行重新编译。</p>
</li>
</ol>
<h2 id="mybatis的概述"><a href="#mybatis的概述" class="headerlink" title="mybatis的概述"></a>mybatis的概述</h2><p>​    mybatis是一个持久层框架，用java编写。</p>
<p>​    它封装了jdbc操作的很多细节，使开发者只需要关注sql语句本身，而无需关注注册驱动，创建链接等繁杂过程。</p>
<p>​    它使用了ORM思想，实现了结果集的封装</p>
<p>​        ORM：</p>
<p>​                    Object Relational Mappging 对象关系映射</p>
<p>​        简单的说：</p>
<p>​                    就是把数据库表和实体类及实体类的的属性对应起来</p>
<p>​                    让我们可以操作实体类就实现操作数据库</p>
<h2 id="mybatis框架流程"><a href="#mybatis框架流程" class="headerlink" title="mybatis框架流程"></a>mybatis框架流程</h2><ul>
<li>sqlMapConfig.xml(是mybatis的全局配置文件)配置了数据源，事务等mybatis运行环境，配置了映射文件（配置sql语句）mapper.xml(映射文件)，mapper.xml，mapper.xml………</li>
<li>sqlSessionFactory（会话工厂），根据配置文件创建工厂     作用：创建sqlsession。</li>
<li>sqlSession（会话），是一个接口，面向（程序员）的接口    作用：操作数据库（发出sql增删改查）</li>
<li>Executor（执行器），也是一个接口（基本执行器，缓存执行器）   作用：sqlsession内部通过执行器操作数据库</li>
</ul>
<h2 id="mybatis的入门"><a href="#mybatis的入门" class="headerlink" title="mybatis的入门"></a>mybatis的入门</h2><ul>
<li><p>官网下载Mybatis框架</p>
</li>
<li><p>创建maven工程</p>
</li>
<li><p>在pom.xml文件中添加Mybatis的坐标</p>
</li>
</ul>
  <figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;dependencies&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;org.mybatis&lt;&#x2F;groupId&gt;</span><br><span class="line">		&lt;artifactId&gt;mybatis&lt;&#x2F;artifactId&gt;      </span><br><span class="line">		&lt;version&gt;3.4.5&lt;&#x2F;version&gt;</span><br><span class="line">	&lt;&#x2F;dependency&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;junit&lt;&#x2F;groupId&gt;   单元测试</span><br><span class="line">		&lt;artifactId&gt;junit&lt;&#x2F;artifactId&gt;</span><br><span class="line">		&lt;version&gt;4.10&lt;&#x2F;version&gt;</span><br><span class="line">		&lt;scope&gt;test&lt;&#x2F;scope&gt;    </span><br><span class="line">	&lt;&#x2F;dependency&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;mysql&lt;&#x2F;groupId&gt;     </span><br><span class="line">		&lt;artifactId&gt;mysql-connector-java&lt;&#x2F;artifactId&gt;     						&lt;version&gt;5.1.6&lt;&#x2F;version&gt;     </span><br><span class="line">		&lt;scope&gt;runtime&lt;&#x2F;scope&gt;    </span><br><span class="line">	&lt;&#x2F;dependency&gt;    </span><br><span class="line">	&lt;dependency&gt;     </span><br><span class="line">		&lt;groupId&gt;log4j&lt;&#x2F;groupId&gt;  日志   </span><br><span class="line">		&lt;artifactId&gt;log4j&lt;&#x2F;artifactId&gt;    </span><br><span class="line">        &lt;version&gt;1.2.12&lt;&#x2F;version&gt;    </span><br><span class="line">	&lt;&#x2F;dependency&gt;   </span><br><span class="line">&lt;&#x2F;dependencies&gt;</span><br></pre></td></tr></table></figure>









<p>​     </p>
]]></content>
      <tags>
        <tag>框架</tag>
      </tags>
  </entry>
</search>
